{"version":1,"tree":{"n":"html","a":[["lang","zh",1],["lang","zh"]],"c":[{"n":"head","x":"\n\n","l":"\n","c":[{"n":"title","x":"Git 内部原理","l":"\n"},{"n":"link","l":"\n","a":[["rel","stylesheet"],["type","text/css"],["href","styles/epub3.css"]]},{"n":"link","l":"\n","a":[["rel","stylesheet"],["type","text/css"],["href","styles/epub3-css3-only.css"],["media","(min-device-width: 0px)"]]},{"n":"script","x":"\ndocument.addEventListener('DOMContentLoaded', function(event, reader) {\n  if (!(reader = navigator.epubReadingSystem)) {\n    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };\n    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;\n  }\n  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));\n});\n","l":"\n","a":[["type","text/javascript"]]}]},{"n":"body","x":"\n","l":"\n","c":[{"n":"section","x":"\n","l":"\n","a":[["class","chapter"],["title","Git 内部原理"],["type","chapter",2],["id","ch10-git-internals"]],"c":[{"n":"header","x":"\n","l":"\n","c":[{"n":"div","x":"\n","l":"\n","a":[["class","chapter-header"]],"c":[{"n":"h1","l":"\n","a":[["class","chapter-title"]],"c":[{"n":"small","a":[["class","subtitle"]],"c":[{"n":"b","x":"Git","l":" "},{"n":"b","x":"内部原理"}]}]}]}]},{"n":"p","x":"无论是从之前的章节直接跳到本章，还是读完了其余章节一直到这——你都将在本章见识到 Git 的内部工作原理和实现方式。\n我们认为学习这部分内容对于理解 Git 的用途和强大至关重要。不过也有人认为这些内容对于初学者而言可能难以理解且过于复杂。\n因此我们把这部分内容放在最后一章，在学习过程中可以先阅读这部分，也可以晚点阅读这部分，这取决于你自己。","l":"\n"},{"n":"p","x":"无论如何，既然已经读到了这里，就让我们开始吧。\n首先要弄明白一点，从根本上来讲 Git 是一个内容寻址（content-addressable）文件系统，并在此之上提供了一个版本控制系统的用户界面。\n马上你就会学到这意味着什么。","l":"\n"},{"n":"p","x":"早期的 Git（主要是 1.5 之前的版本）的用户界面要比现在复杂的多，因为它更侧重于作为一个文件系统，而不是一个打磨过的版本控制系统。\n不时会有一些陈词滥调抱怨早期那个晦涩复杂的 Git 用户界面；不过最近几年来，它已经被改进到不输于任何其他版本控制系统地清晰易用了。","l":"\n"},{"n":"p","x":"内容寻址文件系统层是一套相当酷的东西，所以在本章我们会先讲解这部分内容。随后我们会学习传输机制和版本库管理任务——你迟早会和它们打交道。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","底层命令与上层命令"]],"c":[{"n":"h2","x":"底层命令与上层命令","l":"\n","a":[["id","_plumbing_porcelain"]]},{"n":"p","x":"本书主要涵盖了 ","l":"\n","c":[{"n":"code","x":"checkout","l":"、","a":[["class","literal"]]},{"n":"code","x":"branch","l":"、","a":[["class","literal"]]},{"n":"code","x":"remote","l":" 等约 30 个 Git 的子命令。\n然而，由于 Git 最初是一套面向版本控制系统的工具集，而不是一个完整的、用户友好的版本控制系统，\n所以它还包含了一部分用于完成底层工作的子命令。\n这些命令被设计成能以 UNIX 命令行的风格连接在一起，抑或藉由脚本调用，来完成工作。\n这部分命令一般被称作“底层（plumbing）”命令，而那些更友好的命令则被称作“上层（porcelain）”命令。","a":[["class","literal"]]}]},{"n":"p","x":"你或许已经注意到了，本书前九章专注于探讨上层命令。\n然而在本章中，我们将主要面对底层命令。\n因为，底层命令得以让你窥探 Git 内部的工作机制，也有助于说明 Git 是如何完成工作的，以及它为何如此运作。\n多数底层命令并不面向最终用户：它们更适合作为新工具的组件和自定义脚本的组成部分。","l":"\n"},{"n":"p","x":"当在一个新目录或已有目录执行 ","l":"\n","c":[{"n":"code","x":"git  init","l":" 时，Git 会创建一个 ","a":[["class","literal"]]},{"n":"code","x":".git","l":" 目录。\n这个目录包含了几乎所有 Git 存储和操作的东西。\n如若想备份或复制一个版本库，只需把这个目录拷贝至另一处即可。\n本章探讨的所有内容，均位于这个目录内。\n新初始化的 ","a":[["class","literal"]]},{"n":"code","x":".git","l":" 目录的典型结构如下：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"ls -F1\nconfig\ndescription\nHEAD\nhooks/\ninfo/\nobjects/\nrefs/","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"随着 Git 版本的不同，该目录下可能还会包含其他内容。\n不过对于一个全新的 ","l":"\n","c":[{"n":"code","x":"git init","l":" 版本库，这将是你看到的默认结构。\n","a":[["class","literal"]]},{"n":"code","x":"description","l":" 文件仅供 GitWeb 程序使用，我们无需关心。\n","a":[["class","literal"]]},{"n":"code","x":"config","l":" 文件包含项目特有的配置选项。\n","a":[["class","literal"]]},{"n":"code","x":"info","l":" 目录包含一个全局性排除（global exclude）文件，\n用以放置那些不希望被记录在 ","a":[["class","literal"]]},{"n":"code","x":".gitignore","l":" 文件中的忽略模式（ignored patterns）。\n","a":[["class","literal"]]},{"n":"code","x":"hooks","l":" 目录包含客户端或服务端的钩子脚本（hook scripts），\n在 ","a":[["class","literal"]]},{"n":"a","x":"Git 钩子","l":" 中这部分话题已被详细探讨过。","a":[["id","xref--ch08-customizing-git--_git_hooks"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch08-customizing-git.xhtml\", \"frag\": \"_git_hooks\"}"]]}]},{"n":"p","x":"剩下的四个条目很重要：","l":"\n","c":[{"n":"code","x":"HEAD","l":" 文件、（尚待创建的）","a":[["class","literal"]]},{"n":"code","x":"index","l":" 文件，和 ","a":[["class","literal"]]},{"n":"code","x":"objects","l":" 目录、","a":[["class","literal"]]},{"n":"code","x":"refs","l":" 目录。\n它们都是 Git 的核心组成部分。\n","a":[["class","literal"]]},{"n":"code","x":"objects","l":" 目录存储所有数据内容；","a":[["class","literal"]]},{"n":"code","x":"refs","l":" 目录存储指向数据（分支、远程仓库和标签等）的提交对象的指针；\n","a":[["class","literal"]]},{"n":"code","x":"HEAD","l":" 文件指向目前被检出的分支；","a":[["class","literal"]]},{"n":"code","x":"index","l":" 文件保存暂存区信息。\n我们将详细地逐一检视这四部分，来理解 Git 是如何运转的。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","Git 对象"]],"c":[{"n":"h2","x":"Git 对象","l":"\n","a":[["id","_objects"]]},{"n":"p","x":"Git 是一个内容寻址文件系统，听起来很酷。但这是什么意思呢？\n这意味着，Git 的核心部分是一个简单的键值对数据库（key-value data store）。\n你可以向 Git 仓库中插入任意类型的内容，它会返回一个唯一的键，通过该键可以在任意时刻再次取回该内容。","l":"\n"},{"n":"p","x":"可以通过底层命令 ","l":"\n","c":[{"n":"code","x":"git hash-object","l":" 来演示上述效果——该命令可将任意数据保存于\n","a":[["class","literal"]]},{"n":"code","x":".git/objects","l":" 目录（即 ","a":[["class","literal"]]},{"n":"strong","x":"对象数据库","l":"），并返回指向该数据对象的唯一的键。"}]},{"n":"p","x":"首先，我们需要初始化一个新的 Git 版本库，并确认 ","l":"\n","c":[{"n":"code","x":"objects","l":" 目录为空：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git init test\nInitialized empty Git repository in /tmp/test/.git/\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"cd test\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"find .git/objects\n.git/objects\n.git/objects/info\n.git/objects/pack\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"find .git/objects -type f","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"可以看到 Git 对 ","l":"\n","c":[{"n":"code","x":"objects","l":" 目录进行了初始化，并创建了 ","a":[["class","literal"]]},{"n":"code","x":"pack","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"info","l":" 子目录，但均为空。\n接着，我们用 ","a":[["class","literal"]]},{"n":"code","x":"git hash-object","l":" 创建一个新的数据对象并将它手动存入你的新 Git 数据库中：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"echo ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'test content'","l":" | git hash-object -w --stdin\nd670460b4b4aece5915caf5c68d12f560a9fe3e4","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"在这种最简单的形式中，","l":"\n","c":[{"n":"code","x":"git hash-object","l":" 会接受你传给它的东西，而它只会返回可以存储在 Git 仓库中的唯一键。\n","a":[["class","literal"]]},{"n":"code","x":"-w","l":" 选项会指示该命令不要只返回键，还要将该对象写入数据库中。\n最后，","a":[["class","literal"]]},{"n":"code","x":"--stdin","l":" 选项则指示该命令从标准输入读取内容；若不指定此选项，则须在命令尾部给出待存储文件的路径。","a":[["class","literal"]]}]},{"n":"p","x":"此命令输出一个长度为 40 个字符的校验和。\n这是一个 SHA-1 哈希值——一个将待存储的数据外加一个头部信息（header）一起做 SHA-1 校验运算而得的校验和。后文会简要讨论该头部信息。\n现在我们可以查看 Git 是如何存储数据的：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"find .git/objects -type f\n.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果你再次查看 ","l":"\n","c":[{"n":"code","x":"objects","l":" 目录，那么可以在其中找到一个与新内容对应的文件。\n这就是开始时 Git 存储内容的方式——一个文件对应一条内容，\n以该内容加上特定头部信息一起的 SHA-1 校验和为文件命名。\n校验和的前两个字符用于命名子目录，余下的 38 个字符则用作文件名。","a":[["class","literal"]]}]},{"n":"p","x":"一旦你将内容存储在了对象数据库中，那么可以通过 ","l":"\n","c":[{"n":"code","x":"cat-file","l":" 命令从 Git 那里取回数据。\n这个命令简直就是一把剖析 Git 对象的瑞士军刀。\n为 ","a":[["class","literal"]]},{"n":"code","x":"cat-file","l":" 指定 ","a":[["class","literal"]]},{"n":"code","x":"-p","l":" 选项可指示该命令自动判断内容的类型，并为我们显示大致的内容：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4\ntest content","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"至此，你已经掌握了如何向 Git 中存入内容，以及如何将它们取出。\n我们同样可以将这些操作应用于文件中的内容。\n例如，可以对一个文件进行简单的版本控制。\n首先，创建一个新文件并将其内容存入数据库：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"echo ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'version 1'","l":" > test.txt\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","l":"git hash-object -w test.txt\n83baae61804e65cc73a7201a7252750c76066a30","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"接着，向文件里写入新内容，并再次将其存入数据库：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"echo ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'version 2'","l":" > test.txt\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","l":"git hash-object -w test.txt\n1f7a7a472abf3dd9643fd615f6da379c4acb3e3a","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"对象数据库记录下了该文件的两个不同版本，当然之前我们存入的第一条内容也还在：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"find .git/objects -type f\n.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a\n.git/objects/83/baae61804e65cc73a7201a7252750c76066a30\n.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"现在可以在删掉 ","l":"\n","c":[{"n":"code","x":"test.txt","l":" 的本地副本，然后用 Git 从对象数据库中取回它的第一个版本：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -p 83baae61804e65cc73a7201a7252750c76066a30 > test.txt\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"cat test.txt\nversion 1","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"或者第二个版本：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -p 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a > test.txt\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"cat test.txt\nversion 2","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"然而，记住文件的每一个版本所对应的 SHA-1 值并不现实；另一个问题是，在这个（简单的版本控制）系统中，文件名并没有被保存——我们仅保存了文件的内容。\n上述类型的对象我们称之为 ","l":"\n","c":[{"n":"strong","x":"数据对象（blob object）","l":"。\n利用 "},{"n":"code","x":"git cat-file -t","l":" 命令，可以让 Git 告诉我们其内部存储的任何对象类型，只要给定该对象的 SHA-1 值：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a\nblob","a":[["style","font-weight: bold"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","树对象"]],"c":[{"n":"h3","x":"树对象","l":"\n","a":[["id","_tree_objects"]]},{"n":"p","x":"接下来要探讨的 Git 对象类型是树对象（tree object），它能解决文件名保存的问题，也允许我们将多个文件组织到一起。\nGit 以一种类似于 UNIX 文件系统的方式存储内容，但作了些许简化。\n所有内容均以树对象和数据对象的形式存储，其中树对象对应了 UNIX 中的目录项，数据对象则大致上对应了 inodes 或文件内容。\n一个树对象包含了一条或多条树对象记录（tree entry），每条记录含有一个指向数据对象或者子树对象的 SHA-1 指针，以及相应的模式、类型、文件名信息。\n例如，某项目当前对应的最新树对象可能是这样的：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -p master^{tree}\n100644 blob a906cb2a4a904a152e80877d4088654daad0c859      README\n100644 blob 8f94139338f9404f26296befa88755fc2598c289      Rakefile\n040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0      lib","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","l":"\n","c":[{"n":"code","x":"master^{tree}","l":" 语法表示 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支上最新的提交所指向的树对象。\n请注意，","a":[["class","literal"]]},{"n":"code","x":"lib","l":" 子目录（所对应的那条树对象记录）并不是一个数据对象，而是一个指针，其指向的是另一个树对象：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0\n100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b      simplegit.rb","a":[["style","font-weight: bold"]]}]}]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note"],["type","note",2]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"你可能会在某些 shell 中使用 ","l":"\n","c":[{"n":"code","x":"master^{tree}","l":" 语法时遇到错误。","a":[["class","literal"]]}]},{"n":"p","x":"在 Windows 的 CMD 中，字符 ","l":"\n","c":[{"n":"code","x":"^","l":" 被用于转义，因此你必须双写它以避免出现问题：","a":[["class","literal"]]},{"n":"code","x":"git cat-file -p master^^{tree}","l":"。\n在 PowerShell 中使用字符 {} 时则必须用引号引起来，以此来避免参数解析错误：","a":[["class","literal"]]},{"n":"code","x":"git cat-file -p 'master^{tree}'","l":"。","a":[["class","literal"]]}]},{"n":"p","x":"在 ZSH 中，字符 ","l":"\n","c":[{"n":"code","x":"^","l":" 被用在通配模式（globbing）中，因此你必须将整个表达式用引号引起来：","a":[["class","literal"]]},{"n":"code","x":"git cat-file -p \"master^{tree}\"","l":"。","a":[["class","literal"]]}]}]}]},{"n":"p","x":"从概念上讲，Git 内部存储的数据有点像这样：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/data-model-1.png"],["alt","简化版的 Git 数据模型。"],["data-calibre-src","OEBPS/images/data-model-1.png"]]}]},{"n":"figcaption","x":"Figure 1. 简化版的 Git 数据模型。","l":"\n"}]},{"n":"p","x":"你可以轻松创建自己的树对象。\n通常，Git 根据某一时刻暂存区（即 index 区域，下同）所表示的状态创建并记录一个对应的树对象，\n如此重复便可依次记录（某个时间段内）一系列的树对象。\n因此，为创建一个树对象，首先需要通过暂存一些文件来创建一个暂存区。\n可以通过底层命令 ","l":"\n","c":[{"n":"code","x":"git update-index","l":" 为一个单独文件——我们的 test.txt 文件的首个版本——创建一个暂存区。\n利用该命令，可以把 ","a":[["class","literal"]]},{"n":"code","x":"test.txt","l":" 文件的首个版本人为地加入一个新的暂存区。\n必须为上述命令指定 ","a":[["class","literal"]]},{"n":"code","x":"--add","l":" 选项，因为此前该文件并不在暂存区中（我们甚至都还没来得及创建一个暂存区呢）；\n同样必需的还有 ","a":[["class","literal"]]},{"n":"code","x":"--cacheinfo","l":" 选项，因为将要添加的文件位于 Git 数据库中，而不是位于当前目录下。\n同时，需要指定文件模式、SHA-1 与文件名：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git update-index --add --cacheinfo 100644 ","a":[["style","font-weight: bold"]]},{"n":"span","x":"\\","l":"\n  83baae61804e65cc73a7201a7252750c76066a30 test.txt","a":[["style","font-weight: bold; font-style: italic"]]}]}]}]},{"n":"p","x":"本例中，我们指定的文件模式为 ","l":"\n","c":[{"n":"code","x":"100644","l":"，表明这是一个普通文件。\n其他选择包括：","a":[["class","literal"]]},{"n":"code","x":"100755","l":"，表示一个可执行文件；","a":[["class","literal"]]},{"n":"code","x":"120000","l":"，表示一个符号链接。\n这里的文件模式参考了常见的 UNIX 文件模式，但远没那么灵活——上述三种模式即是\nGit 文件（即数据对象）的所有合法模式（当然，还有其他一些模式，但用于目录项和子模块）。","a":[["class","literal"]]}]},{"n":"p","x":"现在，可以通过 ","l":"\n","c":[{"n":"code","x":"git write-tree","l":" 命令将暂存区内容写入一个树对象。\n此处无需指定 ","a":[["class","literal"]]},{"n":"code","x":"-w","l":" 选项——如果某个树对象此前并不存在的话，当调用此命令时，\n它会根据当前暂存区状态自动创建一个新的树对象：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git write-tree\nd8329fc1cc938780ffdd9f94e0d364e0ea74f579\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579\n100644 blob 83baae61804e65cc73a7201a7252750c76066a30      test.txt","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"不妨用之前见过的 ","l":"\n","c":[{"n":"code","x":"git cat-file","l":" 命令验证一下它确实是一个树对象：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -t d8329fc1cc938780ffdd9f94e0d364e0ea74f579\ntree","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"接着我们来创建一个新的树对象，它包括 ","l":"\n","c":[{"n":"code","x":"test.txt","l":" 文件的第二个版本，以及一个新的文件：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"echo ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'new file'","l":" > new.txt\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","l":"git update-index --add --cacheinfo 100644 ","a":[["style","font-weight: bold"]]},{"n":"span","x":"\\","l":"\n  1f7a7a472abf3dd9643fd615f6da379c4acb3e3a test.txt\n","a":[["style","font-weight: bold; font-style: italic"]]},{"n":"span","x":"$ ","l":"git update-index --add new.txt","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"暂存区现在包含了 ","l":"\n","c":[{"n":"code","x":"test.txt","l":" 文件的新版本，和一个新文件：","a":[["class","literal"]]},{"n":"code","x":"new.txt","l":"。\n记录下这个目录树（将当前暂存区的状态记录为一个树对象），然后观察它的结构：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git write-tree\n0155eb4229851634a0f03eb265b69f5a2d56f341\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git cat-file -p 0155eb4229851634a0f03eb265b69f5a2d56f341\n100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt\n100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"我们注意到，新的树对象包含两条文件记录，同时 test.txt 的 SHA-1 值（","l":"\n","c":[{"n":"code","x":"1f7a7a","l":"）是先前值的“第二版”。\n只是为了好玩：你可以将第一个树对象加入第二个树对象，使其成为新的树对象的一个子目录。\n通过调用 ","a":[["class","literal"]]},{"n":"code","x":"git read-tree","l":" 命令，可以把树对象读入暂存区。\n本例中，可以通过对该命令指定 ","a":[["class","literal"]]},{"n":"code","x":"--prefix","l":" 选项，将一个已有的树对象作为子树读入暂存区：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git read-tree --prefix=bak d8329fc1cc938780ffdd9f94e0d364e0ea74f579\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git write-tree\n3c4e9cd789d88d8d89c1073707c3585e41b0e614\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git cat-file -p 3c4e9cd789d88d8d89c1073707c3585e41b0e614\n040000 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579      bak\n100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt\n100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果基于这个新的树对象创建一个工作目录，你会发现工作目录的根目录包含两个文件以及一个名为\n","l":"\n","c":[{"n":"code","x":"bak","l":" 的子目录，该子目录包含 ","a":[["class","literal"]]},{"n":"code","x":"test.txt","l":" 文件的第一个版本。\n可以认为 Git 内部存储着的用于表示上述结构的数据是这样的：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/data-model-2.png"],["alt","当前 Git 的数据内容结构。"],["data-calibre-src","OEBPS/images/data-model-2.png"]]}]},{"n":"figcaption","x":"Figure 2. 当前 Git 的数据内容结构。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","提交对象"]],"c":[{"n":"h3","x":"提交对象","l":"\n","a":[["id","_git_commit_objects"]]},{"n":"p","x":"如果你做完了以上所有操作，那么现在就有了三个树对象，分别代表我们想要跟踪的不同项目快照。\n然而问题依旧：若想重用这些快照，你必须记住所有三个 SHA-1 哈希值。\n并且，你也完全不知道是谁保存了这些快照，在什么时刻保存的，以及为什么保存这些快照。\n而以上这些，正是提交对象（commit object）能为你保存的基本信息。","l":"\n"},{"n":"p","x":"可以通过调用 ","l":"\n","c":[{"n":"code","x":"commit-tree","l":" 命令创建一个提交对象，为此需要指定一个树对象的 SHA-1 值，以及该提交的父提交对象（如果有的话）。\n我们从之前创建的第一个树对象开始：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"echo ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'first commit'","l":" | git commit-tree d8329f\nfdf4fc3344e67ab068f836878b6c4951e3b15f3d","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"由于创建时间和作者数据不同，你现在会得到一个不同的散列值。\n请将本章后续内容中的提交和标签的散列值替换为你自己的校验和。\n现在可以通过 ","l":"\n","c":[{"n":"code","x":"git cat-file","l":" 命令查看这个新提交对象：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -p fdf4fc3\ntree d8329fc1cc938780ffdd9f94e0d364e0ea74f579\nauthor Scott Chacon <schacon@gmail.com> 1243040974 -0700\ncommitter Scott Chacon <schacon@gmail.com> 1243040974 -0700\n\nfirst commit","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"提交对象的格式很简单：它先指定一个顶层树对象，代表当前项目快照；\n然后是可能存在的父提交（前面描述的提交对象并不存在任何父提交）；\n之后是作者/提交者信息（依据你的 ","l":"\n","c":[{"n":"code","x":"user.name","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"user.email","l":" 配置来设定，外加一个时间戳）；\n留空一行，最后是提交注释。","a":[["class","literal"]]}]},{"n":"p","x":"接着，我们将创建另两个提交对象，它们分别引用各自的上一个提交（作为其父提交对象）：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"echo ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'second commit'","l":" | git commit-tree 0155eb -p fdf4fc3\ncac0cab538b970a37ea1e769cbbde608743bc96d\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","l":"echo ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'third commit'","l":"  | git commit-tree 3c4e9c -p cac0cab\n1a410efbd13591db07496601ebc7a059dd55cfe9","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"这三个提交对象分别指向之前创建的三个树对象快照中的一个。\n现在，如果对最后一个提交的 SHA-1 值运行 ","l":"\n","c":[{"n":"code","x":"git log","l":" 命令，会出乎意料的发现，你已有一个货真价实的、可由 ","a":[["class","literal"]]},{"n":"code","x":"git log","l":" 查看的 Git 提交历史了：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git log --stat 1a410e\ncommit 1a410efbd13591db07496601ebc7a059dd55cfe9\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri May 22 18:15:24 2009 -0700\n\n\tthird commit\n\n bak/test.txt | 1 +\n 1 file changed, 1 insertion(+)\n\ncommit cac0cab538b970a37ea1e769cbbde608743bc96d\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri May 22 18:14:29 2009 -0700\n\n\tsecond commit\n\n new.txt  | 1 +\n test.txt | 2 +-\n 2 files changed, 2 insertions(+), 1 deletion(-)\n\ncommit fdf4fc3344e67ab068f836878b6c4951e3b15f3d\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri May 22 18:09:34 2009 -0700\n\n    first commit\n\n test.txt | 1 +\n 1 file changed, 1 insertion(+)","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"太神奇了：\n就在刚才，你没有借助任何上层命令，仅凭几个底层操作便完成了一个 Git 提交历史的创建。\n这就是每次我们运行 ","l":"\n","c":[{"n":"code","x":"git add","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"git commit","l":" 命令时，Git 所做的工作实质就是将被改写的文件保存为数据对象，\n更新暂存区，记录树对象，最后创建一个指明了顶层树对象和父提交的提交对象。\n这三种主要的 Git 对象——数据对象、树对象、提交对象——最初均以单独文件的形式保存在 ","a":[["class","literal"]]},{"n":"code","x":".git/objects","l":" 目录下。\n下面列出了目前示例目录内的所有对象，辅以各自所保存内容的注释：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"find .git/objects -type f\n.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2\n.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3\n.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2\n.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3\n.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1\n.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2\n.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'\n.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1\n.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt\n.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果跟踪所有的内部指针，将得到一个类似下面的对象关系图：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/data-model-3.png"],["alt","你的 Git 目录下所有可达的对象。"],["data-calibre-src","OEBPS/images/data-model-3.png"]]}]},{"n":"figcaption","x":"Figure 3. 你的 Git 目录下所有可达的对象。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","对象存储"]],"c":[{"n":"h3","x":"对象存储","l":"\n","a":[["id","_对象存储"]]},{"n":"p","x":"前文曾提及，你向 Git 仓库提交的所有对象都会有个头部信息一并被保存。\n让我们略花些时间来看看 Git 是如何存储其对象的。\n通过在 Ruby 脚本语言中交互式地演示，你将看到一个数据对象——本例中是字符串“what is up, doc?”——是如何被存储的。","l":"\n"},{"n":"p","x":"可以通过 ","l":"\n","c":[{"n":"code","x":"irb","l":" 命令启动 Ruby 的交互模式：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"irb\n>> content = \"what is up, doc?\"\n=> \"what is up, doc?\"","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"Git 首先会以识别出的对象的类型作为开头来构造一个头部信息，本例中是一个“blob”字符串。\n接着 Git 会在头部的第一部分添加一个空格，随后是数据内容的字节数，最后是一个空字节（null byte）：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":">> header = \"blob #{content.length}\\0\"\n=> \"blob 16\\u0000\""}]}]}]},{"n":"p","x":"Git 会将上述头部信息和原始数据拼接起来，并计算出这条新内容的 SHA-1 校验和。\n在 Ruby 中可以这样计算 SHA-1 值——先通过 ","l":"\n","c":[{"n":"code","x":"require","l":" 命令导入 SHA-1 digest 库，\n然后对目标字符串调用 ","a":[["class","literal"]]},{"n":"code","x":"Digest::SHA1.hexdigest()","l":"：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":">> store = header + content\n=> \"blob 16\\u0000what is up, doc?\"\n>> require 'digest/sha1'\n=> true\n>> sha1 = Digest::SHA1.hexdigest(store)\n=> \"bd9dbf5aae1a3862dd1526723246b20206e5fc37\""}]}]}]},{"n":"p","x":"我们来比较一下 ","l":"\n","c":[{"n":"code","x":"git hash-object","l":" 的输出。\n这里使用了 ","a":[["class","literal"]]},{"n":"code","x":"echo -n","l":" 以避免在输出中添加换行。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"echo -n ","a":[["style","font-weight: bold"]]},{"n":"span","x":"\"what is up, doc?\"","l":" | git hash-object --stdin\nbd9dbf5aae1a3862dd1526723246b20206e5fc37","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"Git 会通过 zlib 压缩这条新内容。在 Ruby 中可以借助 zlib 库做到这一点。\n先导入相应的库，然后对目标内容调用 ","l":"\n","c":[{"n":"code","x":"Zlib::Deflate.deflate()","l":"：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":">> require 'zlib'\n=> true\n>> zlib_content = Zlib::Deflate.deflate(store)\n=> \"x\\x9CK\\xCA\\xC9OR04c(\\xCFH,Q\\xC8,V(-\\xD0QH\\xC9O\\xB6\\a\\x00_\\x1C\\a\\x9D\""}]}]}]},{"n":"p","x":"最后，需要将这条经由 zlib 压缩的内容写入磁盘上的某个对象。\n要先确定待写入对象的路径（SHA-1 值的前两个字符作为子目录名称，后 38 个字符则作为子目录内文件的名称）。\n如果该子目录不存在，可以通过 Ruby 中的 ","l":"\n","c":[{"n":"code","x":"FileUtils.mkdir_p()","l":" 函数来创建它。\n接着，通过 ","a":[["class","literal"]]},{"n":"code","x":"File.open()","l":" 打开这个文件。最后，对上一步中得到的文件句柄调用 ","a":[["class","literal"]]},{"n":"code","x":"write()","l":" 函数，以向目标文件写入之前那条 zlib 压缩过的内容：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":">> path = '.git/objects/' + sha1[0,2] + '/' + sha1[2,38]\n=> \".git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37\"\n>> require 'fileutils'\n=> true\n>> FileUtils.mkdir_p(File.dirname(path))\n=> \".git/objects/bd\"\n>> File.open(path, 'w') { |f| f.write zlib_content }\n=> 32"}]}]}]},{"n":"p","x":"我们用 ","l":"\n","c":[{"n":"code","x":"git cat-file","l":" 查看一下该对象的内容：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":"---\n"},{"n":"span","x":"$ ","l":"git cat-file -p bd9dbf5aae1a3862dd1526723246b20206e5fc37\nwhat is up, doc?\n---","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"就是这样——你已创建了一个有效的 Git 数据对象。","l":"\n"},{"n":"p","x":"所有的 Git 对象均以这种方式存储，区别仅在于类型标识——另两种对象类型的头部信息以字符串“commit”或“tree”开头，而不是“blob”。\n另外，虽然数据对象的内容几乎可以是任何东西，但提交对象和树对象的内容却有各自固定的格式。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","Git 引用"]],"c":[{"n":"h2","x":"Git 引用","l":"\n","a":[["id","_git_refs"]]},{"n":"p","x":"如果你对仓库中从一个提交（比如 ","l":"\n","c":[{"n":"code","x":"1a410e","l":"）开始往前的历史感兴趣，那么可以运行\n","a":[["class","literal"]]},{"n":"code","x":"git log 1a410e","l":" 这样的命令来显示历史，不过你需要记得 ","a":[["class","literal"]]},{"n":"code","x":"1a410e","l":" 是你查看历史的起点提交。\n如果我们有一个文件来保存 SHA-1 值，而该文件有一个简单的名字，\n然后用这个名字指针来替代原始的 SHA-1 值的话会更加简单。","a":[["class","literal"]]}]},{"n":"p","x":"在 Git 中，这种简单的名字被称为“引用（references，或简写为 refs）”。\n你可以在 ","l":"\n","c":[{"n":"code","x":".git/refs","l":" 目录下找到这类含有 SHA-1 值的文件。\n在目前的项目中，这个目录没有包含任何文件，但它包含了一个简单的目录结构：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"find .git/refs\n.git/refs\n.git/refs/heads\n.git/refs/tags\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"find .git/refs -type f","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"若要创建一个新引用来帮助记忆最新提交所在的位置，从技术上讲我们只需简单地做如下操作：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"echo 1a410efbd13591db07496601ebc7a059dd55cfe9 > .git/refs/heads/master","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"现在，你就可以在 Git 命令中使用这个刚创建的新引用来代替 SHA-1 值了：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git log --pretty=oneline master\n1a410efbd13591db07496601ebc7a059dd55cfe9 third commit\ncac0cab538b970a37ea1e769cbbde608743bc96d second commit\nfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"我们不提倡直接编辑引用文件。\n如果想更新某个引用，Git 提供了一个更加安全的命令 ","l":"\n","c":[{"n":"code","x":"update-ref","l":" 来完成此事：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这基本就是 Git 分支的本质：一个指向某一系列提交之首的指针或引用。\n若想在第二个提交上创建一个分支，可以这么做：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git update-ref refs/heads/test cac0ca","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这个分支将只包含从第二个提交开始往前追溯的记录：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git log --pretty=oneline test\ncac0cab538b970a37ea1e769cbbde608743bc96d second commit\nfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"至此，我们的 Git 数据库从概念上看起来像这样：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/data-model-4.png"],["alt","包含分支引用的 Git 目录对象。"],["data-calibre-src","OEBPS/images/data-model-4.png"]]}]},{"n":"figcaption","x":"Figure 4. 包含分支引用的 Git 目录对象。","l":"\n"}]},{"n":"p","x":"当运行类似于 ","l":"\n","c":[{"n":"code","x":"git branch <branch>","l":" 这样的命令时，Git 实际上会运行 ","a":[["class","literal"]]},{"n":"code","x":"update-ref","l":" 命令，\n取得当前所在分支最新提交对应的 SHA-1 值，并将其加入你想要创建的任何新引用中。","a":[["class","literal"]]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","HEAD 引用"]],"c":[{"n":"h3","x":"HEAD 引用","l":"\n","a":[["id","ref_the_ref"]]},{"n":"p","x":"现在的问题是，当你执行 ","l":"\n","c":[{"n":"code","x":"git branch <branch>","l":" 时，Git 如何知道最新提交的 SHA-1 值呢？\n答案是 HEAD 文件。","a":[["class","literal"]]}]},{"n":"p","x":"HEAD 文件通常是一个符号引用（symbolic reference），指向目前所在的分支。\n所谓符号引用，表示它是一个指向其他引用的指针。","l":"\n"},{"n":"p","x":"然而在某些罕见的情况下，HEAD 文件可能会包含一个 git 对象的 SHA-1 值。\n当你在检出一个标签、提交或远程分支，让你的仓库变成\n","l":"\n","c":[{"n":"a","x":"“分离 HEAD”","l":"状态时，就会出现这种情况。","a":[["href","https://git-scm.com/docs/git-checkout#_detached_head"],["class","link"]]}]},{"n":"p","x":"如果查看 HEAD 文件的内容，通常我们看到类似这样的内容：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cat .git/HEAD\nref: refs/heads/master","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果执行 ","l":"\n","c":[{"n":"code","x":"git checkout test","l":"，Git 会像这样更新 HEAD 文件：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cat .git/HEAD\nref: refs/heads/test","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"当我们执行 ","l":"\n","c":[{"n":"code","x":"git commit","l":" 时，该命令会创建一个提交对象，并用 HEAD 文件中那个引用所指向的 SHA-1 值设置其父提交字段。","a":[["class","literal"]]}]},{"n":"p","x":"你也可以手动编辑该文件，然而同样存在一个更安全的命令来完成此事：","l":"\n","c":[{"n":"code","x":"git symbolic-ref","l":"。\n可以借助此命令来查看 HEAD 引用对应的值：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git symbolic-ref HEAD\nrefs/heads/master","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"同样可以设置 HEAD 引用的值：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git symbolic-ref HEAD refs/heads/test\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"cat .git/HEAD\nref: refs/heads/test","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"不能把符号引用设置为一个不符合引用规范的值：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git symbolic-ref HEAD test\nfatal: Refusing to point HEAD outside of refs/","a":[["style","font-weight: bold"]]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","标签引用"]],"c":[{"n":"h3","x":"标签引用","l":"\n","a":[["id","_标签引用"]]},{"n":"p","x":"前面我们刚讨论过 Git 的三种主要的对象类型（","l":"\n","c":[{"n":"strong","x":"数据对象","l":"、"},{"n":"strong","x":"树对象","l":" 和 "},{"n":"strong","x":"提交对象","l":" ），然而实际上还有第四种。\n"},{"n":"strong","x":"标签对象（tag object）","l":" 非常类似于一个提交对象——它包含一个标签创建者信息、一个日期、一段注释信息，以及一个指针。\n主要的区别在于，标签对象通常指向一个提交对象，而不是一个树对象。\n它像是一个永不移动的分支引用——永远指向同一个提交对象，只不过给这个提交对象加上一个更友好的名字罢了。"}]},{"n":"p","x":"正如 ","l":"\n","c":[{"n":"a","x":"Git 基础","l":" 中所讨论的那样，存在两种类型的标签：附注标签和轻量标签。\n可以像这样创建一个轻量标签：","a":[["id","xref--ch02-git-basics-chapter"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"\"}"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96d","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这就是轻量标签的全部内容——一个固定的引用。\n然而，一个附注标签则更复杂一些。\n若要创建一个附注标签，Git 会创建一个标签对象，并记录一个引用来指向该标签对象，而不是直接指向提交对象。\n可以通过创建一个附注标签来验证这个过程（使用 ","l":"\n","c":[{"n":"code","x":"-a","l":" 选项）：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git tag -a v1.1 1a410efbd13591db07496601ebc7a059dd55cfe9 -m ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'test tag'","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"下面是上述过程所建标签对象的 SHA-1 值：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cat .git/refs/tags/v1.1\n9585191f37f7b0fb9444f35a9bf50de191beadc2","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"现在对该 SHA-1 值运行 ","l":"\n","c":[{"n":"code","x":"git cat-file -p","l":" 命令：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -p 9585191f37f7b0fb9444f35a9bf50de191beadc2\nobject 1a410efbd13591db07496601ebc7a059dd55cfe9\ntype commit\ntag v1.1\ntagger Scott Chacon <schacon@gmail.com> Sat May 23 16:48:58 2009 -0700\n\ntest tag","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"我们注意到，object 条目指向我们打了标签的那个提交对象的 SHA-1 值。\n另外要注意的是，标签对象并非必须指向某个提交对象；你可以对任意类型的 Git 对象打标签。\n例如，在 Git 源码中，项目维护者将他们的 GPG 公钥添加为一个数据对象，然后对这个对象打了一个标签。\n可以克隆一个 Git 版本库，然后通过执行下面的命令来在这个版本库中查看上述公钥：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file blob junio-gpg-pub","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"Linux 内核版本库同样有一个不指向提交对象的标签对象——首个被创建的标签对象所指向的是最初被引入版本库的那份内核源码所对应的树对象。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","远程引用"]],"c":[{"n":"h3","x":"远程引用","l":"\n","a":[["id","_远程引用"]]},{"n":"p","x":"我们将看到的第三种引用类型是远程引用（remote reference）。\n如果你添加了一个远程版本库并对其执行过推送操作，Git 会记录下最近一次推送操作时每一个分支所对应的值，并保存在 ","l":"\n","c":[{"n":"code","x":"refs/remotes","l":" 目录下。\n例如，你可以添加一个叫做 ","a":[["class","literal"]]},{"n":"code","x":"origin","l":" 的远程版本库，然后把 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支推送上去：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git remote add origin git@github.com:schacon/simplegit-progit.git\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git push origin master\nCounting objects: 11, done.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (7/7), 716 bytes, done.\nTotal 7 (delta 2), reused 4 (delta 1)\nTo git@github.com:schacon/simplegit-progit.git\n  a11bef0..ca82a6d  master -> master","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"此时，如果查看 ","l":"\n","c":[{"n":"code","x":"refs/remotes/origin/master","l":" 文件，可以发现 ","a":[["class","literal"]]},{"n":"code","x":"origin","l":" 远程版本库的 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支所对应的 SHA-1 值，就是最近一次与服务器通信时本地 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支所对应的 SHA-1 值：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cat .git/refs/remotes/origin/master\nca82a6dff817ec66f44342007202690a93763949","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"远程引用和分支（位于 ","l":"\n","c":[{"n":"code","x":"refs/heads","l":" 目录下的引用）之间最主要的区别在于，远程引用是只读的。\n虽然可以 ","a":[["class","literal"]]},{"n":"code","x":"git checkout","l":" 到某个远程引用，但是 Git 并不会将 HEAD 引用指向该远程引用。因此，你永远不能通过 ","a":[["class","literal"]]},{"n":"code","x":"commit","l":" 命令来更新远程引用。\nGit 将这些远程引用作为记录远程服务器上各分支最后已知位置状态的书签来管理。","a":[["class","literal"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","包文件"]],"c":[{"n":"h2","x":"包文件","l":"\n","a":[["id","_包文件"]]},{"n":"p","x":"如果你跟着做完了上一节中的所有步骤，那么现在应该有了一个测试用的 Git 仓库，\n其中包含 11 个对象：四个数据对象，三个树对象，三个提交对象和一个标签对象：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"find .git/objects -type f\n.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2\n.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3\n.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2\n.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3\n.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1\n.git/objects/95/85191f37f7b0fb9444f35a9bf50de191beadc2 # tag\n.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2\n.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'\n.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1\n.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt\n.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"Git 使用 zlib 压缩这些文件的内容，而且我们并没有存储太多东西，所以上文中的文件一共只占用了 925 字节。\n接下来，我们会指引你添加一些大文件到仓库中，以此展示 Git 的一个很有趣的功能。\n为了便于演示，我们要把之前在 Grit 库中用到过的 ","l":"\n","c":[{"n":"code","x":"repo.rb","l":" 文件添加进来——这是一个大小约为 22K 的源代码文件：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"curl https://raw.githubusercontent.com/mojombo/grit/master/lib/grit/repo.rb > repo.rb\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git checkout master\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git add repo.rb\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git commit -m ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'added repo.rb'","l":"\n[master 484a592] added repo.rb\n 3 files changed, 709 insertions(+), 2 deletions(-)\n delete mode 100644 bak/test.txt\n create mode 100644 repo.rb\n rewrite test.txt (100%)","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"如果你查看生成的树对象，可以看到 ","l":"\n","c":[{"n":"code","x":"repo.rb","l":" 文件对应的数据对象的 SHA-1 值：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -p master^{tree}\n100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt\n100644 blob 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5      repo.rb\n100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txt","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"接下来你可以使用 ","l":"\n","c":[{"n":"code","x":"git cat-file","l":" 命令查看这个对象有多大：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -s 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5\n22044","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"现在，稍微修改这个文件，然后看看会发生什么：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"echo ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'# testing'","l":" >> repo.rb\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","l":"git commit -am ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'modified repo.rb a bit'","l":"\n[master 2431da6] modified repo.rb a bit\n 1 file changed, 1 insertion(+)","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"查看这个最新的提交生成的树对象，你会看到一些有趣的东西：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -p master^{tree}\n100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt\n100644 blob b042a60ef7dff760008df33cee372b945b6e884e      repo.rb\n100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txt","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"repo.rb 对应一个与之前完全不同的数据对象，这意味着，虽然你只是在一个 400 行的文件后面加入一行新内容，Git 也会用一个全新的对象来存储新的文件内容：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -s b042a60ef7dff760008df33cee372b945b6e884e\n22054","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"你的磁盘上现在有两个几乎完全相同、大小均为 22K 的对象（每个都被压缩到大约 7K）。\n如果 Git 只完整保存其中一个，再保存另一个对象与之前版本的差异内容，岂不更好？","l":"\n"},{"n":"p","x":"事实上 Git 可以那样做。\nGit 最初向磁盘中存储对象时所使用的格式被称为“松散（loose）”对象格式。\n但是，Git 会时不时地将多个这些对象打包成一个称为“包文件（packfile）”的二进制文件，以节省空间和提高效率。\n当版本库中有太多的松散对象，或者你手动执行 ","l":"\n","c":[{"n":"code","x":"git gc","l":" 命令，或者你向远程服务器执行推送时，Git 都会这样做。\n要看到打包过程，你可以手动执行 ","a":[["class","literal"]]},{"n":"code","x":"git gc","l":" 命令让 Git 对对象进行打包：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git gc\nCounting objects: 18, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (14/14), done.\nWriting objects: 100% (18/18), done.\nTotal 18 (delta 3), reused 0 (delta 0)","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这个时候再查看 ","l":"\n","c":[{"n":"code","x":"objects","l":" 目录，你会发现大部分的对象都不见了，与此同时出现了一对新文件：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"find .git/objects -type f\n.git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37\n.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4\n.git/objects/info/packs\n.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx\n.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"仍保留着的几个对象是未被任何提交记录引用的数据对象——在此例中是你之前创建的 “what is up, doc?” 和 “test content” 这两个示例数据对象。\n因为你从没将它们添加至任何提交记录中，所以 Git 认为它们是悬空（dangling）的，不会将它们打包进新生成的包文件中。","l":"\n"},{"n":"p","x":"剩下的文件是新创建的包文件和一个索引。\n包文件包含了刚才从文件系统中移除的所有对象的内容。\n索引文件包含了包文件的偏移信息，我们通过索引文件就可以快速定位任意一个指定对象。\n有意思的是运行 ","l":"\n","c":[{"n":"code","x":"gc","l":" 命令前磁盘上的对象大小约为 15K，而这个新生成的包文件大小仅有 7K。\n通过打包对象减少了一半的磁盘占用空间。","a":[["class","literal"]]}]},{"n":"p","x":"Git 是如何做到这点的？\nGit 打包对象时，会查找命名及大小相近的文件，并只保存文件不同版本之间的差异内容。\n你可以查看包文件，观察它是如何节省空间的。\n","l":"\n","c":[{"n":"code","x":"git verify-pack","l":" 这个底层命令可以让你查看已打包的内容：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git verify-pack -v .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx\n2431da676938450a4d72e260db3bf7b0f587bbc1 commit 223 155 12\n69bcdaff5328278ab1c0812ce0e07fa7d26a96d7 commit 214 152 167\n80d02664cb23ed55b226516648c7ad5d0a3deb90 commit 214 145 319\n43168a18b7613d1281e5560855a83eb8fde3d687 commit 213 146 464\n092917823486a802e94d727c820a9024e14a1fc2 commit 214 146 610\n702470739ce72005e2edff522fde85d52a65df9b commit 165 118 756\nd368d0ac0678cbe6cce505be58126d3526706e54 tag    130 122 874\nfe879577cb8cffcdf25441725141e310dd7d239b tree   136 136 996\nd8329fc1cc938780ffdd9f94e0d364e0ea74f579 tree   36 46 1132\ndeef2e1b793907545e50a2ea2ddb5ba6c58c4506 tree   136 136 1178\nd982c7cb2c2a972ee391a85da481fc1f9127a01d tree   6 17 1314 1 \\\n  deef2e1b793907545e50a2ea2ddb5ba6c58c4506\n3c4e9cd789d88d8d89c1073707c3585e41b0e614 tree   8 19 1331 1 \\\n  deef2e1b793907545e50a2ea2ddb5ba6c58c4506\n0155eb4229851634a0f03eb265b69f5a2d56f341 tree   71 76 1350\n83baae61804e65cc73a7201a7252750c76066a30 blob   10 19 1426\nfa49b077972391ad58037050f2a75f74e3671e92 blob   9 18 1445\nb042a60ef7dff760008df33cee372b945b6e884e blob   22054 5799 1463\n033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob   9 20 7262 1 \\\n  b042a60ef7dff760008df33cee372b945b6e884e\n1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob   10 19 7282\nnon delta: 15 objects\nchain length = 1: 3 objects\n.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack: ok","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"此处，","l":"\n","c":[{"n":"code","x":"033b4","l":" 这个数据对象（即 ","a":[["class","literal"]]},{"n":"code","x":"repo.rb","l":" 文件的第一个版本，如果你还记得的话）引用了数据对象 ","a":[["class","literal"]]},{"n":"code","x":"b042a","l":"，即该文件的第二个版本。\n命令输出内容的第三列显示的是各个对象在包文件中的大小，可以看到 ","a":[["class","literal"]]},{"n":"code","x":"b042a","l":" 占用了 22K 空间，而 ","a":[["class","literal"]]},{"n":"code","x":"033b4","l":" 仅占用 9 字节。\n同样有趣的地方在于，第二个版本完整保存了文件内容，而原始的版本反而是以差异方式保存的——这是因为大部分情况下需要快速访问文件的最新版本。","a":[["class","literal"]]}]},{"n":"p","x":"最妙之处是你可以随时重新打包。\nGit 时常会自动对仓库进行重新打包以节省空间。当然你也可以随时手动执行 ","l":"\n","c":[{"n":"code","x":"git gc","l":" 命令来这么做。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","引用规范"]],"c":[{"n":"h2","x":"引用规范","l":"\n","a":[["id","_refspec"]]},{"n":"p","x":"纵观全书，我们已经使用过一些诸如远程分支到本地引用的简单映射方式，但这种映射可以更复杂。\n假设你已经跟着前几节在本地创建了一个小的 Git 仓库，现在想要添加一个远程仓库：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git remote add origin https://github.com/schacon/simplegit-progit","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"运行上述命令会在你仓库中的 ","l":"\n","c":[{"n":"code","x":".git/config","l":" 文件中添加一个小节，\n并在其中指定远程版本库的名称（","a":[["class","literal"]]},{"n":"code","x":"origin","l":"）、URL 和一个用于获取操作的 ","a":[["class","literal"]]},{"n":"strong","x":"引用规范（refspec）","l":"："}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-ini"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"[remote \"origin\"]","l":"\n\turl = ","a":[["style","font-weight: bold"]]},{"n":"span","x":"https://github.com/schacon/simplegit-progit","l":"\n\tfetch = ","a":[["style","font-style: italic"]]},{"n":"span","x":"+refs/heads/*:refs/remotes/origin/*","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"引用规范的格式由一个可选的 ","l":"\n","c":[{"n":"code","x":"+","l":" 号和紧随其后的 ","a":[["class","literal"]]},{"n":"code","x":"<src>:<dst>","l":" 组成，\n其中 ","a":[["class","literal"]]},{"n":"code","x":"<src>","l":" 是一个模式（pattern），代表远程版本库中的引用；\n","a":[["class","literal"]]},{"n":"code","x":"<dst>","l":" 是本地跟踪的远程引用的位置。\n","a":[["class","literal"]]},{"n":"code","x":"+","l":" 号告诉 Git 即使在不能快进的情况下也要（强制）更新引用。","a":[["class","literal"]]}]},{"n":"p","x":"默认情况下，引用规范由 ","l":"\n","c":[{"n":"code","x":"git remote add origin","l":" 命令自动生成，\nGit 获取服务器中 ","a":[["class","literal"]]},{"n":"code","x":"refs/heads/","l":" 下面的所有引用，并将它写入到本地的 ","a":[["class","literal"]]},{"n":"code","x":"refs/remotes/origin/","l":" 中。\n所以，如果服务器上有一个 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支，你可以在本地通过下面任意一种方式来访问该分支上的提交记录：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git log origin/master\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git log remotes/origin/master\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git log refs/remotes/origin/master","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"上面的三个命令作用相同，因为 Git 会把它们都扩展成 ","l":"\n","c":[{"n":"code","x":"refs/remotes/origin/master","l":"。","a":[["class","literal"]]}]},{"n":"p","x":"如果想让 Git 每次只拉取远程的 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支，而不是所有分支，\n可以把（引用规范的）获取那一行修改为只引用该分支：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"fetch = +refs/heads/master:refs/remotes/origin/master"}]}]},{"n":"p","x":"这仅是针对该远程版本库的 ","l":"\n","c":[{"n":"code","x":"git fetch","l":" 操作的默认引用规范。\n如果有某些只希望被执行一次的操作，我们也可以在命令行指定引用规范。\n若要将远程的 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支拉到本地的 ","a":[["class","literal"]]},{"n":"code","x":"origin/mymaster","l":" 分支，可以运行：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git fetch origin master:refs/remotes/origin/mymaster","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"你也可以指定多个引用规范。\n在命令行中，你可以按照如下的方式拉取多个分支：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git fetch origin master:refs/remotes/origin/mymaster ","a":[["style","font-weight: bold"]]},{"n":"span","x":"\\","l":"\n\t topic:refs/remotes/origin/topic\nFrom git@github.com:schacon/simplegit\n ! [rejected]        master     -> origin/mymaster  (non fast forward)\n * [new branch]      topic      -> origin/topic","a":[["style","font-weight: bold; font-style: italic"]]}]}]}]},{"n":"p","x":"在这个例子中，对 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支的拉取操作被拒绝，因为它不是一个可以快进的引用。\n我们可以通过在引用规范之前指定 ","a":[["class","literal"]]},{"n":"code","x":"+","l":" 号来覆盖该规则。","a":[["class","literal"]]}]},{"n":"p","x":"你也可以在配置文件中指定多个用于获取操作的引用规范。\n如果想在每次从 ","l":"\n","c":[{"n":"code","x":"origin","l":" 远程仓库获取时都包括 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"experiment","l":" 分支，添加如下两行：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-ini"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"[remote \"origin\"]","l":"\n\turl = ","a":[["style","font-weight: bold"]]},{"n":"span","x":"https://github.com/schacon/simplegit-progit","l":"\n\tfetch = ","a":[["style","font-style: italic"]]},{"n":"span","x":"+refs/heads/master:refs/remotes/origin/master","l":"\n\tfetch = ","a":[["style","font-style: italic"]]},{"n":"span","x":"+refs/heads/experiment:refs/remotes/origin/experiment","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"我们不能在模式中使用部分通配符，所以像下面这样的引用规范是不合法的：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-ini"]],"c":[{"n":"code","c":[{"n":"span","l":"fetch = "},{"n":"span","x":"+refs/heads/qa*:refs/remotes/origin/qa*","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"但我们可以使用命名空间（或目录）来达到类似目的。\n假设你有一个 QA 团队，他们推送了一系列分支，同时你只想要获取 ","l":"\n","c":[{"n":"code","x":"master","l":" 和\nQA 团队的所有分支而不关心其他任何分支，那么可以使用如下配置：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-ini"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"[remote \"origin\"]","l":"\n\turl = ","a":[["style","font-weight: bold"]]},{"n":"span","x":"https://github.com/schacon/simplegit-progit","l":"\n\tfetch = ","a":[["style","font-style: italic"]]},{"n":"span","x":"+refs/heads/master:refs/remotes/origin/master","l":"\n\tfetch = ","a":[["style","font-style: italic"]]},{"n":"span","x":"+refs/heads/qa/*:refs/remotes/origin/qa/*","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"如果项目的工作流很复杂，有 QA 团队推送分支、开发人员推送分支、集成团队推送并且在远程分支上展开协作，你就可以像这样（在本地）为这些分支创建各自的命名空间，非常方便。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","引用规范推送"]],"c":[{"n":"h3","x":"引用规范推送","l":"\n","a":[["id","_pushing_refspecs"]]},{"n":"p","x":"像上面这样从远程版本库获取已在命名空间中的引用当然很棒，但 QA 团队最初应该如何将他们的分支放入远程的 ","l":"\n","c":[{"n":"code","x":"qa/","l":" 命名空间呢？\n我们可以通过引用规范推送来完成这个任务。","a":[["class","literal"]]}]},{"n":"p","x":"如果 QA 团队想把他们的 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支推送到远程服务器的 ","a":[["class","literal"]]},{"n":"code","x":"qa/master","l":" 分支上，可以运行：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git push origin master:refs/heads/qa/master","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果他们希望 Git 每次运行 ","l":"\n","c":[{"n":"code","x":"git push origin","l":" 时都像上面这样推送，可以在他们的配置文件中添加一条 ","a":[["class","literal"]]},{"n":"code","x":"push","l":" 值：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-ini"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"[remote \"origin\"]","l":"\n\turl = ","a":[["style","font-weight: bold"]]},{"n":"span","x":"https://github.com/schacon/simplegit-progit","l":"\n\tfetch = ","a":[["style","font-style: italic"]]},{"n":"span","x":"+refs/heads/*:refs/remotes/origin/*","l":"\n\tpush = ","a":[["style","font-style: italic"]]},{"n":"span","x":"refs/heads/master:refs/heads/qa/master","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"正如刚才所指出的，这会让 ","l":"\n","c":[{"n":"code","x":"git push origin","l":" 默认把本地 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支推送到远程 ","a":[["class","literal"]]},{"n":"code","x":"qa/master","l":" 分支。","a":[["class","literal"]]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note"],["type","note",2]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"你无法通过引用规范从一个仓库获取并推送到另一个仓库。\n这样做的示例见 ","l":"\n","c":[{"n":"a","x":"让你的 GitHub 公共仓库保持更新","l":"。","a":[["id","xref--ch06-github--_fetch_and_push_on_different_repositories"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch06-github.xhtml\", \"frag\": \"_fetch_and_push_on_different_repositories\"}"]]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","删除引用"]],"c":[{"n":"h3","x":"删除引用","l":"\n","a":[["id","_删除引用"]]},{"n":"p","x":"你还可以借助类似下面的命令通过引用规范从远程服务器上删除引用：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git push origin :topic","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"因为引用规范（的格式）是 ","l":"\n","c":[{"n":"code","x":"<src>:<dst>","l":"，所以上述命令把 ","a":[["class","literal"]]},{"n":"code","x":"<src>","l":" 留空，意味着把远程版本库的 ","a":[["class","literal"]]},{"n":"code","x":"topic","l":" 分支定义为空值，也就是删除它。","a":[["class","literal"]]}]},{"n":"p","x":"或者你可以使用更新的语法（自 Git v1.7.0 以后可用）：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git push origin --delete topic","a":[["style","font-weight: bold"]]}]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","传输协议"]],"c":[{"n":"h2","x":"传输协议","l":"\n","a":[["id","_传输协议"]]},{"n":"p","x":"Git 可以通过两种主要的方式在版本库之间传输数据：“哑（dumb）”协议和“智能（smart）”协议。\n本节将会带你快速浏览这两种协议的运作方式。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","哑协议"]],"c":[{"n":"h3","x":"哑协议","l":"\n","a":[["id","_哑协议"]]},{"n":"p","x":"如果你正在架设一个基于 HTTP 协议的只读版本库，一般而言这种情况下使用的就是哑协议。\n这个协议之所以被称为“哑”协议，是因为在传输过程中，服务端不需要有针对 Git 特有的代码；抓取过程是一系列 HTTP 的 ","l":"\n","c":[{"n":"code","x":"GET","l":" 请求，这种情况下，客户端可以推断出服务端 Git 仓库的布局。","a":[["class","literal"]]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note"],["type","note",2]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"现在已经很少使用哑协议了。\n使用哑协议的版本库很难保证安全性和私有化，所以大多数 Git 服务器宿主（包括云端和本地）都会拒绝使用它。\n一般情况下都建议使用智能协议，我们会在后面进行介绍。","l":"\n"}]}]},{"n":"p","x":"让我们通过 simplegit 版本库来看看 ","l":"\n","c":[{"n":"code","x":"http-fetch","l":" 的过程：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git clone http://server/simplegit-progit.git","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"它做的第一件事就是拉取 ","l":"\n","c":[{"n":"code","x":"info/refs","l":" 文件。\n这个文件是通过 ","a":[["class","literal"]]},{"n":"code","x":"update-server-info","l":" 命令生成的，这也解释了在使用 HTTP 传输时，必须把它设置为 ","a":[["class","literal"]]},{"n":"code","x":"post-receive","l":" 钩子的原因：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"=> GET info/refs\nca82a6dff817ec66f44342007202690a93763949     refs/heads/master"}]}]},{"n":"p","x":"现在，你得到了一个远程引用和 SHA-1 值的列表。\n接下来，你要确定 HEAD 引用是什么，这样你就知道在完成后应该被检出到工作目录的内容：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"=> GET HEAD\nref: refs/heads/master"}]}]},{"n":"p","x":"这说明在完成抓取后，你需要检出 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支。\n这时，你就可以开始遍历处理了。\n因为你是从 ","a":[["class","literal"]]},{"n":"code","x":"info/refs","l":" 文件中所提到的 ","a":[["class","literal"]]},{"n":"code","x":"ca82a6","l":" 提交对象开始的，所以你的首要操作是获取它：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"=> GET objects/ca/82a6dff817ec66f44342007202690a93763949\n(179 bytes of binary data)"}]}]},{"n":"p","x":"你取回了一个对象——这是一个在服务端以松散格式保存的对象，是你通过使用静态 HTTP GET 请求获取的。\n你可以使用 zlib 解压缩它，去除其头部，查看提交记录的内容：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git cat-file -p ca82a6dff817ec66f44342007202690a93763949\ntree cfda3bf379e4f8dba8717dee55aab78aef7f4daf\nparent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nauthor Scott Chacon <schacon@gmail.com> 1205815931 -0700\ncommitter Scott Chacon <schacon@gmail.com> 1240030591 -0700\n\nchanged the version number","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"接下来，你还要再获取两个对象，一个是树对象 ","l":"\n","c":[{"n":"code","x":"cfda3b","l":"，它包含有我们刚刚获取的提交对象所指向的内容，另一个是它的父提交 ","a":[["class","literal"]]},{"n":"code","x":"085bb3","l":"：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"=> GET objects/08/5bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\n(179 bytes of data)"}]}]},{"n":"p","x":"这样就取得了你的下一个提交对象。\n再抓取树对象：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"=> GET objects/cf/da3bf379e4f8dba8717dee55aab78aef7f4daf\n(404 - Not Found)"}]}]},{"n":"p","x":"噢——看起来这个树对象在服务端并不以松散格式对象存在，所以你得到了一个 404 响应，代表在 HTTP 服务端没有找到该对象。\n这有好几个可能的原因——这个对象可能在替代版本库里面，或者在包文件里面。\nGit 会首先检查所有列出的替代版本库：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"=> GET objects/info/http-alternates\n(empty file)"}]}]},{"n":"p","x":"如果这返回了一个包含替代版本库 URL 的列表，那么 Git 就会去那些地址检查松散格式对象和文件——这是一种能让派生项目共享对象以节省磁盘的好方法。\n然而，在这个例子中，没有列出可用的替代版本库。所以你所需要的对象肯定在某个包文件中。\n要检查服务端有哪些可用的包文件，你需要获取 ","l":"\n","c":[{"n":"code","x":"objects/info/packs","l":" 文件，这里面有一个包文件列表（它也是通过执行 ","a":[["class","literal"]]},{"n":"code","x":"update-server-info","l":" 所生成的）：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"=> GET objects/info/packs\nP pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack"}]}]},{"n":"p","x":"服务端只有一个包文件，所以你要的对象显然就在里面。但是你要先检查它的索引文件以确认。\n即使服务端有多个包文件，这也是很有用的，因为这样你就可以知道你所需要的对象是在哪一个包文件里面：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"=> GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.idx\n(4k of binary data)"}]}]},{"n":"p","x":"现在你有这个包文件的索引，你可以查看你要的对象是否在里面——\n因为索引文件列出了这个包文件所包含的所有对象的 SHA-1 值，和该对象存在于包文件中的偏移量。\n你的对象就在这里，接下来就是获取整个包文件：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"=> GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack\n(13k of binary data)"}]}]},{"n":"p","x":"现在你也有了你的树对象，你可以继续在提交记录上漫游。\n它们全部都在这个你刚下载的包文件里面，所以你不用继续向服务端请求更多下载了。\nGit 会将开始时下载的 HEAD 引用所指向的 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支检出到工作目录。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","智能协议"]],"c":[{"n":"h3","x":"智能协议","l":"\n","a":[["id","_智能协议"]]},{"n":"p","x":"哑协议虽然很简单但效率略低，且它不能从客户端向服务端发送数据。\n智能协议是更常用的传送数据的方法，但它需要在服务端运行一个进程，而这也是 Git 的智能之处——它可以读取本地数据，理解客户端有什么和需要什么，并为它生成合适的包文件。\n总共有两组进程用于传输数据，它们分别负责上传和下载数据。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","上传数据"]],"c":[{"n":"h4","x":"上传数据","l":"\n","a":[["id","_上传数据"]]},{"n":"p","x":"\n为了上传数据至远端，Git 使用 ","l":"\n","c":[{"n":"code","x":"send-pack","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"receive-pack","l":" 进程。\n运行在客户端上的 ","a":[["class","literal"]]},{"n":"code","x":"send-pack","l":" 进程连接到远端运行的 ","a":[["class","literal"]]},{"n":"code","x":"receive-pack","l":" 进程。","a":[["class","literal"]]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect4"],["title","SSH"]],"c":[{"n":"h5","x":"SSH","l":"\n","a":[["id","_ssh"]]},{"n":"p","x":"举例来说，在项目中使用命令 ","l":"\n","c":[{"n":"code","x":"git push origin master","l":" 时, ","a":[["class","literal"]]},{"n":"code","x":"origin","l":" 是由基于 SSH 协议的 URL 所定义的。\nGit 会运行 ","a":[["class","literal"]]},{"n":"code","x":"send-pack","l":" 进程，它会通过 SSH 连接你的服务器。\n它会尝试通过 SSH 在服务端执行命令，就像这样：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"ssh -x git@server ","a":[["style","font-weight: bold"]]},{"n":"span","x":"\"git-receive-pack 'simplegit-progit.git'\"","l":"\n00a5ca82a6dff817ec66f4437202690a93763949 refs/heads/master report-status \\\n\tdelete-refs side-band-64k quiet ofs-delta \\\n\tagent=git/2:2.1.1+github-607-gfba4028 delete-refs\n0000","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","l":"\n","c":[{"n":"code","x":"git-receive-pack","l":" 命令会立即为它所拥有的每一个引用发送一行响应——在这个例子中，就只有 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支和它的 SHA-1 值。\n第一行响应中也包含了一个服务端能力的列表（这里是 ","a":[["class","literal"]]},{"n":"code","x":"report-status","l":"、","a":[["class","literal"]]},{"n":"code","x":"delete-refs","l":" 和一些其它的，包括客户端的识别码）。","a":[["class","literal"]]}]},{"n":"p","x":"每一行以一个四位的十六进制值开始，用于指明本行的长度。\n你看到第一行以 00a5 开始，这在十六进制中表示 165，意味着第一行有 165 字节。\n下一行是 0000，表示服务端已完成了发送引用列表过程。","l":"\n"},{"n":"p","x":"现在它知道了服务端的状态，你的 ","l":"\n","c":[{"n":"code","x":"send-pack","l":" 进程会判断哪些提交记录是它所拥有但服务端没有的。\n","a":[["class","literal"]]},{"n":"code","x":"send-pack","l":" 会告知 ","a":[["class","literal"]]},{"n":"code","x":"receive-pack","l":" 这次推送将会更新的各个引用。\n举个例子，如果你正在更新 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支，并且增加 ","a":[["class","literal"]]},{"n":"code","x":"experiment","l":" 分支，这个 ","a":[["class","literal"]]},{"n":"code","x":"send-pack","l":" 的响应将会是像这样：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"0076ca82a6dff817ec66f44342007202690a93763949 15027957951b64cf874c3557a0f3547bd83b3ff6 \\\n\trefs/heads/master report-status\n006c0000000000000000000000000000000000000000 cdfdb42577e2506715f8cfeacdbabc092bf63e8d \\\n\trefs/heads/experiment\n0000"}]}]},{"n":"p","x":"第一行也包括了客户端的能力。\n这里的全为 ","l":"\n","c":[{"n":"em","x":"0","l":" 的 SHA-1 值表示之前没有过这个引用——因为你正要添加新的 experiment 引用。\n删除引用时，将会看到相反的情况：右边的 SHA-1 值全为 "},{"n":"em","x":"0","l":"。"}]},{"n":"p","x":"然后，客户端会发送一个包含了所有服务端上所没有的对象的包文件。\n最终，服务端会响应一个成功（或失败）的标识。","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"000eunpack ok"}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect4"],["title","HTTP(S)"]],"c":[{"n":"h5","x":"HTTP(S)","l":"\n","a":[["id","_http_s"]]},{"n":"p","x":"上传过程在 HTTP 上几乎是相同的，除了握手阶段有一点小区别。\n连接是从下面这个请求开始的：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"=> GET http://server/simplegit-progit.git/info/refs?service=git-receive-pack\n001f# service=git-receive-pack\n00ab6c5f0e45abd7832bf23074a333f739977c9e8188 refs/heads/master report-status \\\n\tdelete-refs side-band-64k quiet ofs-delta \\\n\tagent=git/2:2.1.1~vmg-bitmaps-bugaloo-608-g116744e\n0000"}]}]},{"n":"p","x":"这完成了客户端和服务端的第一次数据交换。\n接下来客户端发起另一个请求，这次是一个 ","l":"\n","c":[{"n":"code","x":"POST","l":" 请求，这个请求中包含了 ","a":[["class","literal"]]},{"n":"code","x":"send-pack","l":" 提供的数据。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"=> POST http://server/simplegit-progit.git/git-receive-pack"}]}]},{"n":"p","x":"这个 ","l":"\n","c":[{"n":"code","x":"POST","l":" 请求的内容是 ","a":[["class","literal"]]},{"n":"code","x":"send-pack","l":" 的输出和相应的包文件。\n服务端在收到请求后相应地作出成功或失败的 HTTP 响应。","a":[["class","literal"]]}]},{"n":"p","x":"请牢记，HTTP 协议有可能会进一步用分块传输编码将数据包裹起来。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","下载数据"]],"c":[{"n":"h4","x":"下载数据","l":"\n","a":[["id","_下载数据"]]},{"n":"p","x":"\n当你在下载数据时， ","l":"\n","c":[{"n":"code","x":"fetch-pack","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"upload-pack","l":" 进程就起作用了。\n客户端启动 ","a":[["class","literal"]]},{"n":"code","x":"fetch-pack","l":" 进程，连接至远端的 ","a":[["class","literal"]]},{"n":"code","x":"upload-pack","l":" 进程，以协商后续传输的数据。","a":[["class","literal"]]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect4"],["title","SSH"]],"c":[{"n":"h5","x":"SSH","l":"\n","a":[["id","_ssh_2"]]},{"n":"p","x":"如果你通过 SSH 使用抓取功能，","l":"\n","c":[{"n":"code","x":"fetch-pack","l":" 会像这样运行：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"ssh -x git@server ","a":[["style","font-weight: bold"]]},{"n":"span","x":"\"git-upload-pack 'simplegit-progit.git'\"","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"code","x":"fetch-pack","l":" 连接后，","a":[["class","literal"]]},{"n":"code","x":"upload-pack","l":" 会返回类似下面的内容：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"00dfca82a6dff817ec66f44342007202690a93763949 HEAD multi_ack thin-pack \\\n\tside-band side-band-64k ofs-delta shallow no-progress include-tag \\\n\tmulti_ack_detailed symref=HEAD:refs/heads/master \\\n\tagent=git/2:2.1.1+github-607-gfba4028\n003fe2409a098dc3e53539a9028a94b6224db9d6a6b6 refs/heads/master\n0000"}]}]},{"n":"p","x":"这与 ","l":"\n","c":[{"n":"code","x":"receive-pack","l":" 的响应很相似，但是这里所包含的能力是不同的。\n而且它还包含 HEAD 引用所指向内容（","a":[["class","literal"]]},{"n":"code","x":"symref=HEAD:refs/heads/master","l":"），这样如果客户端执行的是克隆，它就会知道要检出什么。","a":[["class","literal"]]}]},{"n":"p","x":"这时候，","l":"\n","c":[{"n":"code","x":"fetch-pack","l":" 进程查看它自己所拥有的对象，并响应 “want” 和它需要的对象的 SHA-1 值。\n它还会发送“have”和所有它已拥有的对象的 SHA-1 值。\n在列表的最后，它还会发送“done”以通知 ","a":[["class","literal"]]},{"n":"code","x":"upload-pack","l":" 进程可以开始发送它所需对象的包文件：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"003cwant ca82a6dff817ec66f44342007202690a93763949 ofs-delta\n0032have 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\n0009done\n0000"}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect4"],["title","HTTP(S)"]],"c":[{"n":"h5","x":"HTTP(S)","l":"\n","a":[["id","_http_s_2"]]},{"n":"p","x":"抓取操作的握手需要两个 HTTP 请求。\n第一个是向和哑协议中相同的端点发送 ","l":"\n","c":[{"n":"code","x":"GET","l":" 请求：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"=> GET $GIT_URL/info/refs?service=git-upload-pack\n001e# service=git-upload-pack\n00e7ca82a6dff817ec66f44342007202690a93763949 HEAD multi_ack thin-pack \\\n\tside-band side-band-64k ofs-delta shallow no-progress include-tag \\\n\tmulti_ack_detailed no-done symref=HEAD:refs/heads/master \\\n\tagent=git/2:2.1.1+github-607-gfba4028\n003fca82a6dff817ec66f44342007202690a93763949 refs/heads/master\n0000"}]}]},{"n":"p","x":"这和通过 SSH 使用 ","l":"\n","c":[{"n":"code","x":"git-upload-pack","l":" 是非常相似的，但是第二个数据交换则是一个单独的请求：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-"]],"c":[{"n":"code","x":"=> POST $GIT_URL/git-upload-pack HTTP/1.0\n0032want 0a53e9ddeaddad63ad106860237bbf53411d11a7\n0032have 441b40d833fdfa93eb2908e52742248faf0ee993\n0000"}]}]},{"n":"p","x":"这个输出格式还是和前面一样的。\n这个请求的响应包含了所需要的包文件，并指明成功或失败。","l":"\n"}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","协议总结"]],"c":[{"n":"h3","x":"协议总结","l":"\n","a":[["id","_协议总结"]]},{"n":"p","x":"这一章节是传输协议的一个概貌。\n传输协议还有很多其它的特性，像是 ","l":"\n","c":[{"n":"code","x":"multi_ack","l":" 或 ","a":[["class","literal"]]},{"n":"code","x":"side-band","l":"，但是这些内容已经超出了本书的范围。\n我们希望能给你展示客户端和服务端之间的基本交互过程；如果你需要更多的相关知识，你可以参阅 Git 的源代码。","a":[["class","literal"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","维护与数据恢复"]],"c":[{"n":"h2","x":"维护与数据恢复","l":"\n","a":[["id","_维护与数据恢复"]]},{"n":"p","x":"有的时候，你需要对仓库进行清理——使它的结构变得更紧凑，或是对导入的仓库进行清理，或是恢复丢失的内容。\n这个小节将会介绍这些情况中的一部分。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","维护"]],"c":[{"n":"h3","x":"维护","l":"\n","a":[["id","_git_gc"]]},{"n":"p","x":"Git 会不定时地自动运行一个叫做 “auto gc” 的命令。\n大多数时候，这个命令并不会产生效果。\n然而，如果有太多松散对象（不在包文件中的对象）或者太多包文件，Git 会运行一个完整的 ","l":"\n","c":[{"n":"code","x":"git gc","l":" 命令。\n“gc” 代表垃圾回收，这个命令会做以下事情：收集所有松散对象并将它们放置到包文件中，\n将多个包文件合并为一个大的包文件，移除与任何提交都不相关的陈旧对象。","a":[["class","literal"]]}]},{"n":"p","x":"可以像下面一样手动执行自动垃圾回收：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git gc --auto","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"就像上面提到的，这个命令通常并不会产生效果。\n大约需要 7000 个以上的松散对象或超过 50 个的包文件才能让 Git 启动一次真正的 gc 命令。\n你可以通过修改 ","l":"\n","c":[{"n":"code","x":"gc.auto","l":" 与 ","a":[["class","literal"]]},{"n":"code","x":"gc.autopacklimit","l":" 的设置来改动这些数值。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"code","x":"gc","l":" 将会做的另一件事是打包你的引用到一个单独的文件。\n假设你的仓库包含以下分支与标签：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"find .git/refs -type f\n.git/refs/heads/experiment\n.git/refs/heads/master\n.git/refs/tags/v1.0\n.git/refs/tags/v1.1","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果你执行了 ","l":"\n","c":[{"n":"code","x":"git gc","l":" 命令，","a":[["class","literal"]]},{"n":"code","x":"refs","l":" 目录中将不会再有这些文件。\n为了保证效率 Git 会将它们移动到名为 ","a":[["class","literal"]]},{"n":"code","x":".git/packed-refs","l":" 的文件中，就像这样：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cat .git/packed-refs\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"# ","l":"pack-refs with: peeled fully-peeled\ncac0cab538b970a37ea1e769cbbde608743bc96d refs/heads/experiment\nab1afef80fac8e34258ff41fc1b867c702daa24b refs/heads/master\ncac0cab538b970a37ea1e769cbbde608743bc96d refs/tags/v1.0\n9585191f37f7b0fb9444f35a9bf50de191beadc2 refs/tags/v1.1\n^1a410efbd13591db07496601ebc7a059dd55cfe9","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果你更新了引用，Git 并不会修改这个文件，而是向 ","l":"\n","c":[{"n":"code","x":"refs/heads","l":" 创建一个新的文件。\n为了获得指定引用的正确 SHA-1 值，Git 会首先在 ","a":[["class","literal"]]},{"n":"code","x":"refs","l":" 目录中查找指定的引用，然后再到 ","a":[["class","literal"]]},{"n":"code","x":"packed-refs","l":" 文件中查找。\n所以，如果你在 ","a":[["class","literal"]]},{"n":"code","x":"refs","l":" 目录中找不到一个引用，那么它或许在 ","a":[["class","literal"]]},{"n":"code","x":"packed-refs","l":" 文件中。","a":[["class","literal"]]}]},{"n":"p","x":"注意这个文件的最后一行，它会以 ","l":"\n","c":[{"n":"code","x":"^","l":" 开头。\n这个符号表示它上一行的标签是附注标签，","a":[["class","literal"]]},{"n":"code","x":"^","l":" 所在的那一行是附注标签指向的那个提交。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","数据恢复"]],"c":[{"n":"h3","x":"数据恢复","l":"\n","a":[["id","_data_recovery"]]},{"n":"p","x":"在你使用 Git 的时候，你可能会意外丢失一次提交。\n通常这是因为你强制删除了正在工作的分支，但是最后却发现你还需要这个分支，\n亦或者硬重置了一个分支，放弃了你想要的提交。\n如果这些事情已经发生，该如何找回你的提交呢？","l":"\n"},{"n":"p","x":"下面的例子将硬重置你的测试仓库中的 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支到一个旧的提交，以此来恢复丢失的提交。\n首先，让我们看看你的仓库现在在什么地方：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git log --pretty=oneline\nab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit\n484a59275031909e19aadb7c92262719cfcdf19a added repo.rb\n1a410efbd13591db07496601ebc7a059dd55cfe9 third commit\ncac0cab538b970a37ea1e769cbbde608743bc96d second commit\nfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"现在，我们将 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支硬重置到第三次提交：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git reset --hard 1a410efbd13591db07496601ebc7a059dd55cfe9\nHEAD is now at 1a410ef third commit\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git log --pretty=oneline\n1a410efbd13591db07496601ebc7a059dd55cfe9 third commit\ncac0cab538b970a37ea1e769cbbde608743bc96d second commit\nfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"现在顶部的两个提交已经丢失了——没有分支指向这些提交。\n你需要找出最后一次提交的 SHA-1 然后增加一个指向它的分支。\n窍门就是找到最后一次的提交的 SHA-1 ——但是估计你记不起来了，对吗？","l":"\n"},{"n":"p","x":"最方便，也是最常用的方法，是使用一个名叫 ","l":"\n","c":[{"n":"code","x":"git reflog","l":" 的工具。\n当你正在工作时，Git 会默默地记录每一次你改变 HEAD 时它的值。\n每一次你提交或改变分支，引用日志都会被更新。\n引用日志（reflog）也可以通过 ","a":[["class","literal"]]},{"n":"code","x":"git update-ref","l":" 命令更新，我们在\n","a":[["class","literal"]]},{"n":"a","x":"Git 引用","l":" 有提到使用这个命令而不是是直接将 SHA-1 的值写入引用文件中的原因。\n你可以在任何时候通过执行 ","a":[["id","xref-_git_refs"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"_git_refs\"}"]]},{"n":"code","x":"git reflog","l":" 命令来了解你曾经做过什么：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git reflog\n1a410ef HEAD@{0}: reset: moving to 1a410ef\nab1afef HEAD@{1}: commit: modified repo.rb a bit\n484a592 HEAD@{2}: commit: added repo.rb","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这里可以看到我们已经检出的两次提交，然而并没有足够多的信息。\n为了使显示的信息更加有用，我们可以执行 ","l":"\n","c":[{"n":"code","x":"git log -g","l":"，这个命令会以标准日志的格式输出引用日志。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git log -g\ncommit 1a410efbd13591db07496601ebc7a059dd55cfe9\nReflog: HEAD@{0} (Scott Chacon <schacon@gmail.com>)\nReflog message: updating HEAD\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri May 22 18:22:37 2009 -0700\n\n\t\tthird commit\n\ncommit ab1afef80fac8e34258ff41fc1b867c702daa24b\nReflog: HEAD@{1} (Scott Chacon <schacon@gmail.com>)\nReflog message: updating HEAD\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri May 22 18:15:24 2009 -0700\n\n       modified repo.rb a bit","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"看起来下面的那个就是你丢失的提交，你可以通过创建一个新的分支指向这个提交来恢复它。\n例如，你可以创建一个名为 ","l":"\n","c":[{"n":"code","x":"recover-branch","l":" 的分支指向这个提交（ab1afef）：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch recover-branch ab1afef\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git log --pretty=oneline recover-branch\nab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit\n484a59275031909e19aadb7c92262719cfcdf19a added repo.rb\n1a410efbd13591db07496601ebc7a059dd55cfe9 third commit\ncac0cab538b970a37ea1e769cbbde608743bc96d second commit\nfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"不错，现在有一个名为 ","l":"\n","c":[{"n":"code","x":"recover-branch","l":" 的分支是你的 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支曾经指向的地方，\n再一次使得前两次提交可到达了。接下来，假设你丢失的提交因为某些原因不在引用日志中，\n那么我们可以通过移除 ","a":[["class","literal"]]},{"n":"code","x":"recover-branch","l":" 分支并删除引用日志来模拟这种情况。\n现在前两次提交又不被任何分支指向了：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch -D recover-branch\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"rm -Rf .git/logs/","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"由于引用日志数据存放在 ","l":"\n","c":[{"n":"code","x":".git/logs/","l":" 目录中，现在你已经没有引用日志了。\n这时该如何恢复那次提交？\n一种方式是使用 ","a":[["class","literal"]]},{"n":"code","x":"git fsck","l":" 实用工具，将会检查数据库的完整性。\n如果使用一个 ","a":[["class","literal"]]},{"n":"code","x":"--full","l":" 选项运行它，它会向你显示出所有没有被其他对象指向的对象：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git fsck --full\nChecking object directories: 100% (256/256), done.\nChecking objects: 100% (18/18), done.\ndangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4\ndangling commit ab1afef80fac8e34258ff41fc1b867c702daa24b\ndangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9\ndangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"在这个例子中，你可以在 “dangling commit” 后看到你丢失的提交。\n现在你可以用和之前相同的方法恢复这个提交，也就是添加一个指向这个提交的分支。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","移除对象"]],"c":[{"n":"h3","x":"移除对象","l":"\n","a":[["id","_removing_objects"]]},{"n":"p","x":"Git 有很多很棒的功能，但是其中一个特性会导致问题，","l":"\n","c":[{"n":"code","x":"git clone","l":" 会下载整个项目的历史，包括每一个文件的每一个版本。\n如果所有的东西都是源代码那么这很好，因为 Git 被高度优化来有效地存储这种数据。\n然而，如果某个人在之前向项目添加了一个大小特别大的文件，即使你将这个文件从项目中移除了，每次克隆还是都要强制的下载这个大文件。\n之所以会产生这个问题，是因为这个文件在历史中是存在的，它会永远在那里。","a":[["class","literal"]]}]},{"n":"p","x":"当你迁移 Subversion 或 Perforce 仓库到 Git 的时候，这会是一个严重的问题。\n因为这些版本控制系统并不下载所有的历史文件，所以这种文件所带来的问题比较少。\n如果你从其他的版本控制系统迁移到 Git 时发现仓库比预期的大得多，那么你就需要找到并移除这些大文件。","l":"\n"},{"n":"p","l":"\n","c":[{"n":"strong","x":"警告：这个操作对提交历史的修改是破坏性的。","l":"\n它会从你必须修改或移除一个大文件引用最早的树对象开始重写每一次提交。\n如果你在导入仓库后，在任何人开始基于这些提交工作前执行这个操作，那么将不会有任何问题——否则，\n你必须通知所有的贡献者他们需要将他们的成果变基到你的新提交上。"}]},{"n":"p","x":"为了演示，我们将添加一个大文件到测试仓库中，并在下一次提交中删除它，现在我们需要找到它，并将它从仓库中永久删除。\n首先，添加一个大文件到仓库中：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"curl https://www.kernel.org/pub/software/scm/git/git-2.1.0.tar.gz > git.tgz\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git add git.tgz\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git commit -m ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'add git tarball'","l":"\n[master 7b30847] add git tarball\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 git.tgz","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"哎呀——其实这个项目并不需要这个巨大的压缩文件。\n现在我们将它移除：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git rm git.tgz\nrm 'git.tgz'\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git commit -m ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'oops - removed large tarball'","l":"\n[master dadf725] oops - removed large tarball\n 1 file changed, 0 insertions(+), 0 deletions(-)\n delete mode 100644 git.tgz","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"现在，我们执行 ","l":"\n","c":[{"n":"code","x":"gc","l":" 来查看数据库占用了多少空间：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git gc\nCounting objects: 17, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (13/13), done.\nWriting objects: 100% (17/17), done.\nTotal 17 (delta 1), reused 10 (delta 0)","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"你也可以执行 ","l":"\n","c":[{"n":"code","x":"count-objects","l":" 命令来快速的查看占用空间大小：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git count-objects -v\ncount: 7\nsize: 32\nin-pack: 17\npacks: 1\nsize-pack: 4868\nprune-packable: 0\ngarbage: 0\nsize-garbage: 0","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","l":"\n","c":[{"n":"code","x":"size-pack","l":" 的数值指的是你的包文件以 KB 为单位计算的大小，所以你大约占用了 5MB 的空间。\n在最后一次提交前，使用了不到 2KB ——显然，从之前的提交中移除文件并不能从历史中移除它。\n每一次有人克隆这个仓库时，他们将必须克隆所有的 5MB 来获得这个微型项目，只因为你意外地添加了一个大文件。\n现在来让我们彻底的移除这个文件。","a":[["class","literal"]]}]},{"n":"p","x":"首先你必须找到它。\n在本例中，你已经知道是哪个文件了。\n但是假设你不知道；该如何找出哪个文件或哪些文件占用了如此多的空间？\n如果你执行 ","l":"\n","c":[{"n":"code","x":"git gc","l":" 命令，所有的对象将被放入一个包文件中，你可以通过运行 ","a":[["class","literal"]]},{"n":"code","x":"git verify-pack","l":" 命令，\n然后对输出内容的第三列（即文件大小）进行排序，从而找出这个大文件。\n你也可以将这个命令的执行结果通过管道传送给 ","a":[["class","literal"]]},{"n":"code","x":"tail","l":" 命令，因为你只需要找到列在最后的几个大对象。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git verify-pack -v .git/objects/pack/pack-29…69.idx ","a":[["style","font-weight: bold"]]},{"n":"span","x":"\\","l":"\n  | sort -k 3 -n \\\n  | tail -3\ndadf7258d699da2c8d89b09ef6670edb7d5f91b4 commit 229 159 12\n033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob   22044 5792 4977696\n82c99a3e86bb1267b236a4b6eff7868d97489af1 blob   4975916 4976258 1438","a":[["style","font-weight: bold; font-style: italic"]]}]}]}]},{"n":"p","x":"你可以看到这个大对象出现在返回结果的最底部：占用 5MB 空间。\n为了找出具体是哪个文件，可以使用 ","l":"\n","c":[{"n":"code","x":"rev-list","l":" 命令，我们在 ","a":[["class","literal"]]},{"n":"a","x":"指定特殊的提交信息格式","l":" 中曾提到过。\n如果你传递 ","a":[["id","xref--ch08-customizing-git--_enforcing_commit_message_format"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch08-customizing-git.xhtml\", \"frag\": \"_enforcing_commit_message_format\"}"]]},{"n":"code","x":"--objects","l":" 参数给 ","a":[["class","literal"]]},{"n":"code","x":"rev-list","l":" 命令，它就会列出所有提交的 SHA-1、数据对象的 SHA-1 和与它们相关联的文件路径。\n可以使用以下命令来找出你的数据对象的名字：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git rev-list --objects --all | grep 82c99a3\n82c99a3e86bb1267b236a4b6eff7868d97489af1 git.tgz","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"现在，你只需要从过去所有的树中移除这个文件。\n使用以下命令可以轻松地查看哪些提交对这个文件产生改动：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git log --oneline --branches -- git.tgz\ndadf725 oops - removed large tarball\n7b30847 add git tarball","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"现在，你必须重写 ","l":"\n","c":[{"n":"code","x":"7b30847","l":" 提交之后的所有提交来从 Git 历史中完全移除这个文件。\n为了执行这个操作，我们要使用 ","a":[["class","literal"]]},{"n":"code","x":"filter-branch","l":" 命令，这个命令在 ","a":[["class","literal"]]},{"n":"a","x":"重写历史","l":" 中也使用过：","a":[["id","xref--ch07-git-tools--_rewriting_history"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_rewriting_history\"}"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git filter-branch --index-filter ","a":[["style","font-weight: bold"]]},{"n":"span","x":"\\","l":"\n  'git rm --ignore-unmatch --cached git.tgz' -- 7b30847^..\nRewrite 7b30847d080183a1ab7d18fb202473b3096e9f34 (1/2)rm 'git.tgz'\nRewrite dadf7258d699da2c8d89b09ef6670edb7d5f91b4 (2/2)\nRef 'refs/heads/master' was rewritten","a":[["style","font-weight: bold; font-style: italic"]]}]}]}]},{"n":"p","l":"\n","c":[{"n":"code","x":"--index-filter","l":" 选项类似于在 ","a":[["class","literal"]]},{"n":"a","x":"重写历史","l":" 中提到的的 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_rewriting_history\"}"]]},{"n":"code","x":"--tree-filter","l":" 选项，\n不过这个选项并不会让命令将修改在硬盘上检出的文件，而只是修改在暂存区或索引中的文件。","a":[["class","literal"]]}]},{"n":"p","x":"你必须使用 ","l":"\n","c":[{"n":"code","x":"git rm --cached","l":" 命令来移除文件，而不是通过类似 ","a":[["class","literal"]]},{"n":"code","x":"rm file","l":" 的命令——因为你需要从索引中移除它，而不是磁盘中。\n还有一个原因是速度—— Git 在运行过滤器时，并不会检出每个修订版本到磁盘中，所以这个过程会非常快。\n如果愿意的话，你也可以通过 ","a":[["class","literal"]]},{"n":"code","x":"--tree-filter","l":" 选项来完成同样的任务。\n","a":[["class","literal"]]},{"n":"code","x":"git rm","l":" 命令的 ","a":[["class","literal"]]},{"n":"code","x":"--ignore-unmatch","l":" 选项告诉命令：如果尝试删除的模式不存在时，不提示错误。\n最后，使用 ","a":[["class","literal"]]},{"n":"code","x":"filter-branch","l":" 选项来重写自 ","a":[["class","literal"]]},{"n":"code","x":"7b30847","l":" 提交以来的历史，也就是这个问题产生的地方。\n否则，这个命令会从最旧的提交开始，这将会花费许多不必要的时间。","a":[["class","literal"]]}]},{"n":"p","x":"你的历史中将不再包含对那个文件的引用。\n不过，你的引用日志和你在 ","l":"\n","c":[{"n":"code","x":".git/refs/original","l":" 通过 ","a":[["class","literal"]]},{"n":"code","x":"filter-branch","l":"\n选项添加的新引用中还存有对这个文件的引用，所以你必须移除它们然后重新打包数据库。\n在重新打包前需要移除任何包含指向那些旧提交的指针的文件：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"rm -Rf .git/refs/original\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"rm -Rf .git/logs/\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git gc\nCounting objects: 15, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (11/11), done.\nWriting objects: 100% (15/15), done.\nTotal 15 (delta 1), reused 12 (delta 0)","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"让我们看看你省了多少空间。","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git count-objects -v\ncount: 11\nsize: 4904\nin-pack: 15\npacks: 1\nsize-pack: 8\nprune-packable: 0\ngarbage: 0\nsize-garbage: 0","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"打包的仓库大小下降到了 8K，比 5MB 好很多。\n可以从 size 的值看出，这个大文件还在你的松散对象中，并没有消失；但是它不会在推送或接下来的克隆中出现，这才是最重要的。\n如果真的想要删除它，可以通过有 ","l":"\n","c":[{"n":"code","x":"--expire","l":" 选项的 ","a":[["class","literal"]]},{"n":"code","x":"git prune","l":" 命令来完全地移除那个对象：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git prune --expire now\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git count-objects -v\ncount: 0\nsize: 0\nin-pack: 15\npacks: 1\nsize-pack: 8\nprune-packable: 0\ngarbage: 0\nsize-garbage: 0","a":[["style","font-weight: bold"]]}]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","环境变量"]],"c":[{"n":"h2","x":"环境变量","l":"\n","a":[["id","_环境变量"]]},{"n":"p","x":"Git 总是在一个 ","l":"\n","c":[{"n":"code","x":"bash","l":" shell 中运行，并借助一些 shell 环境变量来决定它的运行方式。\n有时候，知道它们是什么以及它们如何让 Git 按照你想要的方式去运行会很有用。\n这里不会列出所有的 Git 环境变量，但我们会涉及最有的那部分。","a":[["class","literal"]]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","全局行为"]],"c":[{"n":"h3","x":"全局行为","l":"\n","a":[["id","_全局行为"]]},{"n":"p","x":"像通常的程序一样，Git 的常规行为依赖于环境变量。","l":"\n"},{"n":"p","l":"\n","c":[{"n":"strong","l":" 决定 Git 到哪找它的子程序 （像 ","c":[{"n":"code","x":"GIT_EXEC_PATH","a":[["class","literal"]]}]},{"n":"code","x":"git-commit","l":", ","a":[["class","literal"]]},{"n":"code","x":"git-diff","l":" 等等）。\n  你可以用 ","a":[["class","literal"]]},{"n":"code","x":"git --exec-path","l":" 来查看当前设置。","a":[["class","literal"]]}]},{"n":"p","x":"通常不会考虑修改 ","l":"\n","c":[{"n":"strong","l":" 这个变量（太多其它东西都依赖它），这是 Git 查找全局配置文件的地方。\n  如果你想要一个包括全局配置的真正的便携版 Git， 你可以在便携版 Git 的 shell 配置中覆盖 ","c":[{"n":"code","x":"HOME","a":[["class","literal"]]}]},{"n":"code","x":"HOME","l":" 设置。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 也类似，除了用于系统级别的配置。\n  Git 在 ","c":[{"n":"code","x":"PREFIX","a":[["class","literal"]]}]},{"n":"code","x":"$PREFIX/etc/gitconfig","l":" 查找此文件。","a":[["class","literal"]]}]},{"n":"p","x":"如果设置了 ","l":"\n","c":[{"n":"strong","l":"，就禁用系统级别的配置文件。\n  这在系统配置影响了你的命令，而你又无权限修改的时候很有用。","c":[{"n":"code","x":"GIT_CONFIG_NOSYSTEM","a":[["class","literal"]]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 控制在命令行上显示多页输出的程序。\n如果这个没有设置，就会用 ","c":[{"n":"code","x":"GIT_PAGER","a":[["class","literal"]]}]},{"n":"code","x":"PAGER","l":" 。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 当用户需要编辑一些文本（比如提交信息）时， Git 会启动这个编辑器。\n如果没设置，就会用 ","c":[{"n":"code","x":"GIT_EDITOR","a":[["class","literal"]]}]},{"n":"code","x":"EDITOR","l":" 。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","版本库位置"]],"c":[{"n":"h3","x":"版本库位置","l":"\n","a":[["id","_版本库位置"]]},{"n":"p","x":"Git 用了几个变量来确定它如何与当前版本库交互。","l":"\n"},{"n":"p","l":"\n","c":[{"n":"strong","l":" 是 ","c":[{"n":"code","x":"GIT_DIR","a":[["class","literal"]]}]},{"n":"code","x":".git","l":" 目录的位置。\n如果这个没有设置， Git 会按照目录树逐层向上查找 ","a":[["class","literal"]]},{"n":"code","x":".git","l":" 目录，直到到达 ","a":[["class","literal"]]},{"n":"code","x":"~","l":" 或 ","a":[["class","literal"]]},{"n":"code","x":"/","l":"。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 控制查找 ","c":[{"n":"code","x":"GIT_CEILING_DIRECTORIES","a":[["class","literal"]]}]},{"n":"code","x":".git","l":" 目录的行为。\n如果你访问加载很慢的目录（如那些磁带机上的或通过网络连接访问的），你可能会想让 Git 早点停止尝试，尤其是 shell 构建时调用了 Git 。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 是非空版本库的工作目录的根路径。\n如果指定了 ","c":[{"n":"code","x":"GIT_WORK_TREE","a":[["class","literal"]]}]},{"n":"code","x":"--git-dir","l":" 或 ","a":[["class","literal"]]},{"n":"code","x":"GIT_DIR","l":" 但未指定 ","a":[["class","literal"]]},{"n":"code","x":"--work-tree","l":"、","a":[["class","literal"]]},{"n":"code","x":"GIT_WORK_TREE","l":" 或\n","a":[["class","literal"]]},{"n":"code","x":"core.worktree","l":"，那么当前工作目录就会视作工作树的顶级目录。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 是索引文件的路径（只有非空版本库有）。","c":[{"n":"code","x":"GIT_INDEX_FILE","a":[["class","literal"]]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 用来指定 ","c":[{"n":"code","x":"GIT_OBJECT_DIRECTORY","a":[["class","literal"]]}]},{"n":"code","x":".git/objects","l":" 目录的位置。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 一个冒号分割的列表（格式类似 ","c":[{"n":"code","x":"GIT_ALTERNATE_OBJECT_DIRECTORIES","a":[["class","literal"]]}]},{"n":"code","x":"/dir/one:/dir/two:…","l":"）用来告诉 Git 到哪里去找不在 ","a":[["class","literal"]]},{"n":"code","x":"GIT_OBJECT_DIRECTORY","l":" 目录中的对象。\n如果你有很多项目有相同内容的大文件，这个可以用来避免存储过多备份。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","路径规则"]],"c":[{"n":"h3","x":"路径规则","l":"\n","a":[["id","_路径规则"]]},{"n":"p","x":"所谓 “pathspec” 是指你在 Git 中如何指定路径，包括通配符的使用。\n它们会在 ","l":"\n","c":[{"n":"code","x":".gitignore","l":" 文件中用到，命令行里也会用到（","a":[["class","literal"]]},{"n":"code","x":"git add *.c","l":"）。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 和 ","c":[{"n":"code","x":"GIT_GLOB_PATHSPECS","a":[["class","literal"]]}]},{"n":"strong","l":" 控制通配符在路径规则中的默认行为。\n如果 ","c":[{"n":"code","x":"GIT_NOGLOB_PATHSPECS","a":[["class","literal"]]}]},{"n":"code","x":"GIT_GLOB_PATHSPECS","l":" 设置为 1, 通配符表现为通配符（这是默认设置）; 如果 ","a":[["class","literal"]]},{"n":"code","x":"GIT_NOGLOB_PATHSPECS","l":" 设置为 1,通配符仅匹配字面。意思是 ","a":[["class","literal"]]},{"n":"code","x":"*.c","l":" 只会匹配 ","a":[["class","literal"]]},{"n":"em","x":"文件名是","l":" “*.c” 的文件，而不是以 "},{"n":"code","x":".c","l":" 结尾的文件。\n你可以在各个路径规范中用 ","a":[["class","literal"]]},{"n":"code","x":":(glob)","l":" 或 ","a":[["class","literal"]]},{"n":"code","x":":(literal)","l":" 开头来覆盖这个配置，如 ","a":[["class","literal"]]},{"n":"code","x":":(glob)*.c","l":" 。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 禁用上面的两种行为；通配符将不能用，前缀覆盖也不能用。","c":[{"n":"code","x":"GIT_LITERAL_PATHSPECS","a":[["class","literal"]]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 让所有的路径规范忽略大小写。","c":[{"n":"code","x":"GIT_ICASE_PATHSPECS","a":[["class","literal"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","提交"]],"c":[{"n":"h3","x":"提交","l":"\n","a":[["id","_提交"]]},{"n":"p","x":"Git 提交对象的创建通常最后是由 ","l":"\n","c":[{"n":"code","x":"git-commit-tree","l":" 来完成， ","a":[["class","literal"]]},{"n":"code","x":"git-commit-tree","l":" 用这些环境变量作主要的信息源。 仅当这些值不存在才回退到预置的值。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 是 “author” 字段的可读名字。","c":[{"n":"code","x":"GIT_AUTHOR_NAME","a":[["class","literal"]]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 是 “author” 字段的邮件。","c":[{"n":"code","x":"GIT_AUTHOR_EMAIL","a":[["class","literal"]]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 是 “author” 字段的时间戳。","c":[{"n":"code","x":"GIT_AUTHOR_DATE","a":[["class","literal"]]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 是 “committer” 字段的可读名字。","c":[{"n":"code","x":"GIT_COMMITTER_NAME","a":[["class","literal"]]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 是 “committer” 字段的邮件。","c":[{"n":"code","x":"GIT_COMMITTER_EMAIL","a":[["class","literal"]]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 是 “committer” 字段的时间戳。","c":[{"n":"code","x":"GIT_COMMITTER_DATE","a":[["class","literal"]]}]}]},{"n":"p","x":"如果 ","l":"\n","c":[{"n":"code","x":"user.email","l":" 没有配置， 就会用到 ","a":[["class","literal"]]},{"n":"strong","l":" 指定的邮件地址。\n如果 ","c":[{"n":"code","x":"EMAIL","a":[["class","literal"]]}]},{"n":"em","x":"这个","l":" 也没有设置， Git 继续回退使用系统用户和主机名。"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","网络"]],"c":[{"n":"h3","x":"网络","l":"\n","a":[["id","_网络"]]},{"n":"p","x":"Git 使用 ","l":"\n","c":[{"n":"code","x":"curl","l":" 库通过 HTTP 来完成网络操作， 所以 ","a":[["class","literal"]]},{"n":"strong","l":" 告诉 Git 显示所有由那个库产生的消息。\n这跟在命令行执行 ","c":[{"n":"code","x":"GIT_CURL_VERBOSE","a":[["class","literal"]]}]},{"n":"code","x":"curl -v","l":" 差不多。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 告诉 Git 不用验证 SSL 证书。\n这在有些时候是需要的， 例如你用一个自己签名的证书通过 HTTPS 来提供 Git 服务， 或者你正在搭建 Git 服务器，还没有安装完全的证书。","c":[{"n":"code","x":"GIT_SSL_NO_VERIFY","a":[["class","literal"]]}]}]},{"n":"p","x":"如果 Git 操作在网速低于 ","l":"\n","c":[{"n":"strong","l":" 字节／秒，并且持续 ","c":[{"n":"code","x":"GIT_HTTP_LOW_SPEED_LIMIT","a":[["class","literal"]]}]},{"n":"strong","l":" 秒以上的时间，Git 会终止那个操作。\n这些值会覆盖 ","c":[{"n":"code","x":"GIT_HTTP_LOW_SPEED_TIME","a":[["class","literal"]]}]},{"n":"code","x":"http.lowSpeedLimit","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"http.lowSpeedTime","l":" 配置的值。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 设置 Git 在通过 HTTP 通讯时用到的 user-agent。\n默认值类似于 ","c":[{"n":"code","x":"GIT_HTTP_USER_AGENT","a":[["class","literal"]]}]},{"n":"code","x":"git/2.0.0","l":" 。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","比较和合并"]],"c":[{"n":"h3","x":"比较和合并","l":"\n","a":[["id","_比较和合并"]]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 这个有点起错名字了。\n有效值仅支持 ","c":[{"n":"code","x":"GIT_DIFF_OPTS","a":[["class","literal"]]}]},{"n":"code","x":"-u<n>","l":" 或 ","a":[["class","literal"]]},{"n":"code","x":"--unified=<n>","l":"，用来控制在 ","a":[["class","literal"]]},{"n":"code","x":"git diff","l":" 命令中显示的内容行数。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 用来覆盖 ","c":[{"n":"code","x":"GIT_EXTERNAL_DIFF","a":[["class","literal"]]}]},{"n":"code","x":"diff.external","l":" 配置的值。\n如果设置了这个值， 当执行 ","a":[["class","literal"]]},{"n":"code","x":"git diff","l":" 时，Git 会调用该程序。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 和 ","c":[{"n":"code","x":"GIT_DIFF_PATH_COUNTER","a":[["class","literal"]]}]},{"n":"strong","l":" 对于 ","c":[{"n":"code","x":"GIT_DIFF_PATH_TOTAL","a":[["class","literal"]]}]},{"n":"code","x":"GIT_EXTERNAL_DIFF","l":" 或 ","a":[["class","literal"]]},{"n":"code","x":"diff.external","l":" 指定的程序有用。\n前者表示在一系列文件中哪个是被比较的（从 1 开始），后者表示每批文件的总数。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 控制递归合并策略的输出。\n允许的值有下面这些：","c":[{"n":"code","x":"GIT_MERGE_VERBOSITY","a":[["class","literal"]]}]}]},{"n":"div","x":"\n","l":"\n","a":[["class","itemized-list"]],"c":[{"n":"ul","x":"\n","l":"\n","c":[{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"0 什么都不输出，除了可能会有一个错误信息。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"1 只显示冲突。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"2 还显示文件改变。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"3 显示因为没有改变被跳过的文件。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"4 显示处理的所有路径。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"5 显示详细的调试信息。","l":"\n","a":[["class","principal"]]}]}]}]},{"n":"p","x":"默认值是 2。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","调试"]],"c":[{"n":"h3","x":"调试","l":"\n","a":[["id","_调试"]]},{"n":"p","x":"想 ","l":"\n","c":[{"n":"em","x":"真正地","l":" 知道 Git 正在做什么?\nGit 内置了相当完整的跟踪信息，你需要做的就是把它们打开。\n这些变量的可用值如下："}]},{"n":"div","x":"\n","l":"\n","a":[["class","itemized-list"]],"c":[{"n":"ul","x":"\n","l":"\n","c":[{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"“true”“1” 或 “2”——跟踪类别写到标准错误输出。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"以 ","l":"\n","a":[["class","principal"]],"c":[{"n":"code","x":"/","l":" 开头的绝对路径——跟踪输出会被写到那个文件。","a":[["class","literal"]]}]}]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 控制常规跟踪，它并不适用于特殊情况。\n它跟踪的范围包括别名的展开和其他子程序的委托。","c":[{"n":"code","x":"GIT_TRACE","a":[["class","literal"]]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"GIT_TRACE=true git lga\n20:12:49.877982 git.c:554               trace: exec: 'git-lga'\n20:12:49.878369 run-command.c:341       trace: run_command: 'git-lga'\n20:12:49.879529 git.c:282               trace: alias expansion: lga => 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'\n20:12:49.879885 git.c:349               trace: built-in: git 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'\n20:12:49.899217 run-command.c:341       trace: run_command: 'less'\n20:12:49.899675 run-command.c:192       trace: exec: 'less'","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 控制访问打包文件的跟踪信息。\n第一个字段是被访问的打包文件，第二个是文件的偏移量：","c":[{"n":"code","x":"GIT_TRACE_PACK_ACCESS","a":[["class","literal"]]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"GIT_TRACE_PACK_ACCESS=true git status\n20:10:12.081397 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 12\n20:10:12.081886 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 34662\n20:10:12.082115 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 35175\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"# ","l":"[…]\n20:10:12.087398 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 56914983\n20:10:12.087419 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 14303666\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 打开网络操作包级别的跟踪信息。","c":[{"n":"code","x":"GIT_TRACE_PACKET","a":[["class","literal"]]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"GIT_TRACE_PACKET=true git ls-remote origin\n20:15:14.867043 pkt-line.c:46           packet:          git< # service=git-upload-pack\n20:15:14.867071 pkt-line.c:46           packet:          git< 0000\n20:15:14.867079 pkt-line.c:46           packet:          git< 97b8860c071898d9e162678ea1035a8ced2f8b1f HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow no-progress include-tag multi_ack_detailed no-done symref=HEAD:refs/heads/master agent=git/2.0.4\n20:15:14.867088 pkt-line.c:46           packet:          git< 0f20ae29889d61f2e93ae00fd34f1cdb53285702 refs/heads/ab/add-interactive-show-diff-func-name\n20:15:14.867094 pkt-line.c:46           packet:          git< 36dc827bc9d17f80ed4f326de21247a5d1341fbc refs/heads/ah/doc-gitk-config\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"# ","l":"[…]","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 控制性能数据的日志打印。\n输出显示了每个 ","c":[{"n":"code","x":"GIT_TRACE_PERFORMANCE","a":[["class","literal"]]}]},{"n":"code","x":"git","l":" 命令调用花费的时间。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"GIT_TRACE_PERFORMANCE=true git gc\n20:18:19.499676 trace.c:414             performance: 0.374835000 s: git command: 'git' 'pack-refs' '--all' '--prune'\n20:18:19.845585 trace.c:414             performance: 0.343020000 s: git command: 'git' 'reflog' 'expire' '--all'\nCounting objects: 170994, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (43413/43413), done.\nWriting objects: 100% (170994/170994), done.\nTotal 170994 (delta 126176), reused 170524 (delta 125706)\n20:18:23.567927 trace.c:414             performance: 3.715349000 s: git command: 'git' 'pack-objects' '--keep-true-parents' '--honor-pack-keep' '--non-empty' '--all' '--reflog' '--unpack-unreachable=2.weeks.ago' '--local' '--delta-base-offset' '.git/objects/pack/.tmp-49190-pack'\n20:18:23.584728 trace.c:414             performance: 0.000910000 s: git command: 'git' 'prune-packed'\n20:18:23.605218 trace.c:414             performance: 0.017972000 s: git command: 'git' 'update-server-info'\n20:18:23.606342 trace.c:414             performance: 3.756312000 s: git command: 'git' 'repack' '-d' '-l' '-A' '--unpack-unreachable=2.weeks.ago'\nChecking connectivity: 170994, done.\n20:18:25.225424 trace.c:414             performance: 1.616423000 s: git command: 'git' 'prune' '--expire' '2.weeks.ago'\n20:18:25.232403 trace.c:414             performance: 0.001051000 s: git command: 'git' 'rerere' 'gc'\n20:18:25.233159 trace.c:414             performance: 6.112217000 s: git command: 'git' 'gc'","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 显示 Git 发现的关于版本库和交互环境的信息。","c":[{"n":"code","x":"GIT_TRACE_SETUP","a":[["class","literal"]]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"GIT_TRACE_SETUP=true git status\n20:19:47.086765 trace.c:315             setup: git_dir: .git\n20:19:47.087184 trace.c:316             setup: worktree: /Users/ben/src/git\n20:19:47.087191 trace.c:317             setup: cwd: /Users/ben/src/git\n20:19:47.087194 trace.c:318             setup: prefix: (null)\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean","a":[["style","font-weight: bold"]]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","其它"]],"c":[{"n":"h3","x":"其它","l":"\n","a":[["id","_其它"]]},{"n":"p","x":"如果指定了 ","l":"\n","c":[{"n":"strong","l":"， Git 连接 SSH 主机时会用指定的程序代替 ","c":[{"n":"code","x":"GIT_SSH","a":[["class","literal"]]}]},{"n":"code","x":"ssh","l":" 。\n它会被用 ","a":[["class","literal"]]},{"n":"code","x":"$GIT_SSH [username@]host [-p <port>] <command>","l":" 的命令方式调用。\n这不是配置定制 ","a":[["class","literal"]]},{"n":"code","x":"ssh","l":" 调用方式的最简单的方法; 它不支持额外的命令行参数， 所以你必须写一个封装脚本然后让 ","a":[["class","literal"]]},{"n":"code","x":"GIT_SSH","l":" 指向它。\n可能用 ","a":[["class","literal"]]},{"n":"code","x":"~/.ssh/config","l":" 会更简单。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 覆盖了 ","c":[{"n":"code","x":"GIT_ASKPASS","a":[["class","literal"]]}]},{"n":"code","x":"core.askpass","l":" 配置。\n这是 Git 需要向用户请求验证时用到的程序，它接受一个文本提示作为命令行参数，并在 ","a":[["class","literal"]]},{"n":"code","x":"stdout","l":" 中返回应答。\n（查看 ","a":[["class","literal"]]},{"n":"a","x":"凭证存储","l":" 访问更多相关内容）","a":[["id","xref--ch07-git-tools--_credential_caching"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_credential_caching\"}"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 控制有命令空间的引用的访问，与 ","c":[{"n":"code","x":"GIT_NAMESPACE","a":[["class","literal"]]}]},{"n":"code","x":"--namespace","l":" 标志是相同的。\n这主要在服务器端有用， 如果你想在一个版本库中存储单个版本库的多个 fork, 只要保持引用是隔离的就可以。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 强制 Git 在向标准输出增量写入时使用没有缓存的 I/O。\n设置为 1 让 Git 刷新更多， 设置为 0 则使所有的输出被缓存。\n默认值（若此变量未设置）是根据活动和输出模式的不同选择合适的缓存方案。","c":[{"n":"code","x":"GIT_FLUSH","a":[["class","literal"]]}]}]},{"n":"p","l":"\n","c":[{"n":"strong","l":" 让你可以指定描述性的文字写到 reflog 中。\n这有个例子：","c":[{"n":"code","x":"GIT_REFLOG_ACTION","a":[["class","literal"]]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"GIT_REFLOG_ACTION=","a":[["style","font-weight: bold"]]},{"n":"span","x":"\"my action\"","l":" git commit --allow-empty -m ","a":[["style","font-style: italic"]]},{"n":"span","x":"'my message'","l":"\n[master 9e3d55a] my message\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","l":"git reflog -1\n9e3d55a HEAD@{0}: my action: my message","a":[["style","font-weight: bold"]]}]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","总结"]],"c":[{"n":"h2","x":"总结","l":"\n","a":[["id","_总结"]]},{"n":"p","x":"现在，你应该相当了解 Git 在背后都做了些什么工作，并且在一定程度上也知道了 Git 是如何实现的。\n本章讨论了很多底层命令，这些命令比我们在本书其余部分学到的高层命令来得更原始，也更简洁。\n从底层了解 Git 的工作原理有助于更好地理解 Git 在内部是如何运作的，也方便你能够针对特定的工作流写出自己的工具和脚本。","l":"\n"},{"n":"p","x":"作为一套内容寻址文件系统，Git 不仅仅是一个版本控制系统，它同时是一个非常强大且易用的工具。\n我们希望你可以借助新学到的 Git 内部原理相关知识来实现出自己的应用，并且以更高级、更得心应手的方式来驾驭 Git。","l":"\n"}]}]}]}]},"ns_map":["http://www.w3.org/1999/xhtml","http://www.w3.org/XML/1998/namespace","http://www.idpf.org/2007/ops"]}