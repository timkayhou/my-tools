{"version":1,"tree":{"n":"html","a":[["lang","zh",1],["lang","zh"]],"c":[{"n":"head","x":"\n\n","l":"\n","c":[{"n":"title","x":"Git 命令","l":"\n"},{"n":"link","l":"\n","a":[["rel","stylesheet"],["type","text/css"],["href","styles/epub3.css"]]},{"n":"link","l":"\n","a":[["rel","stylesheet"],["type","text/css"],["href","styles/epub3-css3-only.css"],["media","(min-device-width: 0px)"]]},{"n":"script","x":"\ndocument.addEventListener('DOMContentLoaded', function(event, reader) {\n  if (!(reader = navigator.epubReadingSystem)) {\n    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };\n    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;\n  }\n  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));\n});\n","l":"\n","a":[["type","text/javascript"]]}]},{"n":"body","x":"\n","l":"\n","c":[{"n":"section","x":"\n","l":"\n","a":[["class","chapter"],["title","Git 命令"],["type","chapter",2],["id","C-git-commands"]],"c":[{"n":"header","x":"\n","l":"\n","c":[{"n":"div","x":"\n","l":"\n","a":[["class","chapter-header"]],"c":[{"n":"h1","l":"\n","a":[["class","chapter-title"]],"c":[{"n":"small","a":[["class","subtitle"]],"c":[{"n":"b","x":"Git","l":" "},{"n":"b","x":"命令"}]}]}]}]},{"n":"p","x":"在这一整本书里我们介绍了大量的 Git 命令，并尽可能的通过讲故事的的方式来介绍它们，慢慢的介绍了越来越多的命令。\n但是这导致这些命令的示例用法都散落在在全书的各处。","l":"\n"},{"n":"p","x":"在此附录中，我们会将本书中所提到过的命令都过一遍，并根据其用途大致的分类。\n我们会大致地讨论每个命的作用，指出其在本书中哪些章节使用过。","l":"\n"},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition tip"],["title","Tip"],["type","help",2]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"较长的选项可以。\n例如，你可以输入 ","l":"\n","c":[{"n":"code","x":"git commit --a","l":"，它的行为与 ","a":[["class","literal"]]},{"n":"code","x":"git commit --amend","l":" 相同。\n这种方式只有在 ","a":[["class","literal"]]},{"n":"code","x":"--","l":" 后的字母对于该选项唯一时才可行。\n请在编写脚本时使用完整的选项。","a":[["class","literal"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","设置与配置"]],"c":[{"n":"h2","x":"设置与配置","l":"\n","a":[["id","_设置与配置"]]},{"n":"p","x":"有两个十分常用的命令：","l":"\n","c":[{"n":"code","x":"config","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"help","l":"。\n从第一次调用 Git 到日常微调及阅读参考，它们一直陪伴着你。","a":[["class","literal"]]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git config"]],"c":[{"n":"h3","x":"git config","l":"\n","a":[["id","_git_config"]]},{"n":"p","x":"Git 做的很多工作都有一种默认方式。\n对于绝大多数工作而言，你可以改变 Git 的默认方式，或者根据你的偏好来设置。\n这些设置涵盖了所有的事，从告诉 Git 你的名字，到指定偏好的终端颜色，以及你使用的编辑器。\n此命令会从几个特定的配置文件中读取和写入配置值，以便你可以从全局或者针对特定的仓库来进行设置。","l":"\n"},{"n":"p","x":"本书几乎所有的章节都用到了 ","l":"\n","c":[{"n":"code","x":"git config","l":" 命令。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"初次运行 Git 前的配置","l":" 一节中，在开始使用 Git 之前，我们用它来指定我们的名字，邮箱地址和编辑器偏好。","a":[["id","xref--ch01-getting-started--_first_time"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch01-getting-started.xhtml\", \"frag\": \"_first_time\"}"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"Git 别名","l":" 一节中我们展示了如何创建可以展开为长选项序列的短命令，以便你不用每次都输入它们。","a":[["id","xref--ch02-git-basics-chapter--_git_aliases"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_git_aliases\"}"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"变基","l":" 一节中，执行 ","a":[["id","xref--ch03-git-branching--_rebasing"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_rebasing\"}"]]},{"n":"code","x":"git pull","l":" 命令时，使用此命令来将 ","a":[["class","literal"]]},{"n":"code","x":"--rebase","l":" 作为默认选项。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"凭证存储","l":" 一节中，我们使用它来为你的 HTTP 密码设置一个默认的存储区域。","a":[["id","xref--ch07-git-tools--_credential_caching"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_credential_caching\"}"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"关键字展开","l":" 一节中我们展示了如何设置在 Git 的内容添加和减少时使用的 smudge 过滤器 和 clean 过滤器。","a":[["id","xref--ch08-customizing-git--_keyword_expansion"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch08-customizing-git.xhtml\", \"frag\": \"_keyword_expansion\"}"]]}]},{"n":"p","x":"最后，基本上 ","l":"\n","c":[{"n":"a","x":"配置 Git","l":" 整个章节都是针对此命令的。","a":[["id","xref--ch08-customizing-git--_git_config"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch08-customizing-git.xhtml\", \"frag\": \"_git_config\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git config core.editor 命令"]],"c":[{"n":"h3","x":"git config core.editor 命令","l":"\n","a":[["id","_core_editor"]]},{"n":"p","x":"就像 ","l":"\n","c":[{"n":"a","x":"初次运行 Git 前的配置","l":" 里的设置指示，很多编辑器可以如下设置：","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch01-getting-started.xhtml\", \"frag\": \"_first_time\"}"]]}]},{"n":"div","x":"\n","l":"\n","a":[["class","table"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"table","x":"\n","l":"\n","a":[["class","table table-framed-topbot table-grid-rows"],["style","width: 100%"]],"c":[{"n":"caption","x":"Table 1. 详细的 ","l":"\n","c":[{"n":"code","x":"core.editor","l":" 设置命令列表","a":[["class","literal"]]}]},{"n":"colgroup","x":"\n","l":"\n","c":[{"n":"col","l":"\n"},{"n":"col","l":"\n"}]},{"n":"thead","x":"\n","l":"\n","c":[{"n":"tr","x":"\n","l":"\n","c":[{"n":"th","x":"编辑器","l":"\n"},{"n":"th","x":"设置命令","l":"\n"}]}]},{"n":"tbody","x":"\n","l":"\n","c":[{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Atom"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"atom --wait\"","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"BBEdit (Mac, with command line tools)"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"bbedit -w\"","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Emacs"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor emacs","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Gedit (Linux)"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"gedit --wait --new-window\"","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Gvim (Windows 64-bit)"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"'C:/Program Files/Vim/vim72/gvim.exe' --nofork '%*'\"","l":" (Also see note below)","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Kate (Linux)"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"kate\"","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"nano"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"nano -w\"","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Notepad (Windows 64-bit)"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config core.editor notepad","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Notepad++ (Windows 64-bit)"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"","l":" (Also see note below)","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Scratch (Linux)"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"scratch-text-editor\"","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Sublime Text (macOS)"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl --new-window --wait\"","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Sublime Text (Windows 64-bit)"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"'C:/Program Files/Sublime Text 3/sublime_text.exe' -w\"","l":" (Also see note below)","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"TextEdit (macOS)"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global --add core.editor \"open -W -n\"","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Textmate"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"mate -w\"","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Textpad (Windows 64-bit)"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"'C:/Program Files/TextPad 5/TextPad.exe' -m","l":" (Also see note below)","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Vim"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"vim\"","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"VS Code"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"code --wait\"","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"WordPad"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor '\"C:\\Program Files\\Windows NT\\Accessories\\wordpad.exe\"'\"","a":[["class","literal"]]}]}]}]},{"n":"tr","x":"\n","l":"\n","c":[{"n":"td","l":"\n","c":[{"n":"p","x":"Xi"}]},{"n":"td","l":"\n","c":[{"n":"p","c":[{"n":"code","x":"git config --global core.editor \"xi --wait\"","a":[["class","literal"]]}]}]}]}]}]}]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note"],["type","note",2]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"如果你在 64 位 Windows 系统上安装了 32 位的编辑器，那么它会被安装在 ","l":"\n","c":[{"n":"code","x":"C:\\Program Files (x86)\\","l":" 而非上表中所写的 ","a":[["class","literal"]]},{"n":"code","x":"C:\\Program Files\\","l":" 中。","a":[["class","literal"]]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git help"]],"c":[{"n":"h3","x":"git help","l":"\n","a":[["id","_git_help"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git help","l":" 命令用来显示任何命令的 Git 自带文档。\n但是我们仅会在此附录中提到大部分最常用的命令，对于每一个命令的完整的可选项及标志列表，你可以随时运行 ","a":[["class","literal"]]},{"n":"code","x":"git help <command>","l":" 命令来了解。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"获取帮助","l":" 一节中介绍了 ","a":[["id","xref--ch01-getting-started--_git_help"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch01-getting-started.xhtml\", \"frag\": \"_git_help\"}"]]},{"n":"code","x":"git help","l":" 命令，同时在 ","a":[["class","literal"]]},{"n":"a","x":"配置服务器","l":" 一节中给你展示了如何使用它来查找更多关于 ","a":[["id","xref--ch04-git-on-the-server--_setting_up_server"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch04-git-on-the-server.xhtml\", \"frag\": \"_setting_up_server\"}"]]},{"n":"code","x":"git shell","l":" 的信息。","a":[["class","literal"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","获取与创建项目"]],"c":[{"n":"h2","x":"获取与创建项目","l":"\n","a":[["id","_获取与创建项目"]]},{"n":"p","x":"有几种方式获取一个 Git 仓库。\n一种是从网络上或者其他地方拷贝一个现有的仓库，另一种就是在一个目录中创建一个新的仓库。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git init"]],"c":[{"n":"h3","x":"git init","l":"\n","a":[["id","_git_init"]]},{"n":"p","x":"你只需要简单地运行 ","l":"\n","c":[{"n":"code","x":"git init","l":" 就可以将一个目录转变成一个 Git 仓库，这样你就可以开始对它进行版本管理了。","a":[["class","literal"]]}]},{"n":"p","x":"我们一开始在 ","l":"\n","c":[{"n":"a","x":"获取 Git 仓库","l":" 一节中介绍了如何创建一个新的仓库来开始工作。","a":[["id","xref--ch02-git-basics-chapter--_getting_a_repo"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_getting_a_repo\"}"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"远程分支","l":" 一节中我们简单的讨论了如何改变默认分支。","a":[["id","xref--ch03-git-branching--_remote_branches"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_remote_branches\"}"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"把裸仓库放到服务器上","l":" 一节中我们使用此命令来为一个服务器创建一个空的祼仓库。","a":[["id","xref--ch04-git-on-the-server--_bare_repo"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch04-git-on-the-server.xhtml\", \"frag\": \"_bare_repo\"}"]]}]},{"n":"p","x":"最后，我们在 ","l":"\n","c":[{"n":"a","x":"底层命令与上层命令","l":" 一节中介绍了此命令背后工作的原理的一些细节。","a":[["id","xref--ch10-git-internals--_plumbing_porcelain"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"_plumbing_porcelain\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git clone"]],"c":[{"n":"h3","x":"git clone","l":"\n","a":[["id","_git_clone"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git clone","l":" 实际上是一个封装了其他几个命令的命令。\n它创建了一个新目录，切换到新的目录，然后 ","a":[["class","literal"]]},{"n":"code","x":"git init","l":" 来初始化一个空的 Git 仓库， 然后为你指定的 URL 添加一个（默认名称为 ","a":[["class","literal"]]},{"n":"code","x":"origin","l":" 的）远程仓库（","a":[["class","literal"]]},{"n":"code","x":"git remote add","l":"），再针对远程仓库执行 ","a":[["class","literal"]]},{"n":"code","x":"git fetch","l":"，最后通过 ","a":[["class","literal"]]},{"n":"code","x":"git checkout","l":" 将远程仓库的最新提交检出到本地的工作目录。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"code","x":"git clone","l":" 命令在本书中多次用到，这里只列举几个有意思的地方。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"克隆现有的仓库","l":" 一节中我们通过几个示例详细介绍了此命令。","a":[["id","xref--ch02-git-basics-chapter--_git_cloning"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_git_cloning\"}"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"在服务器上搭建 Git","l":" 一节中，我们使用了 ","a":[["id","xref--ch04-git-on-the-server--_getting_git_on_a_server"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch04-git-on-the-server.xhtml\", \"frag\": \"_getting_git_on_a_server\"}"]]},{"n":"code","x":"--bare","l":" 选项来创建一个没有任何工作目录的 Git 仓库副本。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"打包","l":" 一节中我们使用它来解包一个打包好的 Git 仓库。","a":[["id","xref--ch07-git-tools--_bundling"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_bundling\"}"]]}]},{"n":"p","x":"最后，在 ","l":"\n","c":[{"n":"a","x":"克隆含有子模块的项目","l":" 一节中我们学习了使用 ","a":[["id","xref--ch07-git-tools--_cloning_submodules"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_cloning_submodules\"}"]]},{"n":"code","x":"--recursive","l":" 选项来让克隆一个带有子模块的仓库变得简单。","a":[["class","literal"]]}]},{"n":"p","x":"虽然在本书的其他地方都有用到此命令，但是上面这些用法是特例，或者使用方式有点特别。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","快照基础"]],"c":[{"n":"h2","x":"快照基础","l":"\n","a":[["id","_快照基础"]]},{"n":"p","x":"对于基本的暂存内容及提交到你的历史记录中的工作流，只有少数基本的命令。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git add"]],"c":[{"n":"h3","x":"git add","l":"\n","a":[["id","_git_add"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git add","l":" 命令将内容从工作目录添加到暂存区（或称为索引（index）区），以备下次提交。\n当 ","a":[["class","literal"]]},{"n":"code","x":"git commit","l":" 命令执行时，默认情况下它只会检查暂存区域，因此 ","a":[["class","literal"]]},{"n":"code","x":"git add","l":" 是用来确定下一次提交时快照的样子的。","a":[["class","literal"]]}]},{"n":"p","x":"这个命令对于 Git 来说特别重要，所以在本书中被无数次地提及和使用。\n我们将快速地过一遍一些可以看到的独特的用法。","l":"\n"},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"跟踪新文件","l":" 一节中介绍并详细解释了 ","a":[["id","xref--ch02-git-basics-chapter--_tracking_files"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_tracking_files\"}"]]},{"n":"code","x":"git add","l":" 命令。","a":[["class","literal"]]}]},{"n":"p","x":"然后，我们在 ","l":"\n","c":[{"n":"a","x":"遇到冲突时的分支合并","l":" 一节中提到了如何使用它来解决合并冲突。","a":[["id","xref--ch03-git-branching--_basic_merge_conflicts"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_basic_merge_conflicts\"}"]]}]},{"n":"p","x":"接下来，我们在 ","l":"\n","c":[{"n":"a","x":"交互式暂存","l":" 一章中使用它来交互式的暂存一个已修改文件的特定部分。","a":[["id","xref--ch07-git-tools--_interactive_staging"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_interactive_staging\"}"]]}]},{"n":"p","x":"最后，在 ","l":"\n","c":[{"n":"a","x":"树对象","l":" 一节中我们在底层模拟了它的用法，以便你了解幕后发生了什么。","a":[["id","xref--ch10-git-internals--_tree_objects"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"_tree_objects\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git status"]],"c":[{"n":"h3","x":"git status","l":"\n","a":[["id","_git_status"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git status","l":" 命令会显示工作区及暂存区域中不同状态的文件。\n其中包含了已修改但未暂存，或已经暂存但没有提交的文件。\n在一般的显示形式中，它会给你一些如何在这些暂存区之间移动文件的提示。","a":[["class","literal"]]}]},{"n":"p","x":"首先，我们在 ","l":"\n","c":[{"n":"a","x":"检查当前文件状态","l":" 一节中介绍了 ","a":[["id","xref--ch02-git-basics-chapter--_checking_status"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_checking_status\"}"]]},{"n":"code","x":"status","l":" 的基本及简单的形式。\n虽然我们在全书中都有用到它，但是绝大部分的你能用 ","a":[["class","literal"]]},{"n":"code","x":"git status","l":" 做的事情都在这一章讲到了。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git diff"]],"c":[{"n":"h3","x":"git diff","l":"\n","a":[["id","_git_diff"]]},{"n":"p","x":"当需要查看任意两棵树的差异时，可以使用 ","l":"\n","c":[{"n":"code","x":"git diff","l":" 命令。\n此命令可以查看你工作环境与你的暂存区的差异（","a":[["class","literal"]]},{"n":"code","x":"git diff","l":" 默认的做法），你暂存区域与你最后提交之间的差异（","a":[["class","literal"]]},{"n":"code","x":"git diff --staged","l":"），或者比较两个提交记录的差异（","a":[["class","literal"]]},{"n":"code","x":"git diff master branchB","l":"）。","a":[["class","literal"]]}]},{"n":"p","x":"首先，我们在 ","l":"\n","c":[{"n":"a","x":"查看已暂存和未暂存的修改","l":" 一章中研究了 ","a":[["id","xref--ch02-git-basics-chapter--_git_diff_staged"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_git_diff_staged\"}"]]},{"n":"code","x":"git diff","l":" 的基本用法，在此节中我们展示了如何查看哪些变化已经暂存了，哪些没有。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"提交准则","l":" 一节中,我们在提交前使用 ","a":[["id","xref--ch05-distributed-git--_commit_guidelines"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_commit_guidelines\"}"]]},{"n":"code","x":"--check","l":" 选项来检查可能存在的空白字符问题。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"确定引入了哪些东西","l":" 一节中,了解了使用 ","a":[["id","xref--ch05-distributed-git--_what_is_introduced"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_what_is_introduced\"}"]]},{"n":"code","x":"git diff A...B","l":" 语法来更有效地比较不同分支之间的差异。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"高级合并","l":" 一节中我们使用 ","a":[["id","xref--ch07-git-tools--_advanced_merging"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_advanced_merging\"}"]]},{"n":"code","x":"-b","l":" 选项来过滤掉空白字符的差异，及通过 ","a":[["class","literal"]]},{"n":"code","x":"--theirs","l":"、","a":[["class","literal"]]},{"n":"code","x":"--ours","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"--base","l":" 选项来比较不同暂存区冲突文件的差异。","a":[["class","literal"]]}]},{"n":"p","x":"最后，在 ","l":"\n","c":[{"n":"a","x":"开始使用子模块","l":" 一节中,我们使用此命令合 ","a":[["id","xref--ch07-git-tools--_starting_submodules"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_starting_submodules\"}"]]},{"n":"code","x":"--submodule","l":" 选项来有效地比较子模块的变化。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git difftool"]],"c":[{"n":"h3","x":"git difftool","l":"\n","a":[["id","_git_difftool"]]},{"n":"p","x":"当你不想使用内置的 ","l":"\n","c":[{"n":"code","x":"git diff","l":" 命令时。","a":[["class","literal"]]},{"n":"code","x":"git difftool","l":" 可以用来简单地启动一个外部工具来为你展示两棵树之间的差异。","a":[["class","literal"]]}]},{"n":"p","x":"我们只在 ","l":"\n","c":[{"n":"a","x":"查看已暂存和未暂存的修改","l":" 一节中简单的提到了此命令。","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_git_diff_staged\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git commit"]],"c":[{"n":"h3","x":"git commit","l":"\n","a":[["id","_git_commit"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git commit","l":" 命令将所有通过 ","a":[["class","literal"]]},{"n":"code","x":"git add","l":" 暂存的文件内容在数据库中创建一个持久的快照，然后将当前分支上的分支指针移到其之上。","a":[["class","literal"]]}]},{"n":"p","x":"首先，我们在 ","l":"\n","c":[{"n":"a","x":"提交更新","l":" 一节中涉及了此命令的基本用法。\n我们演示了如何在日常的工作流程中通过使用 ","a":[["id","xref--ch02-git-basics-chapter--_committing_changes"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_committing_changes\"}"]]},{"n":"code","x":"-a","l":" 标志来跳过 ","a":[["class","literal"]]},{"n":"code","x":"git add","l":" 这一步，及如何使用 ","a":[["class","literal"]]},{"n":"code","x":"-m","l":" 标志通过命令行而不启动一个编辑器来传递提交信息。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"撤消操作","l":" 一节中我们介绍了使用 ","a":[["id","xref--ch02-git-basics-chapter--_undoing"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_undoing\"}"]]},{"n":"code","x":"--amend","l":" 选项来重做最后的提交。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"分支简介","l":"，我们探讨了 ","a":[["id","xref--ch03-git-branching--_git_branches_overview"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_git_branches_overview\"}"]]},{"n":"code","x":"git commit","l":" 的更多细节，及工作原理。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"签署提交","l":" 一节中我们探讨了如何使用 ","a":[["id","xref--ch07-git-tools--_signing_commits"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_signing_commits\"}"]]},{"n":"code","x":"-S","l":" 标志来为提交签名加密。","a":[["class","literal"]]}]},{"n":"p","x":"最后，在 ","l":"\n","c":[{"n":"a","x":"提交对象","l":" 一节中，我们了解了 ","a":[["id","xref--ch10-git-internals--_git_commit_objects"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"_git_commit_objects\"}"]]},{"n":"code","x":"git commit","l":" 在背后做了什么，及它是如何实现的。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git reset"]],"c":[{"n":"h3","x":"git reset","l":"\n","a":[["id","_git_reset"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git reset","l":" 命令主要用来根据你传递给动作的参数来执行撤销操作。\n它可以移动 ","a":[["class","literal"]]},{"n":"code","x":"HEAD","l":" 指针并且可选的改变 ","a":[["class","literal"]]},{"n":"code","x":"index","l":" 或者暂存区，如果你使用 ","a":[["class","literal"]]},{"n":"code","x":"--hard","l":" 参数的话你甚至可以改变工作区。\n如果错误地为这个命令附加后面的参数，你可能会丢失你的工作，所以在使用前你要确定你已经完全理解了它。","a":[["class","literal"]]}]},{"n":"p","x":"首先，我们在 ","l":"\n","c":[{"n":"a","x":"取消暂存的文件","l":" 一节中介绍了 ","a":[["id","xref--ch02-git-basics-chapter--_unstaging"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_unstaging\"}"]]},{"n":"code","x":"git reset","l":" 简单高效的用法，用来对执行过 ","a":[["class","literal"]]},{"n":"code","x":"git add","l":" 命令的文件取消暂存。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"重置揭密","l":" 一节中我们详细介绍了此命令，几乎整节都在解释此命令。","a":[["id","xref--ch07-git-tools--_git_reset"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_git_reset\"}"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"中断一次合并","l":" 一节中，我们使用 ","a":[["id","xref--ch07-git-tools--_abort_merge"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_abort_merge\"}"]]},{"n":"code","x":"git reset --hard","l":" 来取消一个合并，同时我们也使用了 ","a":[["class","literal"]]},{"n":"code","x":"git merge --abort","l":" 命令，它是 ","a":[["class","literal"]]},{"n":"code","x":"git reset","l":" 的一个简单的封装。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git rm"]],"c":[{"n":"h3","x":"git rm","l":"\n","a":[["id","_git_rm"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git rm","l":" 是 Git 用来从工作区，或者暂存区移除文件的命令。\n在为下一次提交暂存一个移除操作上，它与 ","a":[["class","literal"]]},{"n":"code","x":"git add","l":" 有一点类似。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"移除文件","l":" 一节中提到了 ","a":[["id","xref--ch02-git-basics-chapter--_removing_files"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_removing_files\"}"]]},{"n":"code","x":"git rm","l":" 的一些细节，包括递归地移除文件，和使用 ","a":[["class","literal"]]},{"n":"code","x":"--cached","l":" 选项来只移除暂存区域的文件但是保留工作区的文件。","a":[["class","literal"]]}]},{"n":"p","x":"在本书的 ","l":"\n","c":[{"n":"a","x":"移除对象","l":" 一节中，介绍了 ","a":[["id","xref--ch10-git-internals--_removing_objects"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"_removing_objects\"}"]]},{"n":"code","x":"git rm","l":" 仅有的几种不同用法，如在执行 ","a":[["class","literal"]]},{"n":"code","x":"git filter-branch","l":" 中使用和解释了 ","a":[["class","literal"]]},{"n":"code","x":"--ignore-unmatch","l":" 选项。\n这对脚本来说很有用。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git mv"]],"c":[{"n":"h3","x":"git mv","l":"\n","a":[["id","_git_mv"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git mv","l":" 命令是一个便利命令，用于移到一个文件并且在新文件上执行`git add`命令及在老文件上执行`git rm`命令。","a":[["class","literal"]]}]},{"n":"p","x":"我们只是在 ","l":"\n","c":[{"n":"a","x":"移动文件","l":" 一节中简单地提到了此命令。","a":[["id","xref--ch02-git-basics-chapter--_git_mv"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_git_mv\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git clean"]],"c":[{"n":"h3","x":"git clean","l":"\n","a":[["id","_git_clean"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git clean","l":" 是一个用来从工作区中移除不想要的文件的命令。\n可以是编译的临时文件或者合并冲突的文件。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"清理工作目录","l":" 一节中我们介绍了你可能会使用 ","a":[["id","xref--ch07-git-tools--_git_clean"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_git_clean\"}"]]},{"n":"code","x":"clean","l":" 命令的大量选项及场景。","a":[["class","literal"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","分支与合并"]],"c":[{"n":"h2","x":"分支与合并","l":"\n","a":[["id","_分支与合并"]]},{"n":"p","x":"Git 有几个实现大部的分支及合并功能的实用命令。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git branch"]],"c":[{"n":"h3","x":"git branch","l":"\n","a":[["id","_git_branch"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git branch","l":" 命令实际上是某种程度上的分支管理工具。\n它可以列出你所有的分支、创建新分支、删除分支及重命名分支。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"a","x":"Git 分支","l":" 一节主要是为 ","a":[["id","xref--ch03-git-branching"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"\"}"]]},{"n":"code","x":"branch","l":" 命令来设计的，它贯穿了整个章节。\n首先，我们在 ","a":[["class","literal"]]},{"n":"a","x":"分支创建","l":" 一节中介绍了它，然后我们在 ","a":[["id","xref--ch03-git-branching--_create_new_branch"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_create_new_branch\"}"]]},{"n":"a","x":"分支管理","l":" 一节中介绍了它的其它大部分特性（列举及删除）。","a":[["id","xref--ch03-git-branching--_branch_management"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_branch_management\"}"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"跟踪分支","l":" 一节中，我们使用 ","a":[["id","xref--ch03-git-branching--_tracking_branches"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_tracking_branches\"}"]]},{"n":"code","x":"git branch -u","l":" 选项来设置一个跟踪分支。","a":[["class","literal"]]}]},{"n":"p","x":"最后，我们在 ","l":"\n","c":[{"n":"a","x":"Git 引用","l":" 一节中讲到了它在背后做一什么。","a":[["id","xref--ch10-git-internals--_git_refs"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"_git_refs\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git checkout"]],"c":[{"n":"h3","x":"git checkout","l":"\n","a":[["id","_git_checkout"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git checkout","l":" 命令用来切换分支，或者检出内容到工作目录。","a":[["class","literal"]]}]},{"n":"p","x":"我们是在 ","l":"\n","c":[{"n":"a","x":"分支切换","l":" 一节中第一次认识了命令及 ","a":[["id","xref--ch03-git-branching--_switching_branches"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_switching_branches\"}"]]},{"n":"code","x":"git branch","l":" 命令。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"跟踪分支","l":" 一节中我们了解了如何使用 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_tracking_branches\"}"]]},{"n":"code","x":"--track","l":" 标志来开始跟踪分支。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"检出冲突","l":" 一节中，我们用此命令和 ","a":[["id","xref--ch07-git-tools--_checking_out_conflicts"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_checking_out_conflicts\"}"]]},{"n":"code","x":"--conflict=diff3","l":" 来重新介绍文件冲突。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"重置揭密","l":" 一节中，我们进一步了解了其细节及与 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_git_reset\"}"]]},{"n":"code","x":"git reset","l":" 的关系。","a":[["class","literal"]]}]},{"n":"p","x":"最后，我们在 ","l":"\n","c":[{"n":"a","x":"HEAD 引用","l":" 一节中介绍了此命令的一些实现细节。","a":[["id","xref--ch10-git-internals--ref_the_ref"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"ref_the_ref\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git merge"]],"c":[{"n":"h3","x":"git merge","l":"\n","a":[["id","_git_merge"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git merge","l":" 工具用来合并一个或者多个分支到你已经检出的分支中。\n然后它将当前分支指针移动到合并结果上。","a":[["class","literal"]]}]},{"n":"p","x":"我们首先在 ","l":"\n","c":[{"n":"a","x":"新建分支","l":" 一节中介绍了 ","a":[["id","xref--ch03-git-branching--_basic_branching"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_basic_branching\"}"]]},{"n":"code","x":"git merge","l":" 命令。\n虽然它在本书的各种地方都有用到，但是 ","a":[["class","literal"]]},{"n":"code","x":"merge","l":" 命令只有几个变种，一般只是 ","a":[["class","literal"]]},{"n":"code","x":"git merge <branch>","l":" 带上一个你想合并进来的一个分支名称。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"派生的公开项目","l":" 的后面介绍了如何做一个 ","a":[["id","xref--ch05-distributed-git--_public_project"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_public_project\"}"]]},{"n":"code","x":"squashed merge","l":" （指 Git 合并时将其当作一个新的提交而不是记录你合并时的分支的历史记录。）","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"高级合并","l":" 一节中，我们介绍了合并的过程及命令，包含 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_advanced_merging\"}"]]},{"n":"code","x":"-Xignore-space-change","l":" 命令及 ","a":[["class","literal"]]},{"n":"code","x":"--abort","l":" 选项来中止一个有问题的提交。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"签署提交","l":" 一节中我们学习了如何在合并前验证签名，如果你项目正在使用 GPG 签名的话。","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_signing_commits\"}"]]}]},{"n":"p","x":"最后，我们在 ","l":"\n","c":[{"n":"a","x":"子树合并","l":" 一节中学习了子树合并。","a":[["id","xref--ch07-git-tools--_subtree_merge"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_subtree_merge\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git mergetool"]],"c":[{"n":"h3","x":"git mergetool","l":"\n","a":[["id","_git_mergetool"]]},{"n":"p","x":"当你在 Git 的合并中遇到问题时，可以使用 ","l":"\n","c":[{"n":"code","x":"git mergetool","l":" 来启动一个外部的合并帮助工具。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"遇到冲突时的分支合并","l":" 中快速介绍了一下它，然后在 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_basic_merge_conflicts\"}"]]},{"n":"a","x":"外部的合并与比较工具","l":" 一节中介绍了如何实现你自己的外部合并工具的细节。","a":[["id","xref--ch08-customizing-git--_external_merge_tools"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch08-customizing-git.xhtml\", \"frag\": \"_external_merge_tools\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git log"]],"c":[{"n":"h3","x":"git log","l":"\n","a":[["id","_git_log"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git log","l":" 命令用来展示一个项目的可达历史记录，从最近的提交快照起。\n默认情况下，它只显示你当前所在分支的历史记录，但是可以显示不同的甚至多个头记录或分支以供遍历。\n此命令通常也用来在提交记录级别显示两个或多个分支之间的差异。","a":[["class","literal"]]}]},{"n":"p","x":"在本书的每一章几乎都有用到此命令来描述一个项目的历史。","l":"\n"},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"查看提交历史","l":" 一节中我们介绍了此命令，并深入做了研究。\n研究了包括 ","a":[["id","xref--ch02-git-basics-chapter--_viewing_history"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_viewing_history\"}"]]},{"n":"code","x":"-p","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"--stat","l":" 选项来了解每一个提交引入的变更，及使用`--pretty` 和 ","a":[["class","literal"]]},{"n":"code","x":"--online","l":" 选项来查看简洁的历史记录。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"分支创建","l":" 一节中我们使用它加 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_create_new_branch\"}"]]},{"n":"code","x":"--decorate","l":" 选项来简单的可视化我们分支的指针所在，同时我们使用 ","a":[["class","literal"]]},{"n":"code","x":"--graph","l":" 选项来查看分叉的历史记录是怎么样的。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"私有小型团队","l":" 和 ","a":[["id","xref--ch05-distributed-git--_private_team"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_private_team\"}"]]},{"n":"a","x":"提交区间","l":" 章节中，我们介绍了在使用 ","a":[["id","xref--ch07-git-tools--_commit_ranges"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_commit_ranges\"}"]]},{"n":"code","x":"git log","l":" 命令时用 ","a":[["class","literal"]]},{"n":"code","x":"branchA..branchB","l":" 的语法来查看一个分支相对于另一个分支, 哪一些提交是唯一的。\n在 ","a":[["class","literal"]]},{"n":"a","x":"提交区间","l":" 一节中我们作了更多介绍。","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_commit_ranges\"}"]]}]},{"n":"p","x":"在 <_merge_log>> 和 ","l":"\n","c":[{"n":"a","x":"三点","l":" 章节中，我们介绍了 ","a":[["id","xref--ch07-git-tools--_triple_dot"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_triple_dot\"}"]]},{"n":"code","x":"branchA...branchB","l":" 格式和 ","a":[["class","literal"]]},{"n":"code","x":"--left-right","l":" 语法来查看哪些仅其中一个分支。\n在 ","a":[["class","literal"]]},{"n":"a","x":"合并日志","l":" 一节中我们还研究了如何使用 ","a":[["id","xref--ch07-git-tools--_merge_log"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_merge_log\"}"]]},{"n":"code","x":"--merge","l":" 选项来帮助合并冲突调试，同样也使用 ","a":[["class","literal"]]},{"n":"code","x":"--cc","l":" 选项来查看在你历史记录中的合并提交的冲突。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"引用日志","l":" 一节中我们使用此工具和 ","a":[["id","xref--ch07-git-tools--_git_reflog"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_git_reflog\"}"]]},{"n":"code","x":"-g","l":" 选项 而不是遍历分支来查看 Git 的 ","a":[["class","literal"]]},{"n":"code","x":"reflog","l":"。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"搜索","l":" 一节中我们研究了`-S` 及 ","a":[["id","xref--ch07-git-tools--_searching"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_searching\"}"]]},{"n":"code","x":"-L","l":" 选项来进行来在代码的历史变更中进行相当优雅地搜索，如一个函数的历史。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"签署提交","l":" 一节中，我们了解了如何使用 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_signing_commits\"}"]]},{"n":"code","x":"--show-signature","l":" 来为每一个提交的 ","a":[["class","literal"]]},{"n":"code","x":"git log","l":" 输出中，添加一个判断是否已经合法的签名的一个验证。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git stash"]],"c":[{"n":"h3","x":"git stash","l":"\n","a":[["id","_git_stash"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git stash","l":" 命令用来临时地保存一些还没有提交的工作，以便在分支上不需要提交未完成工作就可以清理工作目录。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"a","x":"贮藏与清理","l":" 一整个章节基本就是在讲这个命令。","a":[["id","xref--ch07-git-tools--_git_stashing"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_git_stashing\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git tag"]],"c":[{"n":"h3","x":"git tag","l":"\n","a":[["id","_git_tag"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git tag","l":" 命令用来为代码历史记录中的某一个点指定一个永久的书签。\n一般来说它用于发布相关事项。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"打标签","l":" 一节中介绍了此命令及相关细节，并在 ","a":[["id","xref--ch02-git-basics-chapter--_git_tagging"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_git_tagging\"}"]]},{"n":"a","x":"为发布打标签","l":" 一节实践了此命令。","a":[["id","xref--ch05-distributed-git--_tagging_releases"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_tagging_releases\"}"]]}]},{"n":"p","x":"我也在 ","l":"\n","c":[{"n":"a","x":"签署工作","l":" 一节中介绍了如何使用 ","a":[["id","xref--ch07-git-tools--_signing"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_signing\"}"]]},{"n":"code","x":"-s","l":" 标志创建一个 GPG 签名的标签，然后使用 ","a":[["class","literal"]]},{"n":"code","x":"-v","l":" 选项来验证。","a":[["class","literal"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","项目分享与更新"]],"c":[{"n":"h2","x":"项目分享与更新","l":"\n","a":[["id","_项目分享与更新"]]},{"n":"p","x":"在 Git 中没有多少访问网络的命令，几乎所以的命令都是在操作本地的数据库。\n当你想要分享你的工作，或者从其他地方拉取变更时，这有几个处理远程仓库的命令。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git fetch"]],"c":[{"n":"h3","x":"git fetch","l":"\n","a":[["id","_git_fetch"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git fetch","l":" 命令与一个远程的仓库交互，并且将远程仓库中有但是在当前仓库的没有的所有信息拉取下来然后存储在你本地数据库中。","a":[["class","literal"]]}]},{"n":"p","x":"我们开始在 ","l":"\n","c":[{"n":"a","x":"从远程仓库中抓取与拉取","l":" 一节中介绍了此命令，然后我们在 ","a":[["id","xref--ch02-git-basics-chapter--_fetching_and_pulling"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_fetching_and_pulling\"}"]]},{"n":"a","x":"远程分支","l":" 中看到了几个使用示例。","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_remote_branches\"}"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"向一个项目贡献","l":" 一节中有几个示例中也都有使用此命令。","a":[["id","xref--ch05-distributed-git--_contributing_project"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_contributing_project\"}"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"合并请求引用","l":" 我们用它来抓取一个在默认空间之外指定的引用，在 ","a":[["id","xref--ch06-github--_pr_refs"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch06-github.xhtml\", \"frag\": \"_pr_refs\"}"]]},{"n":"a","x":"打包","l":" 中，我们了解了怎么从一个包中获取内容。","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_bundling\"}"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"引用规范","l":" 章节中我们设置了高度自定义的 ","a":[["id","xref--ch10-git-internals--_refspec"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"_refspec\"}"]]},{"n":"code","x":"refspec","l":" 以便 ","a":[["class","literal"]]},{"n":"code","x":"git fetch","l":" 可以做一些跟默认不同的事情。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git pull"]],"c":[{"n":"h3","x":"git pull","l":"\n","a":[["id","_git_pull"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git pull","l":" 命令基本上就是 ","a":[["class","literal"]]},{"n":"code","x":"git fetch","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"git merge","l":" 命令的组合体，Git 从你指定的远程仓库中抓取内容，然后马上尝试将其合并进你所在的分支中。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"从远程仓库中抓取与拉取","l":" 一节中快速介绍了此命令，然后在 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_fetching_and_pulling\"}"]]},{"n":"a","x":"查看某个远程仓库","l":" 一节中了解了如果你运行此命令的话，什么将会合并。","a":[["id","xref--ch02-git-basics-chapter--_inspecting_remote"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_inspecting_remote\"}"]]}]},{"n":"p","x":"我们也在 ","l":"\n","c":[{"n":"a","x":"用变基解决变基","l":" 一节中了解了如何使用此命令来来处理变基的难题。","a":[["id","xref--ch03-git-branching--_rebase_rebase"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_rebase_rebase\"}"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"检出冲突","l":" 一节中我们展示了使用此命令如何通过一个 URL 来一次性的拉取变更。","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_checking_out_conflicts\"}"]]}]},{"n":"p","x":"最后，我们在 ","l":"\n","c":[{"n":"a","x":"签署提交","l":" 一节中我们快速的介绍了你可以使用 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_signing_commits\"}"]]},{"n":"code","x":"--verify-signatures","l":" 选项来验证你正在拉取下来的经过 GPG 签名的提交。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git push"]],"c":[{"n":"h3","x":"git push","l":"\n","a":[["id","_git_push"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git push","l":" 命令用来与另一个仓库通信，计算你本地数据库与远程仓库的差异，然后将差异推送到另一个仓库中。\n它需要有另一个仓库的写权限，因此这通常是需要验证的。","a":[["class","literal"]]}]},{"n":"p","x":"我们开始在 ","l":"\n","c":[{"n":"a","x":"推送到远程仓库","l":" 一节中介绍了 ","a":[["id","xref--ch02-git-basics-chapter--_pushing_remotes"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_pushing_remotes\"}"]]},{"n":"code","x":"git push","l":" 命令。\n在这一节中主要介绍了推送一个分支到远程仓库的基本用法。\n在 ","a":[["class","literal"]]},{"n":"a","x":"推送","l":" 一节中，我们深入了解了如何推送指定分支，在 ","a":[["id","xref--ch03-git-branching--_pushing_branches"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_pushing_branches\"}"]]},{"n":"a","x":"跟踪分支","l":" 一节中我们了解了如何设置一个默认的推送的跟踪分支。\n在 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_tracking_branches\"}"]]},{"n":"a","x":"删除远程分支","l":" 一节中我们使用 ","a":[["id","xref--ch03-git-branching--_delete_branches"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_delete_branches\"}"]]},{"n":"code","x":"--delete","l":" 标志和 ","a":[["class","literal"]]},{"n":"code","x":"git push","l":" 命令来在删除一个在服务器上的分支。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"向一个项目贡献","l":" 一整节中，我们看到了几个使用 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_contributing_project\"}"]]},{"n":"code","x":"git push","l":" 在多个远程仓库分享分支中的工作的示例。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"共享标签","l":" 一节中，我们知道了如何使用此命令加 ","a":[["id","xref--ch02-git-basics-chapter--_sharing_tags"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_sharing_tags\"}"]]},{"n":"code","x":"--tags","l":" 选项来分享你打的标签。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"发布子模块改动","l":" 一节中，我们使用 ","a":[["id","xref--ch07-git-tools--_publishing_submodules"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_publishing_submodules\"}"]]},{"n":"code","x":"--recurse-submodules","l":" 选项来检查是否我们所有的子模块的工作都已经在推送子项目之前已经推送出去了，当使用子模块时这真的很有帮助。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"其它客户端钩子","l":" 中我们简单的提到了 ","a":[["id","xref--ch08-customizing-git--_other_client_hooks"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch08-customizing-git.xhtml\", \"frag\": \"_other_client_hooks\"}"]]},{"n":"code","x":"pre-push","l":" 挂钩（hook），它是一个可以用来设置成在一个推送完成之前运行的脚本，以检查推送是否被允许。","a":[["class","literal"]]}]},{"n":"p","x":"最后，在 ","l":"\n","c":[{"n":"a","x":"引用规范推送","l":" 一节中，我们知道了使用完整的 refspec 来推送，而不是通常使用的简写形式。\n这对我们精确的指定要分享出去的工作很有帮助。","a":[["id","xref--ch10-git-internals--_pushing_refspecs"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"_pushing_refspecs\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git remote"]],"c":[{"n":"h3","x":"git remote","l":"\n","a":[["id","_git_remote"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git remote","l":" 命令是一个是你远程仓库记录的管理工具。\n它允许你将一个长的 URL 保存成一个简写的句柄，例如 ","a":[["class","literal"]]},{"n":"code","x":"origin","l":" ，这样你就可以不用每次都输入他们了。\n你可以有多个这样的句柄，","a":[["class","literal"]]},{"n":"code","x":"git remote","l":" 可以用来添加，修改，及删除它们。","a":[["class","literal"]]}]},{"n":"p","x":"此命令在 ","l":"\n","c":[{"n":"a","x":"远程仓库的使用","l":" 一节中做了详细的介绍，包括列举、添加、移除、重命名功能。","a":[["id","xref--ch02-git-basics-chapter--_remote_repos"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_remote_repos\"}"]]}]},{"n":"p","x":"几乎在此书的后续章节中都有使用此命令，但是一般是以 ","l":"\n","c":[{"n":"code","x":"git remote add <name> <url>","l":" 这样的标准格式。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git archive"]],"c":[{"n":"h3","x":"git archive","l":"\n","a":[["id","_git_archive"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git archive","l":" 命令用来创建项目一个指定快照的归档文件。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"准备一次发布","l":" 一节中，使用 ","a":[["id","xref--ch05-distributed-git--_preparing_release"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_preparing_release\"}"]]},{"n":"code","x":"git archive","l":" 命令来创建一个项目的归档文件用于分享。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git submodule"]],"c":[{"n":"h3","x":"git submodule","l":"\n","a":[["id","_git_submodule"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git submodule","l":" 命令用来管理一个仓库的其他外部仓库。\n它可以被用在库或者其他类型的共享资源上。\n","a":[["class","literal"]]},{"n":"code","x":"submodule","l":" 命令有几个子命令, 如（","a":[["class","literal"]]},{"n":"code","x":"add","l":"、","a":[["class","literal"]]},{"n":"code","x":"update","l":"、","a":[["class","literal"]]},{"n":"code","x":"sync","l":" 等等）用来管理这些资源。","a":[["class","literal"]]}]},{"n":"p","x":"只在 ","l":"\n","c":[{"n":"a","x":"子模块","l":" 章节中提到和详细介绍了此命令。","a":[["id","xref--ch07-git-tools--_git_submodules"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_git_submodules\"}"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","检查与比较"]],"c":[{"n":"h2","x":"检查与比较","l":"\n","a":[["id","_检查与比较"]]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git show"]],"c":[{"n":"h3","x":"git show","l":"\n","a":[["id","_git_show"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git show","l":" 命令可以以一种简单的人类可读的方式来显示一个 Git 对象。\n你一般使用此命令来显示一个标签或一个提交的信息。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"附注标签","l":" 一节中使用此命令来显示带注解标签的信息。","a":[["id","xref--ch02-git-basics-chapter--_annotated_tags"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"_annotated_tags\"}"]]}]},{"n":"p","x":"然后，我们在 ","l":"\n","c":[{"n":"a","x":"选择修订版本","l":" 一节中，用了很多次来显示不同的版本选择将解析出来的提交。","a":[["id","xref--ch07-git-tools--_revision_selection"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_revision_selection\"}"]]}]},{"n":"p","x":"我们使用 ","l":"\n","c":[{"n":"code","x":"git show","l":" 做的最有意思的事情是在 ","a":[["class","literal"]]},{"n":"a","x":"手动文件再合并","l":" 一节中用来在合并冲突的多个暂存区域中提取指定文件的内容。","a":[["id","xref--ch07-git-tools--_manual_remerge"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_manual_remerge\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git shortlog"]],"c":[{"n":"h3","x":"git shortlog","l":"\n","a":[["id","_git_shortlog"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git shortlog","l":" 是一个用来归纳 ","a":[["class","literal"]]},{"n":"code","x":"git log","l":" 的输出的命令。\n它可以接受很多与 ","a":[["class","literal"]]},{"n":"code","x":"git log","l":" 相同的选项，但是此命令并不会列出所有的提交，而是展示一个根据作者分组的提交记录的概括性信息","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"制作提交简报","l":" 一节中展示了如何使用此命令来创建一个漂亮的 changelog 文件。","a":[["id","xref--ch05-distributed-git--_the_shortlog"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_the_shortlog\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git describe"]],"c":[{"n":"h3","x":"git describe","l":"\n","a":[["id","_git_describe"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git describe","l":" 命令用来接受任何可以解析成一个提交的东西，然后生成一个人类可读的字符串且不可变。\n这是一种获得一个提交的描述的方式，它跟一个提交的 SHA-1 值一样是无歧义，但是更具可读性。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"生成一个构建号","l":" 及 ","a":[["id","xref--ch05-distributed-git--_build_number"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_build_number\"}"]]},{"n":"a","x":"准备一次发布","l":" 章节中使用 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_preparing_release\"}"]]},{"n":"code","x":"git describe","l":" 命令来获得一个字符串来命名我们发布的文件。","a":[["class","literal"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","调试"]],"c":[{"n":"h2","x":"调试","l":"\n","a":[["id","_调试"]]},{"n":"p","x":"Git 有一些命令可以用来帮你调试你代码中的问题。\n包括找出是什么时候，是谁引入的变更。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git bisect"]],"c":[{"n":"h3","x":"git bisect","l":"\n","a":[["id","_git_bisect"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git bisect","l":" 工具是一个非常有用的调试工具，它通过自动进行一个二分查找来找到哪一个特定的提交是导致 bug 或者问题的第一个提交。","a":[["class","literal"]]}]},{"n":"p","x":"仅在 ","l":"\n","c":[{"n":"a","x":"二分查找","l":" 一节中完整的介绍了此命令。","a":[["id","xref--ch07-git-tools--_binary_search"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_binary_search\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git blame"]],"c":[{"n":"h3","x":"git blame","l":"\n","a":[["id","_git_blame"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git blame","l":" 命令标注任何文件的行，指出文件的每一行的最后的变更的提交及谁是那一个提交的作者。\n当你要找那个人去询问关于这块特殊代码的信息时这会很有用。","a":[["class","literal"]]}]},{"n":"p","x":"只有 ","l":"\n","c":[{"n":"a","x":"文件标注","l":" 一节中提到此命令。","a":[["id","xref--ch07-git-tools--_file_annotation"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_file_annotation\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git grep"]],"c":[{"n":"h3","x":"git grep","l":"\n","a":[["id","_git_grep"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git grep","l":" 命令可以帮助在源代码中，甚至是你项目的老版本中的任意文件中查找任何字符串或者正则表达式。","a":[["class","literal"]]}]},{"n":"p","x":"只有 ","l":"\n","c":[{"n":"a","x":"Git Grep","l":" 的章节中提到此命令。","a":[["id","xref--ch07-git-tools--_git_grep"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_git_grep\"}"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","补丁"]],"c":[{"n":"h2","x":"补丁","l":"\n","a":[["id","_补丁"]]},{"n":"p","x":"Git 中的一些命令是以引入的变更即提交这样的概念为中心的，这样一系列的提交，就是一系列的补丁。\n这些命令以这样的方式来管理你的分支。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git cherry-pick"]],"c":[{"n":"h3","x":"git cherry-pick","l":"\n","a":[["id","_git_cherry_pick"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git cherry-pick","l":" 命令用来获得在单个提交中引入的变更，然后尝试将作为一个新的提交引入到你当前分支上。\n从一个分支单独一个或者两个提交而不是合并整个分支的所有变更是非常有用的。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"变基与拣选工作流","l":" 一节中描述和演示了 ","a":[["id","xref--ch05-distributed-git--_rebase_cherry_pick"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_rebase_cherry_pick\"}"]]},{"n":"code","x":"Cherry picking","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git rebase"]],"c":[{"n":"h3","x":"git rebase","l":"\n","a":[["id","_git_rebase"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git rebase","l":" 命令基本是是一个自动化的 ","a":[["class","literal"]]},{"n":"code","x":"cherry-pick","l":" 命令。\n它计算出一系列的提交，然后再以它们在其他地方以同样的顺序一个一个的 ","a":[["class","literal"]]},{"n":"code","x":"cherry-picks","l":" 出它们。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"变基","l":" 一章中详细提到了此命令，包括与已经公开的分支的变基所涉及的协作问题。","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_rebasing\"}"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"替换","l":" 中我们在一个分离历史记录到两个单独的仓库的示例中实践了此命令，同时使用了 ","a":[["id","xref--ch07-git-tools--_replace"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_replace\"}"]]},{"n":"code","x":"--onto","l":" 选项。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"Rerere","l":" 一节中，我们研究了在变基时遇到的合并冲突的问题。","a":[["id","xref--ch07-git-tools--ef_rerere"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"ef_rerere\"}"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"修改多个提交信息","l":" 一节中，我们也结合 ","a":[["id","xref--ch07-git-tools--_changing_multiple"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_changing_multiple\"}"]]},{"n":"code","x":"-i","l":" 选项将其用于交互式的脚本模式。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git revert"]],"c":[{"n":"h3","x":"git revert","l":"\n","a":[["id","_git_revert"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git revert","l":" 命令本质上就是一个逆向的 ","a":[["class","literal"]]},{"n":"code","x":"git cherry-pick","l":" 操作。\n它将你提交中的变更的以完全相反的方式的应用到一个新创建的提交中，本质上就是撤销或者倒转。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"还原提交","l":" 一节中使用此命令来撤销一个合并提交。","a":[["id","xref--ch07-git-tools--_reverse_commit"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_reverse_commit\"}"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","邮件"]],"c":[{"n":"h2","x":"邮件","l":"\n","a":[["id","_邮件"]]},{"n":"p","x":"很多 Git 项目，包括 Git 本身，基本是通过邮件列表来维护的。\n从方便地生成邮件补丁到从一个邮箱中应用这些补丁,Git 都有工具来让这些操作变得简单。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git apply"]],"c":[{"n":"h3","x":"git apply","l":"\n","a":[["id","_git_apply"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git apply","l":" 命令应用一个通过 ","a":[["class","literal"]]},{"n":"code","x":"git diff","l":" 或者甚至使用 GNU diff 命令创建的补丁。\n它跟补丁命令做了差不多的工作，但还是有一些小小的差别。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"应用来自邮件的补丁","l":" 一节中演示了它的使用及什么环境下你可能会用到它。","a":[["id","xref--ch05-distributed-git--_patches_from_email"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_patches_from_email\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git am"]],"c":[{"n":"h3","x":"git am","l":"\n","a":[["id","_git_am"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git am","l":" 命令用来应用来自邮箱的补丁。特别是那些被 mbox 格式化过的。\n这对于通过邮件接受补丁并将他们轻松地应用到你的项目中很有用。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"使用 ","l":" 命令中提到了它的用法及工作流，包括使用 ","a":[["id","xref--ch05-distributed-git--_git_am"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_git_am\"}"]],"c":[{"n":"code","x":"am","l":" 命令应用补丁","a":[["class","literal"]]}]},{"n":"code","x":"--resolved","l":"、","a":[["class","literal"]]},{"n":"code","x":"-i","l":" 及 ","a":[["class","literal"]]},{"n":"code","x":"-3","l":" 选项。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"电子邮件工作流钩子","l":" 也提到了几条 hooks，你可以用来辅助与 ","a":[["id","xref--ch08-customizing-git--_email_hooks"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch08-customizing-git.xhtml\", \"frag\": \"_email_hooks\"}"]]},{"n":"code","x":"git am","l":" 相关工作流。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"邮件通知","l":" 一节中我们也将用此命令来应用 格式化的 GitHub 的推送请求的变更。","a":[["id","xref--ch06-github--_email_notifications"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch06-github.xhtml\", \"frag\": \"_email_notifications\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git format-patch"]],"c":[{"n":"h3","x":"git format-patch","l":"\n","a":[["id","_git_format_patch"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git format-patch","l":" 命令用来以 mbox 的格式来生成一系列的补丁以便你可以发送到一个邮件列表中。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"通过邮件的公开项目","l":" 一节中研究了一个使用 ","a":[["id","xref--ch05-distributed-git--_project_over_email"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_project_over_email\"}"]]},{"n":"code","x":"git format-patch","l":" 工具为一个项目做贡献的示例。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git imap-send"]],"c":[{"n":"h3","x":"git imap-send","l":"\n","a":[["id","_git_imap_send"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git imap-send","l":" 将一个由 ","a":[["class","literal"]]},{"n":"code","x":"git format-patch","l":" 生成的邮箱上传至 IMAP 草稿文件夹。\n我们在 ","a":[["class","literal"]]},{"n":"a","x":"通过邮件的公开项目","l":" 一节中见过一个通过使用 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_project_over_email\"}"]]},{"n":"code","x":"git imap-send","l":" 工具向一个项目发送补丁进行贡献的例子。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git send-email"]],"c":[{"n":"h3","x":"git send-email","l":"\n","a":[["id","_git_send_email"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git send-mail","l":" 命令用来通过邮件发送那些使用 ","a":[["class","literal"]]},{"n":"code","x":"git format-patch","l":" 生成的补丁。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"通过邮件的公开项目","l":" 一节中研究了一个使用 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_project_over_email\"}"]]},{"n":"code","x":"git send-email","l":" 工具发送补丁来为一个项目做贡献的示例。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git request-pull"]],"c":[{"n":"h3","x":"git request-pull","l":"\n","a":[["id","_git_request_pull"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git request-pull","l":" 命令只是简单的用来生成一个可通过邮件发送给某个人的示例信息体。\n如果你在公共服务器上有一个分支，并且想让别人知道如何集成这些变更，而不用通过邮件发送补丁，你就可以执行此命令的输出发送给这个你想拉取变更的人。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"派生的公开项目","l":" 一节中演示了如何使用 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"_public_project\"}"]]},{"n":"code","x":"git request-pull","l":" 来生成一个推送消息。","a":[["class","literal"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","外部系统"]],"c":[{"n":"h2","x":"外部系统","l":"\n","a":[["id","_外部系统"]]},{"n":"p","x":"Git 有一些可以与其他的版本控制系统集成的命令。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git svn"]],"c":[{"n":"h3","x":"git svn","l":"\n","a":[["id","_git_svn"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git svn","l":" 可以使 Git 作为一个客户端来与 Subversion 版本控制系统通信。\n这意味着你可以使用 Git 来检出内容，或者提交到 Subversion 服务器。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"a","x":"Git 与 Subversion","l":" 一章深入讲解了此命令。","a":[["id","xref--ch09-git-and-other-systems--_git_svn"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch09-git-and-other-systems.xhtml\", \"frag\": \"_git_svn\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git fast-import"]],"c":[{"n":"h3","x":"git fast-import","l":"\n","a":[["id","_git_fast_import"]]},{"n":"p","x":"对于其他版本控制系统或者从其他任何的格式导入，你可以使用 ","l":"\n","c":[{"n":"code","x":"git fast-import","l":" 快速地将其他格式映射到 Git 可以轻松记录的格式。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"一个自定义的导入器","l":" 一节中深入讲解了此命令。","a":[["id","xref--ch09-git-and-other-systems--_custom_importer"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch09-git-and-other-systems.xhtml\", \"frag\": \"_custom_importer\"}"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","管理"]],"c":[{"n":"h2","x":"管理","l":"\n","a":[["id","_管理"]]},{"n":"p","x":"如果你正在管理一个 Git 仓库，或者需要通过一个复杂的方法来修复某些东西，Git 提供了一些管理命令来帮助你。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git gc"]],"c":[{"n":"h3","x":"git gc","l":"\n","a":[["id","_git_gc"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git gc","l":" 命令在你的仓库中执行 “garbage collection”，删除数据库中不需要的文件和将其他文件打包成一种更有效的格式。","a":[["class","literal"]]}]},{"n":"p","x":"此命令一般在背后为你工作，虽然你可以手动执行它-如果你想的话。\n我们在","l":"\n","c":[{"n":"a","x":"维护","l":" 一节中研究此命令的几个示例。","a":[["id","xref--ch10-git-internals--_git_gc"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"_git_gc\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git fsck"]],"c":[{"n":"h3","x":"git fsck","l":"\n","a":[["id","_git_fsck"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git fsck","l":" 命令用来检查内部数据库的问题或者不一致性。","a":[["class","literal"]]}]},{"n":"p","x":"我们只在 ","l":"\n","c":[{"n":"a","x":"数据恢复","l":" 这一节中快速使用了一次此命令来搜索所有的悬空对象（dangling object）。","a":[["id","xref--ch10-git-internals--_data_recovery"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"_data_recovery\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git reflog"]],"c":[{"n":"h3","x":"git reflog","l":"\n","a":[["id","_git_reflog"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git reflog","l":" 命令分析你所有分支的头指针的日志来查找出你在重写历史上可能丢失的提交。","a":[["class","literal"]]}]},{"n":"p","x":"我们主要在 ","l":"\n","c":[{"n":"a","x":"引用日志","l":" 一节中提到了此命令，并在展示了一般用法，及如何使用 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_git_reflog\"}"]]},{"n":"code","x":"git log -g","l":" 来通过 ","a":[["class","literal"]]},{"n":"code","x":"git log","l":" 的输出来查看同样的信息。","a":[["class","literal"]]}]},{"n":"p","x":"我们同样在 ","l":"\n","c":[{"n":"a","x":"数据恢复","l":" 一节中研究了一个恢复丢失的分支的实例。","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"_data_recovery\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","git filter-branch"]],"c":[{"n":"h3","x":"git filter-branch","l":"\n","a":[["id","_git_filter_branch"]]},{"n":"p","l":"\n","c":[{"n":"code","x":"git filter-branch","l":" 命令用来根据某些规则来重写大量的提交记录，例如从任何地方删除文件，或者通过过滤一个仓库中的一个单独的子目录以提取出一个项目。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"从每一个提交中移除一个文件","l":" 一节中，我们解释了此命令，并探究了其他几个选项，例如 ","a":[["id","xref--ch07-git-tools--_removing_file_every_commit"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_removing_file_every_commit\"}"]]},{"n":"code","x":"--commit-filter","l":"，","a":[["class","literal"]]},{"n":"code","x":"--subdirectory-filter","l":" 及 ","a":[["class","literal"]]},{"n":"code","x":"--tree-filter","l":" 。","a":[["class","literal"]]}]},{"n":"p","x":"在 ","l":"\n","c":[{"n":"a","x":"Git-p4","l":" 和 ","a":[["id","xref--ch09-git-and-other-systems--_git_p4"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch09-git-and-other-systems.xhtml\", \"frag\": \"_git_p4\"}"]]},{"n":"a","x":"TFS","l":" 的章节中我们使用它来修复已经导入的外部仓库。","a":[["id","xref--ch09-git-and-other-systems--_git_tfs"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch09-git-and-other-systems.xhtml\", \"frag\": \"_git_tfs\"}"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","底层命令"]],"c":[{"n":"h2","x":"底层命令","l":"\n","a":[["id","_底层命令"]]},{"n":"p","x":"在本书中我们也遇到了不少底层的命令。","l":"\n"},{"n":"p","x":"我们遇到的第一个底层命令是在 ","l":"\n","c":[{"n":"a","x":"合并请求引用","l":" 中的 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch06-github.xhtml\", \"frag\": \"_pr_refs\"}"]]},{"n":"code","x":"ls-remote","l":" 命令。我们用它来查看服务端的原始引用。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"手动文件再合并","l":"、 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_manual_remerge\"}"]]},{"n":"a","x":"Rerere","l":" 及 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"ef_rerere\"}"]]},{"n":"a","x":"索引","l":" 章节中使用 ","a":[["id","xref--ch07-git-tools--_the_index"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_the_index\"}"]]},{"n":"code","x":"ls-files","l":" 来查看暂存区的更原始的样子。","a":[["class","literal"]]}]},{"n":"p","x":"我们同样在 ","l":"\n","c":[{"n":"a","x":"分支引用","l":" 一节中提到了 ","a":[["id","xref--ch07-git-tools--_branch_references"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_branch_references\"}"]]},{"n":"code","x":"rev-parse","l":" 命令，它可以接受任意字符串，并将其转成一个对象的 SHA-1 值。","a":[["class","literal"]]}]},{"n":"p","x":"我们在 ","l":"\n","c":[{"n":"a","x":"Git 内部原理","l":" 一章中对大部分的底层命令进行了介绍，这差不多正是这一章的重点所在。\n我们尽量避免了在本书的其他部分使用这些命令。","a":[["id","xref--ch10-git-internals"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"\"}"]]}]}]}]}]}]},"ns_map":["http://www.w3.org/1999/xhtml","http://www.w3.org/XML/1998/namespace","http://www.idpf.org/2007/ops"]}