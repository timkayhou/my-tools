{"version":1,"tree":{"n":"html","a":[["lang","zh",1],["lang","zh"]],"c":[{"n":"head","x":"\n\n","l":"\n","c":[{"n":"title","x":"服务器上的 Git","l":"\n"},{"n":"link","l":"\n","a":[["rel","stylesheet"],["type","text/css"],["href","styles/epub3.css"]]},{"n":"link","l":"\n","a":[["rel","stylesheet"],["type","text/css"],["href","styles/epub3-css3-only.css"],["media","(min-device-width: 0px)"]]},{"n":"script","x":"\ndocument.addEventListener('DOMContentLoaded', function(event, reader) {\n  if (!(reader = navigator.epubReadingSystem)) {\n    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };\n    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;\n  }\n  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));\n});\n","l":"\n","a":[["type","text/javascript"]]}]},{"n":"body","x":"\n","l":"\n","c":[{"n":"section","x":"\n","l":"\n","a":[["class","chapter"],["title","服务器上的 Git"],["type","chapter",2],["id","ch04-git-on-the-server"]],"c":[{"n":"header","x":"\n","l":"\n","c":[{"n":"div","x":"\n","l":"\n","a":[["class","chapter-header"]],"c":[{"n":"h1","l":"\n","a":[["class","chapter-title"]],"c":[{"n":"small","a":[["class","subtitle"]],"c":[{"n":"b","x":"服务器上的","l":" "},{"n":"b","x":"Git"}]}]}]}]},{"n":"p","x":"\n到目前为止，你应该已经有办法使用 Git 来完成日常工作。\n然而，为了使用 Git 协作功能，你还需要有远程的 Git 仓库。\n尽管在技术上你可以从个人仓库进行推送（push）和拉取（pull）来修改内容，但不鼓励使用这种方法，因为一不留心就很容易弄混其他人的进度。\n此外，你希望你的合作者们即使在你的电脑未联机时亦能存取仓库 — 拥有一个更可靠的公用仓库十分有用。\n因此，与他人合作的最佳方法即是建立一个你与合作者们都有权利访问，且可从那里推送和拉取资料的共用仓库。","l":"\n"},{"n":"p","x":"架设一台 Git 服务器并不难。\n首先，选择你希望服务器使用的通讯协议。\n在本章第一节将介绍可用的协议以及各自优缺点。\n下面一节将解释使用那些协议的典型设置及如何在你的服务器上运行。\n最后，如果你不介意托管你的代码在其他人的服务器，且不想经历设置与维护自己服务器的麻烦，可以试试我们介绍的几个仓库托管服务。","l":"\n"},{"n":"p","x":"如果你对架设自己的服务器没兴趣，可以跳到本章最后一节去看看如何申请一个代码托管服务的帐户然后继续下一章，我们会在那里讨论分散式源码控制环境的林林总总。","l":"\n"},{"n":"p","x":"一个远程仓库通常只是一个裸仓库（bare repository）——即一个没有当前工作目录的仓库。\n因为该仓库仅仅作为合作媒介，不需要从磁盘检查快照；存放的只有 Git 的资料。\n简单的说，裸仓库就是你工程目录内的 ","l":"\n","c":[{"n":"code","x":".git","l":" 子目录内容，不包含其他资料。","a":[["class","literal"]]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","协议"]],"c":[{"n":"h2","x":"协议","l":"\n","a":[["id","_协议"]]},{"n":"p","x":"Git 可以使用四种不同的协议来传输资料：本地协议（Local），HTTP 协议，SSH（Secure Shell）协议及 Git 协议。\n在此，我们将会讨论那些协议及哪些情形应该使用（或避免使用）他们。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","本地协议"]],"c":[{"n":"h3","x":"本地协议","l":"\n","a":[["id","_本地协议"]]},{"n":"p","x":"\n最基本的就是 ","l":"\n","c":[{"n":"em","x":"本地协议（Local protocol）","l":" ，其中的远程版本库就是同一主机上的另一个目录。\n这常见于团队每一个成员都对一个共享的文件系统（例如一个挂载的 NFS）拥有访问权，或者比较少见的多人共用同一台电脑的情况。\n后者并不理想，因为你的所有代码版本库如果长存于同一台电脑，更可能发生灾难性的损失。"}]},{"n":"p","x":"如果你使用共享文件系统，就可以从本地版本库克隆（clone）、推送（push）以及拉取（pull）。\n像这样去克隆一个版本库或者增加一个远程到现有的项目中，使用版本库路径作为 URL。\n例如，克隆一个本地版本库，可以执行如下的命令：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git clone /srv/git/project.git","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"或你可以执行这个命令：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git clone file:///srv/git/project.git","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果在 URL 开头明确的指定 ","l":"\n","c":[{"n":"code","x":"file://","l":"，那么 Git 的行为会略有不同。\n如果仅是指定路径，Git 会尝试使用硬链接（hard link）或直接复制所需要的文件。\n如果指定 ","a":[["class","literal"]]},{"n":"code","x":"file://","l":"，Git 会触发平时用于网路传输资料的进程，那样传输效率会更低。\n指定 ","a":[["class","literal"]]},{"n":"code","x":"file://","l":" 的主要目的是取得一个没有外部参考（extraneous references）\n或对象（object）的干净版本库副本——通常是在从其他版本控制系统导入后或一些类似情况需要这么做\n（关于维护任务可参见 ","a":[["class","literal"]]},{"n":"a","x":"Git 内部原理","l":" ）。\n在此我们将使用普通路径，因为这样通常更快。","a":[["id","xref--ch10-git-internals"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"\"}"]]}]},{"n":"p","x":"要增加一个本地版本库到现有的 Git 项目，可以执行如下的命令：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git remote add local_proj /srv/git/project.git","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"然后，就可以通过新的远程仓库名 ","l":"\n","c":[{"n":"code","x":"local_proj","l":" 像在网络上一样从远端版本库推送和拉取更新了。","a":[["class","literal"]]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","优点"]],"c":[{"n":"h4","x":"优点","l":"\n","a":[["id","_优点"]]},{"n":"p","x":"基于文件系统的版本库的优点是简单，并且直接使用了现有的文件权限和网络访问权限。\n如果你的团队已经有共享文件系统，建立版本库会十分容易。\n只需要像设置其他共享目录一样，把一个裸版本库的副本放到大家都可以访问的路径，并设置好读/写的权限，就可以了，\n我们会在 ","l":"\n","c":[{"n":"a","x":"在服务器上搭建 Git","l":" 讨论如何导出一个裸版本库。","a":[["id","xref-_getting_git_on_a_server"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch04-git-on-the-server.xhtml\", \"frag\": \"_getting_git_on_a_server\"}"]]}]},{"n":"p","x":"这也是快速从别人的工作目录中拉取更新的方法。\n如果你和别人一起合作一个项目，他想让你从版本库中拉取更新时，运行类似\n","l":"\n","c":[{"n":"code","x":"git pull /home/john/project","l":" 的命令比推送到服务器再抓取回来简单多了。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","缺点"]],"c":[{"n":"h4","x":"缺点","l":"\n","a":[["id","_缺点"]]},{"n":"p","x":"这种方法的缺点是，通常共享文件系统比较难配置，并且比起基本的网络连接访问，这不方便从多个位置访问。\n如果你想从家里推送内容，必须先挂载一个远程磁盘，相比网络连接的访问方式，配置不方便，速度也慢。","l":"\n"},{"n":"p","x":"值得一提的是，如果你使用的是类似于共享挂载的文件系统时，这个方法不一定是最快的。\n访问本地版本库的速度与你访问数据的速度是一样的。\n在同一个服务器上，如果允许 Git 访问本地硬盘，一般的通过 NFS 访问版本库要比通过 SSH 访问慢。","l":"\n"},{"n":"p","x":"最终，这个协议并不保护仓库避免意外的损坏。\n每一个用户都有“远程”目录的完整 shell 权限，没有方法可以阻止他们修改或删除 Git 内部文件和损坏仓库。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","HTTP 协议"]],"c":[{"n":"h3","x":"HTTP 协议","l":"\n","a":[["id","_http_协议"]]},{"n":"p","x":"Git 通过 HTTP 通信有两种模式。\n在 Git 1.6.6 版本之前只有一个方式可用，十分简单并且通常是只读模式的。\nGit 1.6.6 版本引入了一种新的、更智能的协议，让 Git 可以像通过 SSH 那样智能的协商和传输数据。\n之后几年，这个新的 HTTP 协议因为其简单、智能变的十分流行。\n新版本的 HTTP 协议一般被称为 ","l":"\n","c":[{"n":"strong","x":"智能","l":" HTTP 协议，旧版本的一般被称为 "},{"n":"strong","x":"哑","l":" HTTP 协议。\n我们先了解一下新的智能 HTTP 协议。"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","智能 HTTP 协议"]],"c":[{"n":"h4","x":"智能 HTTP 协议","l":"\n","a":[["id","_智能_http_协议"]]},{"n":"p","x":"\n智能 HTTP 的运行方式和 SSH 及 Git 协议类似，只是运行在标准的 HTTP/S 端口上并且可以使用各种 HTTP 验证机制，\n这意味着使用起来会比 SSH 协议简单的多，比如可以使用 HTTP 协议的用户名/密码授权，免去设置 SSH 公钥。","l":"\n"},{"n":"p","x":"智能 HTTP 协议或许已经是最流行的使用 Git 的方式了，它即支持像 ","l":"\n","c":[{"n":"code","x":"git://","l":" 协议一样设置匿名服务，\n也可以像 SSH 协议一样提供传输时的授权和加密。\n而且只用一个 URL 就可以都做到，省去了为不同的需求设置不同的 URL。\n如果你要推送到一个需要授权的服务器上（一般来讲都需要），服务器会提示你输入用户名和密码。\n从服务器获取数据时也一样。","a":[["class","literal"]]}]},{"n":"p","x":"事实上，类似 GitHub 的服务，你在网页上看到的 URL（比如 ","l":"\n","c":[{"n":"a","x":"https://github.com/schacon/simplegit","l":"），\n和你在克隆、推送（如果你有权限）时使用的是一样的。","a":[["href","https://github.com/schacon/simplegit"],["class","link"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","哑（Dumb） HTTP 协议"]],"c":[{"n":"h4","x":"哑（Dumb） HTTP 协议","l":"\n","a":[["id","_哑_dumb_http_协议"]]},{"n":"p","x":"\n如果服务器没有提供智能 HTTP 协议的服务，Git 客户端会尝试使用更简单的“哑” HTTP 协议。\n哑 HTTP 协议里 web 服务器仅把裸版本库当作普通文件来对待，提供文件服务。\n哑 HTTP 协议的优美之处在于设置起来简单。\n基本上，只需要把一个裸版本库放在 HTTP 根目录，设置一个叫做 ","l":"\n","c":[{"n":"code","x":"post-update","l":" 的挂钩就可以了\n（见 ","a":[["class","literal"]]},{"n":"a","x":"Git 钩子","l":"）。\n此时，只要能访问 web 服务器上你的版本库，就可以克隆你的版本库。\n下面是设置从 HTTP 访问版本库的方法：","a":[["id","xref--ch08-customizing-git--_git_hooks"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch08-customizing-git.xhtml\", \"frag\": \"_git_hooks\"}"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cd /var/www/htdocs/\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git clone --bare /path/to/git_project gitproject.git\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"cd gitproject.git\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"mv hooks/post-update.sample hooks/post-update\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"chmod a+x hooks/post-update","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这样就可以了。\nGit 自带的 ","l":"\n","c":[{"n":"code","x":"post-update","l":" 挂钩会默认执行合适的命令（","a":[["class","literal"]]},{"n":"code","x":"git update-server-info","l":"），来确保通过 HTTP 的获取和克隆操作正常工作。\n这条命令会在你通过 SSH 向版本库推送之后被执行；然后别人就可以通过类似下面的命令来克隆：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git clone https://example.com/gitproject.git","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这里我们用了 Apache 里设置了常用的路径 ","l":"\n","c":[{"n":"code","x":"/var/www/htdocs","l":"，不过你可以使用任何静态 Web 服务器\n—— 只需要把裸版本库放到正确的目录下就可以。\nGit 的数据是以基本的静态文件形式提供的（详情见 ","a":[["class","literal"]]},{"n":"a","x":"Git 内部原理","l":"）。","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"\"}"]]}]},{"n":"p","x":"通常的，会在可以提供读／写的智能 HTTP 服务和简单的只读的哑 HTTP 服务之间选一个。\n极少会将二者混合提供服务。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","优点"]],"c":[{"n":"h4","x":"优点","l":"\n","a":[["id","_优点_2"]]},{"n":"p","x":"我们将只关注智能 HTTP 协议的优点。","l":"\n"},{"n":"p","x":"不同的访问方式只需要一个 URL 以及服务器只在需要授权时提示输入授权信息，这两个简便性让终端用户使用 Git 变得非常简单。\n相比 SSH 协议，可以使用用户名／密码授权是一个很大的优势，这样用户就不必须在使用 Git 之前先在本地生成 SSH 密钥对再把公钥上传到服务器。\n对非资深的使用者，或者系统上缺少 SSH 相关程序的使用者，HTTP 协议的可用性是主要的优势。\n与 SSH 协议类似，HTTP 协议也非常快和高效。","l":"\n"},{"n":"p","x":"你也可以在 HTTPS 协议上提供只读版本库的服务，如此你在传输数据的时候就可以加密数据；或者，你甚至可以让客户端使用指定的 SSL 证书。","l":"\n"},{"n":"p","x":"另一个好处是 HTTPS 协议被广泛使用，一般的企业防火墙都会允许这些端口的数据通过。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","缺点"]],"c":[{"n":"h4","x":"缺点","l":"\n","a":[["id","_缺点_2"]]},{"n":"p","x":"在一些服务器上，架设 HTTPS 协议的服务端会比 SSH 协议的棘手一些。\n除了这一点，用其他协议提供 Git 服务与智能 HTTP 协议相比就几乎没有优势了。","l":"\n"},{"n":"p","x":"如果你在 HTTP 上使用需授权的推送，管理凭证会比使用 SSH 密钥认证麻烦一些。\n然而，你可以选择使用凭证存储工具，比如 macOS 的 Keychain 或者 Windows 的凭证管理器。\n参考 ","l":"\n","c":[{"n":"a","x":"凭证存储","l":" 如何安全地保存 HTTP 密码。","a":[["id","xref--ch07-git-tools--_credential_caching"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_credential_caching\"}"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","SSH 协议"]],"c":[{"n":"h3","x":"SSH 协议","l":"\n","a":[["id","_ssh_协议"]]},{"n":"p","x":"\n架设 Git 服务器时常用 SSH 协议作为传输协议。\n因为大多数环境下服务器已经支持通过 SSH 访问 —— 即使没有也很容易架设。\nSSH 协议也是一个验证授权的网络协议；并且，因为其普遍性，架设和使用都很容易。","l":"\n"},{"n":"p","x":"通过 SSH 协议克隆版本库，你可以指定一个 ","l":"\n","c":[{"n":"code","x":"ssh://","l":" 的 URL：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git clone ssh://[user@]server/project.git","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"或者使用一个简短的 scp 式的写法：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git clone [user@]server:project.git","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"在上面两种情况中，如果你不指定可选的用户名，那么 Git 会使用当前登录的用的名字。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","优势"]],"c":[{"n":"h4","x":"优势","l":"\n","a":[["id","_优势"]]},{"n":"p","x":"用 SSH 协议的优势有很多。\n首先，SSH 架设相对简单 ——  SSH 守护进程很常见，多数管理员都有使用经验，并且多数操作系统都包含了它及相关的管理工具。\n其次，通过 SSH 访问是安全的 —— 所有传输数据都要经过授权和加密。\n最后，与 HTTPS 协议、Git 协议及本地协议一样，SSH 协议很高效，在传输前也会尽量压缩数据。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","缺点"]],"c":[{"n":"h4","x":"缺点","l":"\n","a":[["id","_缺点_3"]]},{"n":"p","x":"SSH 协议的缺点在于它不支持匿名访问 Git 仓库。\n如果你使用 SSH，那么即便只是读取数据，使用者也 ","l":"\n","c":[{"n":"strong","x":"必须","l":" 通过 SSH 访问你的主机，\n这使得 SSH 协议不利于开源的项目，毕竟人们可能只想把你的仓库克隆下来查看。\n如果你只在公司网络使用，SSH 协议可能是你唯一要用到的协议。\n如果你要同时提供匿名只读访问和 SSH 协议，那么你除了为自己推送架设 SSH 服务以外，\n还得架设一个可以让其他人访问的服务。"}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","Git 协议"]],"c":[{"n":"h3","x":"Git 协议","l":"\n","a":[["id","_git_协议"]]},{"n":"p","x":"\n最后是 Git 协议。\n这是包含在 Git 里的一个特殊的守护进程；它监听在一个特定的端口（9418），类似于 SSH 服务，但是访问无需任何授权。\n要让版本库支持 Git 协议，需要先创建一个 ","l":"\n","c":[{"n":"code","x":"git-daemon-export-ok","l":" 文件 ——\n它是 Git 协议守护进程为这个版本库提供服务的必要条件 ——  但是除此之外没有任何安全措施。\n要么谁都可以克隆这个版本库，要么谁也不能。\n这意味着，通常不能通过 Git 协议推送。\n由于没有授权机制，一旦你开放推送操作，意味着网络上知道这个项目 URL 的人都可以向项目推送数据。\n不用说，极少会有人这么做。","a":[["class","literal"]]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","优点"]],"c":[{"n":"h4","x":"优点","l":"\n","a":[["id","_优点_3"]]},{"n":"p","x":"目前，Git 协议是 Git 使用的网络传输协议里最快的。\n如果你的项目有很大的访问量，或者你的项目很庞大并且不需要为写进行用户授权，架设 Git 守护进程来提供服务是不错的选择。\n它使用与 SSH 相同的数据传输机制，但是省去了加密和授权的开销。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","缺点"]],"c":[{"n":"h4","x":"缺点","l":"\n","a":[["id","_缺点_4"]]},{"n":"p","x":"Git 协议缺点是缺乏授权机制。\n把 Git 协议作为访问项目版本库的唯一手段是不可取的。\n一般的做法里，会同时提供 SSH 或者 HTTPS 协议的访问服务，只让少数几个开发者有推送（写）权限，其他人通过 ","l":"\n","c":[{"n":"code","x":"git://","l":" 访问只有读权限。\nGit 协议也许也是最难架设的。\n它要求有自己的守护进程，这就要配置 ","a":[["class","literal"]]},{"n":"code","x":"xinetd","l":"、","a":[["class","literal"]]},{"n":"code","x":"systemd","l":" 或者其他的程序，这些工作并不简单。\n它还要求防火墙开放 9418 端口，但是企业防火墙一般不会开放这个非标准端口。\n而大型的企业防火墙通常会封锁这个端口。","a":[["class","literal"]]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","在服务器上搭建 Git"]],"c":[{"n":"h2","x":"在服务器上搭建 Git","l":"\n","a":[["id","_getting_git_on_a_server"]]},{"n":"p","x":"现在我们将讨论如何在你自己的服务器上搭建 Git 服务来运行这些协议。","l":"\n"},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note"],["type","note",2]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"这里我们将要演示在 Linux 服务器上进行一次基本且简化的安装所需的命令与步骤，当然在 macOS 或 Windows 服务器上同样可以运行这些服务。\n事实上，在你的计算机基础架构中建立一个生产环境服务器，将不可避免的使用到不同的安全措施与操作系统工具。但是，希望你能从本节中获得一些必要的知识。","l":"\n"}]}]},{"n":"p","x":"在开始架设 Git 服务器前，需要把现有仓库导出为裸仓库——即一个不包含当前工作目录的仓库。\n这通常是很简单的。\n为了通过克隆你的仓库来创建一个新的裸仓库，你需要在克隆命令后加上 ","l":"\n","c":[{"n":"code","x":"--bare","l":" 选项。\n按照惯例，裸仓库的目录名以 .git 结尾，就像这样：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git clone --bare my_project my_project.git\nCloning into bare repository 'my_project.git'...\ndone.","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"现在，你的 ","l":"\n","c":[{"n":"code","x":"my_project.git","l":" 目录中应该有 Git 目录的副本了。","a":[["class","literal"]]}]},{"n":"p","x":"整体上效果大致相当于","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cp -Rf my_project/.git my_project.git","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"虽然在配置文件中有若干不同，但是对于你的目的来说，这两种方式都是一样的。\n它只取出 Git 仓库自身，不要工作目录，然后特别为它单独创建一个目录。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","把裸仓库放到服务器上"]],"c":[{"n":"h3","x":"把裸仓库放到服务器上","l":"\n","a":[["id","_bare_repo"]]},{"n":"p","x":"既然你有了裸仓库的副本，剩下要做的就是把裸仓库放到服务器上并设置你的协议。\n假设一个域名为 ","l":"\n","c":[{"n":"code","x":"git.example.com","l":" 的服务器已经架设好，并可以通过 SSH 连接，\n你想把所有的 Git 仓库放在 ","a":[["class","literal"]]},{"n":"code","x":"/srv/git","l":" 目录下。\n假设服务器上存在 ","a":[["class","literal"]]},{"n":"code","x":"/srv/git/","l":" 目录，你可以通过以下命令复制你的裸仓库来创建一个新仓库：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"scp -r my_project.git user@git.example.com:/srv/git","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"此时，其他可通过 SSH 读取此服务器上 ","l":"\n","c":[{"n":"code","x":"/srv/git","l":" 目录的用户，可运行以下命令来克隆你的仓库。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git clone user@git.example.com:/srv/git/my_project.git","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果一个用户，通过使用 SSH 连接到一个服务器，并且其对 ","l":"\n","c":[{"n":"code","x":"/srv/git/my_project.git","l":" 目录拥有可写权限，那么他将自动拥有推送权限。","a":[["class","literal"]]}]},{"n":"p","x":"如果到该项目目录中运行 ","l":"\n","c":[{"n":"code","x":"git init","l":" 命令，并加上 ","a":[["class","literal"]]},{"n":"code","x":"--shared","l":" 选项，\n那么 Git 会自动修改该仓库目录的组权限为可写。\n注意，运行此命令的工程中不会摧毁任何提交、引用等内容。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"ssh user@git.example.com\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"cd /srv/git/my_project.git\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git init --bare --shared","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"由此可见，根据现有的 Git 仓库创建一个裸仓库，然后把它放上你和协作者都有 SSH 访问权的服务器是多么容易。\n现在你们已经准备好在同一项目上展开合作了。","l":"\n"},{"n":"p","x":"值得注意的是，这的确是架设一个几个人拥有连接权的 Git 服务的全部——\n只要在服务器上加入可以用 SSH 登录的帐号，然后把裸仓库放在大家都有读写权限的地方。\n你已经准备好了一切，无需更多。","l":"\n"},{"n":"p","x":"下面的几节中，你会了解如何扩展到更复杂的设定。\n这些内容包含如何避免为每一个用户建立一个账户，给仓库添加公共读取权限，架设网页界面等等。\n然而，请记住这一点，如果只是和几个人在一个私有项目上合作的话，","l":"\n","c":[{"n":"em","x":"仅仅","l":" 是一个 SSH 服务器和裸仓库就足够了。"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","小型安装"]],"c":[{"n":"h3","x":"小型安装","l":"\n","a":[["id","_小型安装"]]},{"n":"p","x":"如果设备较少或者你只想在小型开发团队里尝试 Git ，那么一切都很简单。\n架设 Git 服务最复杂的地方在于用户管理。\n如果需要仓库对特定的用户可读，而给另一部分用户读写权限，那么访问和许可安排就会比较困难。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","SSH 连接"]],"c":[{"n":"h4","x":"SSH 连接","l":"\n","a":[["id","_ssh_连接"]]},{"n":"p","x":"\n如果你有一台所有开发者都可以用 SSH 连接的服务器，架设你的第一个仓库就十分简单了，\n因为你几乎什么都不用做（正如我们上一节所说的）。\n如果你想在你的仓库上设置更复杂的访问控制权限，只要使用服务器操作系统的普通的文件系统权限就行了。","l":"\n"},{"n":"p","x":"如果需要团队里的每个人都对仓库有写权限，又不能给每个人在服务器上建立账户，那么提供 SSH 连接就是唯一的选择了。\n我们假设用来共享仓库的服务器已经安装了 SSH 服务，而且你通过它访问服务器。","l":"\n"},{"n":"p","x":"有几个方法可以使你给团队每个成员提供访问权。\n第一个就是给团队里的每个人创建账号，这种方法很直接但也很麻烦。\n或许你不会想要为每个人运行一次 ","l":"\n","c":[{"n":"code","x":"adduser","l":"（或者 ","a":[["class","literal"]]},{"n":"code","x":"useradd","l":"）并且设置临时密码。","a":[["class","literal"]]}]},{"n":"p","x":"第二个办法是在主机上建立一个 ","l":"\n","c":[{"n":"em","x":"git","l":" 账户，让每个需要写权限的人发送一个 SSH 公钥，\n然后将其加入 git 账户的 "},{"n":"code","x":"~/.ssh/authorized_keys","l":" 文件。\n这样一来，所有人都将通过 ","a":[["class","literal"]]},{"n":"em","x":"git","l":" 账户访问主机。\n这一点也不会影响提交的数据——访问主机用的身份不会影响提交对象的提交者信息。"}]},{"n":"p","x":"另一个办法是让 SSH 服务器通过某个 LDAP 服务，或者其他已经设定好的集中授权机制，来进行授权。\n只要每个用户可以获得主机的 shell 访问权限，任何 SSH 授权机制你都可视为是有效的。","l":"\n"}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","生成 SSH 公钥"]],"c":[{"n":"h2","x":"生成 SSH 公钥","l":"\n","a":[["id","_generate_ssh_key"]]},{"n":"p","x":"\n如前所述，许多 Git 服务器都使用 SSH 公钥进行认证。\n为了向 Git 服务器提供 SSH 公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。\n这个过程在所有操作系统上都是相似的。\n首先，你需要确认自己是否已经拥有密钥。\n默认情况下，用户的 SSH 密钥存储在其 ","l":"\n","c":[{"n":"code","x":"~/.ssh","l":" 目录下。\n进入该目录并列出其中内容，你便可以快速确认自己是否已拥有密钥：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cd ~/.ssh\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"ls\nauthorized_keys2  id_dsa       known_hosts\nconfig            id_dsa.pub","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"我们需要寻找一对以 ","l":"\n","c":[{"n":"code","x":"id_dsa","l":" 或 ","a":[["class","literal"]]},{"n":"code","x":"id_rsa","l":" 命名的文件，其中一个带有 ","a":[["class","literal"]]},{"n":"code","x":".pub","l":" 扩展名。\n","a":[["class","literal"]]},{"n":"code","x":".pub","l":" 文件是你的公钥，另一个则是与之对应的私钥。\n如果找不到这样的文件（或者根本没有 ","a":[["class","literal"]]},{"n":"code","x":".ssh","l":" 目录），你可以通过运行 ","a":[["class","literal"]]},{"n":"code","x":"ssh-keygen","l":" 程序来创建它们。\n在 Linux/macOS 系统中，","a":[["class","literal"]]},{"n":"code","x":"ssh-keygen","l":" 随 SSH 软件包提供；在 Windows 上，该程序包含于 MSysGit 软件包中。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"ssh-keygen -o\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/schacon/.ssh/id_rsa):\nCreated directory '/home/schacon/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/schacon/.ssh/id_rsa.\nYour public key has been saved in /home/schacon/.ssh/id_rsa.pub.\nThe key fingerprint is:\nd0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"首先 ","l":"\n","c":[{"n":"code","x":"ssh-keygen","l":" 会确认密钥的存储位置（默认是 ","a":[["class","literal"]]},{"n":"code","x":".ssh/id_rsa","l":"），然后它会要求你输入两次密钥口令。\n如果你不想在使用密钥时输入口令，将其留空即可。\n然而，如果你使用了密码，那么请确保添加了 ","a":[["class","literal"]]},{"n":"code","x":"-o","l":" 选项，它会以比默认格式更能抗暴力破解的格式保存私钥。\n你也可以用 ","a":[["class","literal"]]},{"n":"code","x":"ssh-agent","l":" 工具来避免每次都要输入密码。","a":[["class","literal"]]}]},{"n":"p","x":"现在，进行了上述操作的用户需要将各自的公钥发送给任意一个 Git 服务器管理员\n（假设服务器正在使用基于公钥的 SSH 验证设置）。\n他们所要做的就是复制各自的 ","l":"\n","c":[{"n":"code","x":".pub","l":" 文件内容，并将其通过邮件发送。\n公钥看起来是这样的：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cat ~/.ssh/id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU\nGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3\nPbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA\nt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En\nmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx\nNrRFi9wrf+M7Q== schacon@mylaptop.local","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"关于在多种操作系统中生成 SSH 密钥的更深入教程，请参阅 GitHub 的 SSH 密钥指南\n","l":"\n","c":[{"n":"a","x":"https://help.github.com/articles/generating-ssh-keys","l":"。","a":[["href","https://help.github.com/articles/generating-ssh-keys"],["class","link"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","配置服务器"]],"c":[{"n":"h2","x":"配置服务器","l":"\n","a":[["id","_setting_up_server"]]},{"n":"p","x":"我们来看看如何配置服务器端的 SSH 访问。\n本例中，我们将使用 ","l":"\n","c":[{"n":"code","x":"authorized_keys","l":" 方法来对用户进行认证。\n同时我们假设你使用的操作系统是标准的 Linux 发行版，比如 Ubuntu。\n首先，创建一个操作系统用户 ","a":[["class","literal"]]},{"n":"code","x":"git","l":"，并为其建立一个 ","a":[["class","literal"]]},{"n":"code","x":".ssh","l":" 目录。","a":[["class","literal"]]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note"],["type","note",2]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"以下操作可通过 ","l":"\n","c":[{"n":"code","x":"ssh-copy-id","l":" 命令自动完成，这样就不必手动复制并安装公钥了。","a":[["class","literal"]]}]}]}]},{"n":"p","x":"首先，创建一个操作系统用户 ","l":"\n","c":[{"n":"code","x":"git","l":"，并为其建立一个 ","a":[["class","literal"]]},{"n":"code","x":".ssh","l":" 目录。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"sudo adduser git\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"su git\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"cd\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"mkdir .ssh && chmod 700 .ssh\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"接着，我们需要为系统用户 ","l":"\n","c":[{"n":"code","x":"git","l":" 的 ","a":[["class","literal"]]},{"n":"code","x":"authorized_keys","l":" 文件添加一些开发者 SSH 公钥。\n假设我们已经获得了若干受信任的公钥，并将它们保存在临时文件中。\n与前文类似，这些公钥看起来是这样的：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cat /tmp/id_rsa.john.pub\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L\nojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k\nYjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez\nSdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv\nO7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq\ndAv8JggJICUvax2T9va5 gsg-keypair","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"将这些公钥加入系统用户 ","l":"\n","c":[{"n":"code","x":"git","l":" 的 ","a":[["class","literal"]]},{"n":"code","x":".ssh","l":" 目录下 ","a":[["class","literal"]]},{"n":"code","x":"authorized_keys","l":" 文件的末尾：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"现在我们来为开发者新建一个空仓库。可以借助带 ","l":"\n","c":[{"n":"code","x":"--bare","l":" 选项的 ","a":[["class","literal"]]},{"n":"code","x":"git init","l":" 命令来做到这一点，该命令在初始化仓库时不会创建工作目录：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cd /srv/git\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"mkdir project.git\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"cd project.git\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git init --bare\nInitialized empty Git repository in /srv/git/project.git/","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"接着，John、Josie 或者 Jessica 中的任意一人可以将他们项目的最初版本推送到这个仓库中，\n他只需将此仓库设置为项目的远程仓库并向其推送分支。\n请注意，每添加一个新项目，都需要有人登录服务器取得 shell，并创建一个裸仓库。\n我们假定这个设置了 ","l":"\n","c":[{"n":"code","x":"git","l":" 用户和 Git 仓库的服务器使用 ","a":[["class","literal"]]},{"n":"code","x":"gitserver","l":" 作为主机名。\n同时，假设该服务器运行在内网，并且你已在 DNS 配置中将 ","a":[["class","literal"]]},{"n":"code","x":"gitserver","l":" 指向此服务器。\n那么我们可以运行如下命令（假定 ","a":[["class","literal"]]},{"n":"code","x":"myproject","l":" 是已有项目且其中已包含文件）：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"# ","l":"on John","a":[["style","font-weight: bold"]]},{"n":"span","x":"'s computer","l":"\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","a":[["style","font-weight: bold"]]},{"n":"span","x":"cd myproject","l":"\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","a":[["style","font-weight: bold"]]},{"n":"span","x":"git init","l":"\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","a":[["style","font-weight: bold"]]},{"n":"span","x":"git add .","l":"\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","a":[["style","font-weight: bold"]]},{"n":"span","x":"git commit -m '","l":"initial commit","a":[["style","font-style: italic"]]},{"n":"span","x":"'","l":"\n","a":[["style","border: 1px solid #FF0000"]]},{"n":"span","x":"$ ","l":"git remote add origin git@gitserver:/srv/git/project.git\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git push origin master","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"此时，其他开发者可以克隆此仓库，并推回各自的改动，步骤很简单：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git clone git@gitserver:/srv/git/project.git\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"cd project\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"vim README\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git commit -am ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'fix for the README file'","l":"\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","l":"git push origin master","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"通过这种方法，你可以快速搭建一个具有读写权限、面向多个开发者的 Git 服务器。","l":"\n"},{"n":"p","x":"需要注意的是，目前所有（获得授权的）开发者用户都能以系统用户 ","l":"\n","c":[{"n":"code","x":"git","l":" 的身份登录服务器从而获得一个普通 shell。\n如果你想对此加以限制，则需要修改 ","a":[["class","literal"]]},{"n":"code","x":"/etc/passwd","l":" 文件中（","a":[["class","literal"]]},{"n":"code","x":"git","l":" 用户所对应）的 shell 值。","a":[["class","literal"]]}]},{"n":"p","x":"借助一个名为 ","l":"\n","c":[{"n":"code","x":"git-shell","l":" 的受限 shell 工具，你可以方便地将用户 ","a":[["class","literal"]]},{"n":"code","x":"git","l":" 的活动限制在与 Git 相关的范围内。\n该工具随 Git 软件包一同提供。如果将 ","a":[["class","literal"]]},{"n":"code","x":"git-shell","l":" 设置为用户 ","a":[["class","literal"]]},{"n":"code","x":"git","l":" 的登录 shell（login shell），\n那么该用户便不能获得此服务器的普通 shell 访问权限。\n若要使用 ","a":[["class","literal"]]},{"n":"code","x":"git-shell","l":"，需要用它替换掉 bash 或 csh，使其成为该用户的登录 shell。\n为进行上述操作，首先你必须确保 ","a":[["class","literal"]]},{"n":"code","x":"git-shell","l":" 的完整路径名已存在于 ","a":[["class","literal"]]},{"n":"code","x":"/etc/shells","l":" 文件中：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cat /etc/shells   ","a":[["style","font-weight: bold"]]},{"n":"span","x":"# see if git-shell is already in there. If not...","l":"\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","l":"which git-shell   ","a":[["style","font-weight: bold"]]},{"n":"span","x":"# make sure git-shell is installed on your system.","l":"\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","l":"sudo -e /etc/shells  ","a":[["style","font-weight: bold"]]},{"n":"span","x":"# and add the path to git-shell from last command","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"现在你可以使用 ","l":"\n","c":[{"n":"code","x":"chsh <username> -s <shell>","l":" 命令修改任一系统用户的 shell：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"sudo chsh git -s ","a":[["style","font-weight: bold"]]},{"n":"span","x":"$(","l":"which git-shell","a":[["style","font-weight: bold"]]},{"n":"span","x":")","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这样，用户 ","l":"\n","c":[{"n":"code","x":"git","l":" 就只能利用 SSH 连接对 Git 仓库进行推送和拉取操作，而不能登录机器并取得普通 shell。\n如果试图登录，你会发现尝试被拒绝，像这样：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"ssh git@gitserver\nfatal: Interactive git shell is not enabled.\nhint: ~/git-shell-commands should exist and have read and execute access.\nConnection to gitserver closed.","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"此时，用户仍可通过 SSH 端口转发来访问任何可达的 git 服务器。\n如果你想要避免它，可编辑 ","l":"\n","c":[{"n":"code","x":"authorized_keys","l":" 文件并在所有想要限制的公钥之前添加以下选项：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":"no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty"}]}]}]},{"n":"p","x":"其结果如下：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cat ~/.ssh/authorized_keys\nno-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa\nAAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4LojG6rs6h\nPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4kYjh6541N\nYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9EzSdfd8AcC\nIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myivO7TCUSBd\nLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPqdAv8JggJ\nICUvax2T9va5 gsg-keypair\n\nno-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa\nAAAAB3NzaC1yc2EAAAADAQABAAABAQDEwENNMomTboYI+LJieaAY16qiXiH3wuvENhBG...","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"现在，网络相关的 Git 命令依然能够正常工作，但是开发者用户已经无法得到一个普通 shell 了。\n正如输出信息所提示的，你也可以在 ","l":"\n","c":[{"n":"code","x":"git","l":" 用户的主目录下建立一个目录，来对 ","a":[["class","literal"]]},{"n":"code","x":"git-shell","l":" 命令进行一定程度的自定义。\n比如，你可以限制掉某些本应被服务器接受的 Git 命令，或者对刚才的 SSH 拒绝登录信息进行自定义，这样，当有开发者用户以类似方式尝试登录时，便会看到你的信息。\n要了解更多有关自定义 shell 的信息，请运行 ","a":[["class","literal"]]},{"n":"code","x":"git help shell","l":"。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","Git 守护进程"]],"c":[{"n":"h2","x":"Git 守护进程","l":"\n","a":[["id","_git_守护进程"]]},{"n":"p","x":"\n接下来我们将通过 “Git” 协议建立一个基于守护进程的仓库。\n对于快速且无需授权的 Git 数据访问，这是一个理想之选。\n请注意，因为其不包含授权服务，任何通过该协议管理的内容将在其网络上公开。","l":"\n"},{"n":"p","x":"如果运行在防火墙之外的服务器上，它应该只对那些公开的只读项目服务。\n如果运行在防火墙之内的服务器上，它可用于支撑大量参与人员或自动系统\n（用于持续集成或编译的主机）只读访问的项目，这样可以省去逐一配置 SSH 公钥的麻烦。","l":"\n"},{"n":"p","x":"无论何时，该 Git 协议都是相对容易设定的。\n通常，你只需要以守护进程的形式运行该命令：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git daemon --reuseaddr --base-path=/srv/git/ /srv/git/","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","l":"\n","c":[{"n":"code","x":"--reuseaddr","l":" 选项允许服务器在无需等待旧连接超时的情况下重启，而\n","a":[["class","literal"]]},{"n":"code","x":"--base-path","l":" 选项允许用户在未完全指定路径的条件下克隆项目，\n结尾的路径将告诉 Git 守护进程从何处寻找仓库来导出。\n如果有防火墙正在运行，你需要开放端口 9418 的通信权限。","a":[["class","literal"]]}]},{"n":"p","x":"你可以通过许多方式将该进程以守护进程的方式运行，这主要取决于你所使用的操作系统。","l":"\n"},{"n":"p","x":"由于在现代的 Linux 发行版中，","l":"\n","c":[{"n":"code","x":"systemd","l":" 是最常见的初始化系统，因此你可以用它来达到此目的。\n只要在 ","a":[["class","literal"]]},{"n":"code","x":"/etc/systemd/system/git-daemon.service","l":" 中放一个文件即可，其内容如下：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":"[Unit]\nDescription=Start Git Daemon\n\n[Service]\nExecStart=/usr/bin/git daemon --reuseaddr --base-path=/srv/git/ /srv/git/\n\nRestart=always\nRestartSec=500ms\n\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=git-daemon\n\nUser=git\nGroup=git\n\n[Install]\nWantedBy=multi-user.target"}]}]}]},{"n":"p","x":"你可能会注意这里以 ","l":"\n","c":[{"n":"code","x":"git","l":" 启动的 Git 驻留程序同时使用了 Group 和 User 权限。\n按需修改它并确保提供的用户在此系统上。此外，请确保 Git 二进制文件位于\n","a":[["class","literal"]]},{"n":"code","x":"/usr/bin/git","l":"，必要时可修改此路径。","a":[["class","literal"]]}]},{"n":"p","x":"最后，你需要运行 ","l":"\n","c":[{"n":"code","x":"systemctl enable git-daemon","l":" 以让它在系统启动时自动运行，\n这样也能让它通过 ","a":[["class","literal"]]},{"n":"code","x":"systemctl start git-daemon","l":" 启动，通过 ","a":[["class","literal"]]},{"n":"code","x":"systemctl stop git-daemon","l":" 停止。","a":[["class","literal"]]}]},{"n":"p","x":"在其他系统中，你可以使用 ","l":"\n","c":[{"n":"code","x":"sysvinit","l":" 系统中的 ","a":[["class","literal"]]},{"n":"code","x":"xinetd","l":" 脚本，或者另外的方式来实现——只要你能够将其命令守护进程化并实现监控。","a":[["class","literal"]]}]},{"n":"p","x":"接下来，你需要告诉 Git 哪些仓库允许基于服务器的无授权访问。\n你可以在每个仓库下创建一个名为 ","l":"\n","c":[{"n":"code","x":"git-daemon-export-ok","l":" 的文件来实现。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"cd /path/to/project.git\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"touch git-daemon-export-ok","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"该文件将允许 Git 提供无需授权的项目访问服务。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","Smart HTTP"]],"c":[{"n":"h2","x":"Smart HTTP","l":"\n","a":[["id","_smart_http"]]},{"n":"p","x":"\n我们一般通过 SSH 进行授权访问，通过 git:// 进行无授权访问，但是还有一种协议可以同时实现以上两种方式的访问。\n设置 Smart HTTP 一般只需要在服务器上启用一个 Git 自带的名为 ","l":"\n","c":[{"n":"code","x":"git-http-backend","l":" 的 CGI 脚本。\n该 CGI 脚本将会读取由 ","a":[["class","literal"]]},{"n":"code","x":"git fetch","l":" 或 ","a":[["class","literal"]]},{"n":"code","x":"git push","l":" 命令向 HTTP URL 发送的请求路径和头部信息，\n来判断该客户端是否支持 HTTP 通信（不低于 1.6.6 版本的客户端支持此特性）。\n如果 CGI 发现该客户端支持智能（Smart）模式，它将会以智能模式与它进行通信，\n否则它将会回落到哑（Dumb）模式下（因此它可以对某些老的客户端实现向下兼容）。","a":[["class","literal"]]}]},{"n":"p","x":"在完成以上简单的安装步骤后，\n我们将用 Apache 来作为 CGI 服务器。\n如果你没有安装 Apache，你可以在 Linux 环境下执行如下或类似的命令来安装：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"sudo apt-get install apache2 apache2-utils\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"a2enmod cgi alias env","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"该操作将会启用 ","l":"\n","c":[{"n":"code","x":"mod_cgi","l":"， ","a":[["class","literal"]]},{"n":"code","x":"mod_alias","l":"， 和 ","a":[["class","literal"]]},{"n":"code","x":"mod_env","l":" 等 Apache 模块， 这些模块都是使该功能正常工作所必须的。","a":[["class","literal"]]}]},{"n":"p","x":"你还需要将 ","l":"\n","c":[{"n":"code","x":"/srv/git","l":" 的 Unix 用户组设置为 ","a":[["class","literal"]]},{"n":"code","x":"www-data","l":"，这样 Web 服务器才能读写该仓库，\n因为 运行 CGI 脚本的 Apache 实例默认会以该用户的权限运行：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"chgrp -R www-data /srv/git","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"接下来我们要向 Apache 配置文件添加一些内容，来让 ","l":"\n","c":[{"n":"code","x":"git-http-backend","l":" 作为 Web 服务器对 ","a":[["class","literal"]]},{"n":"code","x":"/git","l":" 路径请求的处理器。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":"SetEnv GIT_PROJECT_ROOT /srv/git\nSetEnv GIT_HTTP_EXPORT_ALL\nScriptAlias /git/ /usr/lib/git-core/git-http-backend/"}]}]}]},{"n":"p","x":"如果留空 ","l":"\n","c":[{"n":"code","x":"GIT_HTTP_EXPORT_ALL","l":" 这个环境变量，Git 将只对无授权客户端提供带 ","a":[["class","literal"]]},{"n":"code","x":"git-daemon-export-ok","l":" 文件的版本库，就像 Git 守护进程一样。","a":[["class","literal"]]}]},{"n":"p","x":"最后，如果想让 Apache 允许 ","l":"\n","c":[{"n":"code","x":"git-http-backend","l":" 请求并实现写入操作的授权验证，使用如下授权屏蔽配置即可：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":"<Files \"git-http-backend\">\n    AuthType Basic\n    AuthName \"Git Access\"\n    AuthUserFile /srv/git/.htpasswd\n    Require expr !(%{QUERY_STRING} -strmatch '*service=git-receive-pack*' || %{REQUEST_URI} =~ m#/git-receive-pack$#)\n    Require valid-user\n</Files>"}]}]}]},{"n":"p","x":"这需要你创建一个包含所有合法用户密码的 ","l":"\n","c":[{"n":"code","x":".htpasswd","l":" 文件。\n以下是一个添加 “schacon” 用户到此文件的例子：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"htpasswd -c /srv/git/.htpasswd schacon","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"你可以通过许多方式添加 Apache 授权用户，选择使用其中一种方式即可。\n以上仅仅只是我们可以找到的最简单的一个例子。\n如果愿意的话，你也可以通过 SSL 运行它，以保证所有数据是在加密状态下进行传输的。","l":"\n"},{"n":"p","x":"我们不想深入去讲解 Apache 配置文件，因为你可能会使用不同的 Web 服务器，或者可能有不同的授权需求。\n它的主要原理是使用一个 Git 附带的，名为 ","l":"\n","c":[{"n":"code","x":"git-http-backend","l":" 的 CGI。它被引用来处理协商通过 HTTP 发送和接收的数据。\n它本身并不包含任何授权功能，但是授权功能可以在 Web 服务器层引用它时被轻松实现。\n你可以在任何所有可以处理 CGI 的 Web 服务器上办到这点，所以随便挑一个你最熟悉的 Web 服务器试手吧。","a":[["class","literal"]]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note"],["type","note",2]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"欲了解更多的有关配置 Apache 授权访问的信息，请通过以下链接浏览 Apache 文档：\n","l":"\n","c":[{"n":"a","x":"https://httpd.apache.org/docs/current/howto/auth.html","a":[["href","https://httpd.apache.org/docs/current/howto/auth.html"],["class","link"]]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","GitWeb"]],"c":[{"n":"h2","x":"GitWeb","l":"\n","a":[["id","_gitweb"]]},{"n":"p","x":"\n如果你对项目有读写权限或只读权限，你可能需要建立起一个基于网页的简易查看器。\nGit 提供了一个叫做 GitWeb 的 CGI 脚本来做这项工作。","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["id","gitweb"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/git-instaweb.png"],["alt","GitWeb 的网页用户界面"],["data-calibre-src","OEBPS/images/git-instaweb.png"]]}]},{"n":"figcaption","x":"Figure 1. GitWeb 的网页用户界面","l":"\n"}]},{"n":"p","x":"如果你想要查看 GitWeb 如何展示你的项目，并且在服务器上安装了轻量级 Web 服务器比如 ","l":"\n","c":[{"n":"code","x":"lighttpd","l":" 或 ","a":[["class","literal"]]},{"n":"code","x":"webrick","l":"，\nGit 提供了一个命令来让你启动一个临时的服务器。\n在 Linux 系统的电脑上，","a":[["class","literal"]]},{"n":"code","x":"lighttpd","l":" 通常已经安装了，所以你只需要在项目目录里执行 ","a":[["class","literal"]]},{"n":"code","x":"git instaweb","l":" 命令即可。\n如果你使用 Mac 系统， Mac OS X Leopard 系统已经预安装了 Ruby，所以 ","a":[["class","literal"]]},{"n":"code","x":"webrick","l":" 或许是你最好的选择。\n如果不想使用 lighttpd 启动 ","a":[["class","literal"]]},{"n":"code","x":"instaweb","l":" 命令，你需要在执行时加入 ","a":[["class","literal"]]},{"n":"code","x":"--httpd","l":" 参数。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git instaweb --httpd=webrick\n[2009-02-21 10:02:21] INFO  WEBrick 1.3.1\n[2009-02-21 10:02:21] INFO  ruby 1.8.6 (2008-03-03) [universal-darwin9.0]","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这个命令启动了一个监听 1234 端口的 HTTP 服务器，并且自动打开了浏览器。\n这对你来说十分方便。\n当你已经完成了工作并想关闭这个服务器，你可以执行同一个命令，并加上 ","l":"\n","c":[{"n":"code","x":"--stop","l":" 选项：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git instaweb --httpd=webrick --stop","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果你现在想为你的团队或你托管的开源项目持续的运行这个页面，你需要通过普通的 Web 服务器来设置 CGI 脚本。\n一些 Linux 发行版的软件库有 ","l":"\n","c":[{"n":"code","x":"gitweb","l":" 包，可以通过 ","a":[["class","literal"]]},{"n":"code","x":"apt","l":" 或 ","a":[["class","literal"]]},{"n":"code","x":"dnf","l":" 来安装，你可以先试试。\n接下来我们来快速的了解一下如何手动安装 GitWeb。\n首先，你需要获得 Git 的源代码，它包含了 GitWeb ，并可以生成自定义的 CGI 脚本：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git clone git://git.kernel.org/pub/scm/git/git.git\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"cd git/\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"make GITWEB_PROJECTROOT=","a":[["style","font-weight: bold"]]},{"n":"span","x":"\"/srv/git\"","l":" prefix=/usr gitweb\n    SUBDIR gitweb\n    SUBDIR ../\nmake[2]: `GIT-VERSION-FILE' is up to date.\n    GEN gitweb.cgi\n    GEN static/gitweb.js\n","a":[["style","font-style: italic"]]},{"n":"span","x":"$ ","l":"sudo cp -Rf gitweb /var/www/","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"需要注意的是，你需要在命令中指定 ","l":"\n","c":[{"n":"code","x":"GITWEB_PROJECTROOT","l":" 变量来让程序知道你的 Git 版本库的位置。\n现在，你需要在 Apache 中使用这个 CGI 脚本，你需要为此添加一个虚拟主机：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":"<VirtualHost *:80>\n    ServerName gitserver\n    DocumentRoot /var/www/gitweb\n    <Directory /var/www/gitweb>\n        Options +ExecCGI +FollowSymLinks +SymLinksIfOwnerMatch\n        AllowOverride All\n        order allow,deny\n        Allow from all\n        AddHandler cgi-script cgi\n        DirectoryIndex gitweb.cgi\n    </Directory>\n</VirtualHost>"}]}]}]},{"n":"p","x":"再次提醒，GitWeb 可以通过任何一个支持 CGI 或 Perl 的网络服务器架设；如果你需要的话，架设起来应该不会很困难。\n现在，你可以访问 ","l":"\n","c":[{"n":"code","x":"http://gitserver/","l":" 在线查看你的版本库。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","GitLab"]],"c":[{"n":"h2","x":"GitLab","l":"\n","a":[["id","_gitlab"]]},{"n":"p","x":"\n虽然 GitWeb 相当简单。\n但如果你正在寻找一个更现代，功能更全的 Git 服务器，这里有几个开源的解决方案可供你选择安装。\n因为 GitLab 是其中最出名的一个，我们将它作为示例并讨论它的安装和使用。\n这比 GitWeb 要复杂的多并且需要更多的维护，但它的确是一个功能更全的选择。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","安装"]],"c":[{"n":"h3","x":"安装","l":"\n","a":[["id","_安装"]]},{"n":"p","x":"GitLab 是一个数据库支持的 web 应用，所以相比于其他 git 服务器，它的安装过程涉及到更多的东西。\n幸运的是，这个过程有非常详细的文档说明和支持。","l":"\n"},{"n":"p","x":"这里有一些可参考的方法帮你安装 GitLab 。\n为了更快速的启动和运行，你可以下载虚拟机镜像或者在 ","l":"\n","c":[{"n":"a","x":"https://bitnami.com/stack/gitlab","l":"\n上获取一键安装包，同时调整配置使之符合你特定的环境。\nBitnami 的一个优点在于它的登录界面（通过 alt+→ 键进入），\n它会告诉你安装好的 GitLab 的 IP 地址以及默认的用户名和密码。","a":[["href","https://bitnami.com/stack/gitlab"],["class","link"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","bitnami"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/bitnami.png"],["alt","Bitnami GitLab 虚拟机登录界面。"],["data-calibre-src","OEBPS/images/bitnami.png"]]}]},{"n":"figcaption","x":"Figure 2. Bitnami GitLab 虚拟机登录界面。","l":"\n"}]},{"n":"p","x":"无论如何，跟着 GitLab 社区版的 readme 文件一步步来，你可以在这里找到它 ","l":"\n","c":[{"n":"a","x":"https://gitlab.com/gitlab-org/gitlab-ce/tree/master","l":" 。\n在这里你将会在主菜单中找到安装 GitLab 的帮助，一个可以在 Digital Ocean 上运行的虚拟机，以及 RPM 和 DEB 包（都是测试版）。\n这里还有 “非官方” 的引导让 GitLab 运行在非标准的操作系统和数据库上，一个全手动的安装脚本，以及许多其他的话题。","a":[["href","https://gitlab.com/gitlab-org/gitlab-ce/tree/master"],["class","link"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","管理"]],"c":[{"n":"h3","x":"管理","l":"\n","a":[["id","_管理"]]},{"n":"p","x":"GitLab 的管理界面是通过网络进入的。\n将你的浏览器转到已经安装 GitLab 的 主机名或 IP 地址，然后以管理员身份登录即可。\n默认的用户名是 ","l":"\n","c":[{"n":"code","x":"admin@local.host","l":"，默认的密码是 ","a":[["class","literal"]]},{"n":"code","x":"5iveL!fe","l":"（你会得到类似 请登录后尽快更换密码 的提示）。\n登录后，点击主栏上方靠右位置的 “Admin area” 图标进行管理。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","gitlab_menu"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/gitlab-menu.png"],["alt","GitLab 主栏的 “Admin area” 图标。"],["data-calibre-src","OEBPS/images/gitlab-menu.png"]]}]},{"n":"figcaption","x":"Figure 3. GitLab 主栏的 “Admin area” 图标。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","使用者"]],"c":[{"n":"h4","x":"使用者","l":"\n","a":[["id","_使用者"]]},{"n":"p","x":"GitLab 上的用户指的是对应协作者的帐号。\n用户帐号没有很多复杂的地方，主要是包含登录数据的用户信息集合。\n每一个用户账号都有一个 ","l":"\n","c":[{"n":"strong","x":"命名空间","l":" ，即该用户项目的逻辑集合。\n如果一个叫 "},{"n":"code","x":"jane","l":" 的用户拥有一个名称是 ","a":[["class","literal"]]},{"n":"code","x":"project","l":" 的项目，那么这个项目的 url 会是 ","a":[["class","literal"]]},{"n":"code","x":"http://server/jane/project","l":" 。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","gitlab_users"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/gitlab-users.png"],["alt",".GitLab 用户管理界面。"],["data-calibre-src","OEBPS/images/gitlab-users.png"]]}]},{"n":"figcaption","x":"Figure 4. GitLab 用户管理界面。","l":"\n"}]},{"n":"p","x":"移除一个用户有两种方法。\n“屏蔽（Blocking）” 一个用户阻止他登录 GitLab 实例，但是该用户命名空间下的所有数据仍然会被保存，\n并且仍可以通过该用户提交对应的登录邮箱链接回他的个人信息页。","l":"\n"},{"n":"p","x":"而另一方面，“销毁（Destroying）” 一个用户，会彻底的将他从数据库和文件系统中移除。\n他命名空间下的所有项目和数据都会被删除，拥有的任何组也会被移除。\n这显然是一个更永久且更具破坏力的行为，所以很少用到这种方法。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","组"]],"c":[{"n":"h4","x":"组","l":"\n","a":[["id","_gitlab_groups_section"]]},{"n":"p","x":"一个 GitLab 的组是一些项目的集合，连同关于多少用户可以访问这些项目的数据。\n每一个组都有一个项目命名空间（与用户一样），所以如果一个叫 ","l":"\n","c":[{"n":"code","x":"training","l":"\n的组拥有一个名称是 ","a":[["class","literal"]]},{"n":"code","x":"materials","l":" 的项目，那么这个项目的 url 会是 ","a":[["class","literal"]]},{"n":"code","x":"http://server/training/materials","l":"。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","gitlab_groups"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/gitlab-groups.png"],["alt","GitLab 组管理界面。"],["data-calibre-src","OEBPS/images/gitlab-groups.png"]]}]},{"n":"figcaption","x":"Figure 5. GitLab 组管理界面。","l":"\n"}]},{"n":"p","x":"每一个组都有许多用户与之关联，每一个用户对组中的项目以及组本身的权限都有级别区分。\n权限的范围从 “访客”（仅能提问题和讨论） 到 “拥有者”（完全控制组、成员和项目）。\n权限的种类太多以至于难以在这里一一列举，不过在 GitLab 的管理界面上有帮助链接。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","项目"]],"c":[{"n":"h4","x":"项目","l":"\n","a":[["id","_项目"]]},{"n":"p","x":"一个 GitLab 的项目相当于 git 的版本库。\n每一个项目都属于一个用户或者一个组的单个命名空间。\n如果这个项目属于一个用户，那么这个拥有者对所有可以获取这个项目的人拥有直接管理权；\n如果这个项目属于一个组，那么该组中用户级别的权限也会起作用。","l":"\n"},{"n":"p","x":"每一个项目都有一个可视级别，控制着谁可以看到这个项目页面和仓库。\n如果一个项目是 ","l":"\n","c":[{"n":"em","x":"私有","l":" 的，这个项目的拥有者必须明确授权从而使特定的用户可以访问。\n一个 "},{"n":"em","x":"内部","l":" 的项目可以被所有登录的人看到，而一个 "},{"n":"em","x":"公开","l":" 的项目则是对所有人可见的。\n注意，这种控制既包括 "},{"n":"code","x":"git fetch","l":" 的使用也包括对项目 web 用户界面的访问。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","钩子"]],"c":[{"n":"h4","x":"钩子","l":"\n","a":[["id","_钩子"]]},{"n":"p","x":"GitLab 在项目和系统级别上都支持钩子程序。\n对任意级别，当有相关事件发生时，GitLab 的服务器会执行一个包含描述性 JSON 数据的 HTTP 请求。\n这是自动化连接你的 git 版本库和 GitLab 实例到其他的开发工具，比如 CI 服务器，聊天室，或者部署工具的一个极好方法。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","基本用途"]],"c":[{"n":"h3","x":"基本用途","l":"\n","a":[["id","_基本用途"]]},{"n":"p","x":"你想要在 GitLab 做的第一件事就是建立一个新项目。\n这通过点击工具栏上的 “+” 图标完成。\n你会被要求填写项目名称，也就是这个项目所属的命名空间，以及它的可视层级。\n绝大多数的设定并不是永久的，可以通过设置界面重新调整。\n点击 “Create Project”，你就完成了。","l":"\n"},{"n":"p","x":"项目存在后，你可能会想将它与本地的 Git 版本库连接。\n每一个项目都可以通过 HTTPS 或者 SSH 连接，任意两者都可以被用来配置远程 Git。\n在项目主页的顶栏可以看到这个项目的 URLs。\n对于一个存在的本地版本库，这个命令将会向主机位置添加一个叫 ","l":"\n","c":[{"n":"code","x":"gitlab","l":" 的远程仓库：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git remote add gitlab https://server/namespace/project.git","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果你的本地没有版本库的副本，你可以这样做：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git clone https://server/namespace/project.git","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"web 用户界面提供了几个有用的获取版本库信息的网页。\n每一个项目的主页都显示了最近的活动，并且通过顶部的链接可以使你浏览项目文件以及提交日志。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","一起工作"]],"c":[{"n":"h3","x":"一起工作","l":"\n","a":[["id","_一起工作"]]},{"n":"p","x":"在一个 GitLab 项目上一起工作的最简单方法就是赋予协作者对 git 版本库的直接 push 权限。\n你可以通过项目设定的 “Members（成员）” 部分向一个项目添加协作者，\n并且将这个新的协作者与一个访问级别关联（不同的访问级别在 ","l":"\n","c":[{"n":"a","x":"组","l":" 中已简单讨论）。\n通过赋予一个协作者 “Developer（开发者）” 或者更高的访问级别，\n这个用户就可以毫无约束地直接向版本库或者向分支进行提交。","a":[["id","xref-_gitlab_groups_section"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch04-git-on-the-server.xhtml\", \"frag\": \"_gitlab_groups_section\"}"]]}]},{"n":"p","x":"另外一个让合作更解耦的方法就是使用合并请求。\n它的优点在于让任何能够看到这个项目的协作者在被管控的情况下对这个项目作出贡献。\n可以直接访问的协作者能够简单的创建一个分支，向这个分支进行提交，也可以开启一个向 ","l":"\n","c":[{"n":"code","x":"master","l":" 或者其他任何一个分支的合并请求。\n对版本库没有推送权限的协作者则可以 “fork” 这个版本库（即创建属于自己的这个库的副本），向 ","a":[["class","literal"]]},{"n":"em","x":"那个","l":" 副本进行提交，然后从那个副本开启一个到主项目的合并请求。\n这个模型使得项目拥有者完全控制着向版本库的提交，以及什么时候允许加入陌生协作者的贡献。"}]},{"n":"p","x":"在 GitLab 中合并请求和问题是一个长久讨论的主要部分。\n每一个合并请求都允许在提出改变的行进行讨论（它支持一个轻量级的代码审查），也允许对一个总体性话题进行讨论。\n两者都可以被分配给用户，或者组织到 milestones（里程碑） 界面。","l":"\n"},{"n":"p","x":"这个部分主要聚焦于在 GitLab 中与 Git 相关的特性，但是 GitLab 作为一个成熟的系统，\n它提供了许多其他产品来帮助你协同工作，例如项目 wiki 与系统维护工具。\nGitLab 的一个优点在于，服务器设置和运行以后，你将很少需要调整配置文件或通过 SSH 连接服务器。\n绝大多数的管理和日常使用都可以在浏览器界面中完成。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","第三方托管的选择"]],"c":[{"n":"h2","x":"第三方托管的选择","l":"\n","a":[["id","_第三方托管的选择"]]},{"n":"p","x":"如果不想设立自己的 Git 服务器，你可以选择将你的 Git 项目托管到一个外部专业的托管网站。\n这带来了一些好处：一个托管网站可以用来快速建立并开始项目，且无需进行服务器维护和监控工作。\n即使你在内部设立并且运行了自己的服务器，你仍然可以把你的开源代码托管在公共托管网站——这通常更有助于开源社区来发现和帮助你。","l":"\n"},{"n":"p","x":"现在，有非常多的托管供你选择，每个选择都有不同的优缺点。\n欲查看最新列表，请浏览 Git 维基的 GitHosting 页面 ","l":"\n","c":[{"n":"a","x":"https://git.wiki.kernel.org/index.php/GitHosting","a":[["href","https://git.wiki.kernel.org/index.php/GitHosting"],["class","link"]]}]},{"n":"p","x":"我们会在 ","l":"\n","c":[{"n":"a","x":"GitHub","l":" 详细讲解 GitHub，作为目前最大的 Git 托管平台，\n你很可能需要与托管在 GitHub 上的项目进行交互，而且你也很可能并不想去设立你自己的 Git 服务器。","a":[["id","xref--ch06-github"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch06-github.xhtml\", \"frag\": \"\"}"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","总结"]],"c":[{"n":"h2","x":"总结","l":"\n","a":[["id","_总结"]]},{"n":"p","x":"你有多种远程存取 Git 仓库的选择便于与其他人合作或是分享你的工作。","l":"\n"},{"n":"p","x":"运行你自己的服务器将有许多权限且允许你运行该服务于你自己的防火墙内，但如此通常需要耗费你大量的时间去设置与维护服务器。\n如果你放置你的资料于托管服务器内，可轻易的设置与维护；无论如何，你必须能够保存你的代码在其他服务器，且某些组织不允许此作法。\n这将直截了当的决定哪个作法或组合的方式较适合你或你的组织。","l":"\n"}]}]}]}]},"ns_map":["http://www.w3.org/1999/xhtml","http://www.w3.org/XML/1998/namespace","http://www.idpf.org/2007/ops"]}