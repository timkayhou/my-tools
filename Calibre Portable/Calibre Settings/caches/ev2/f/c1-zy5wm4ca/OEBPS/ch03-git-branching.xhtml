{"version":1,"tree":{"n":"html","a":[["lang","zh",1],["lang","zh"]],"c":[{"n":"head","x":"\n\n","l":"\n","c":[{"n":"title","x":"Git 分支","l":"\n"},{"n":"link","l":"\n","a":[["rel","stylesheet"],["type","text/css"],["href","styles/epub3.css"]]},{"n":"link","l":"\n","a":[["rel","stylesheet"],["type","text/css"],["href","styles/epub3-css3-only.css"],["media","(min-device-width: 0px)"]]},{"n":"script","x":"\ndocument.addEventListener('DOMContentLoaded', function(event, reader) {\n  if (!(reader = navigator.epubReadingSystem)) {\n    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };\n    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;\n  }\n  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));\n});\n","l":"\n","a":[["type","text/javascript"]]}]},{"n":"body","x":"\n","l":"\n","c":[{"n":"section","x":"\n","l":"\n","a":[["class","chapter"],["title","Git 分支"],["type","chapter",2],["id","ch03-git-branching"]],"c":[{"n":"header","x":"\n","l":"\n","c":[{"n":"div","x":"\n","l":"\n","a":[["class","chapter-header"]],"c":[{"n":"h1","l":"\n","a":[["class","chapter-title"]],"c":[{"n":"small","a":[["class","subtitle"]],"c":[{"n":"b","x":"Git","l":" "},{"n":"b","x":"分支"}]}]}]}]},{"n":"p","x":"\n几乎所有的版本控制系统都以某种形式支持分支。\n使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。\n在很多版本控制系统中，这是一个略微低效的过程——常常需要完全创建一个源代码目录的副本。对于大项目来说，这样的过程会耗费很多时间。","l":"\n"},{"n":"p","x":"有人把 Git 的分支模型称为它的“必杀技特性”，也正因为这一特性，使得 Git 从众多版本控制系统中脱颖而出。\n为何 Git 的分支模型如此出众呢？\nGit 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。\n与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。\n理解和精通这一特性，你便会意识到 Git 是如此的强大而又独特，并且从此真正改变你的开发方式。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","分支简介"]],"c":[{"n":"h2","x":"分支简介","l":"\n","a":[["id","_git_branches_overview"]]},{"n":"p","x":"为了真正理解 Git 处理分支的方式，我们需要回顾一下 Git 是如何保存数据的。","l":"\n"},{"n":"p","x":"或许你还记得 ","l":"\n","c":[{"n":"a","x":"起步","l":" 的内容，\nGit 保存的不是文件的变化或者差异，而是一系列不同时刻的 ","a":[["id","xref--ch01-getting-started"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch01-getting-started.xhtml\", \"frag\": \"\"}"]]},{"n":"strong","x":"快照","l":" 。"}]},{"n":"p","x":"在进行提交操作时，Git 会保存一个提交对象（commit object）。\n知道了 Git 保存数据的方式，我们可以很自然的想到——该提交对象会包含一个指向暂存内容快照的指针。\n但不仅仅是这样，该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。\n首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，\n而由多个分支合并产生的提交对象有多个父对象，","l":"\n"},{"n":"p","x":"为了更加形象地说明，我们假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。\n暂存操作会为每一个文件计算校验和（使用我们在 ","l":"\n","c":[{"n":"a","x":"起步","l":"\n中提到的 SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中\n（Git 使用 ","a":[["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch01-getting-started.xhtml\", \"frag\": \"\"}"]]},{"n":"em","x":"blob","l":" 对象来保存它们），最终将校验和加入到暂存区域等待提交："}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git add README test.rb LICENSE\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git commit -m ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'The initial commit of my project'","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"当使用 ","l":"\n","c":[{"n":"code","x":"git commit","l":" 进行提交操作时，Git 会先计算每一个子目录（本例中只有项目根目录）的校验和，\n然后在 Git 仓库中这些校验和保存为树对象。随后，Git 便会创建一个提交对象，\n它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。\n如此一来，Git 就可以在需要的时候重现此次保存的快照。","a":[["class","literal"]]}]},{"n":"p","x":"现在，Git 仓库中有五个对象：三个 ","l":"\n","c":[{"n":"em","x":"blob","l":" 对象（保存着文件快照）、一个 "},{"n":"strong","x":"树","l":" 对象\n（记录着目录结构和 blob 对象索引）以及一个 "},{"n":"strong","x":"提交","l":" 对象（包含着指向前述树对象的指针和所有提交信息）。"}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/commit-and-tree.png"],["alt","首次提交对象及其树结构。"],["data-calibre-src","OEBPS/images/commit-and-tree.png"]]}]},{"n":"figcaption","x":"Figure 1. 首次提交对象及其树结构","l":"\n"}]},{"n":"p","x":"做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/commits-and-parents.png"],["alt","提交对象及其父对象。"],["data-calibre-src","OEBPS/images/commits-and-parents.png"]]}]},{"n":"figcaption","x":"Figure 2. 提交对象及其父对象","l":"\n"}]},{"n":"p","x":"Git 的分支，其实本质上仅仅是指向提交对象的可变指针。\nGit 的默认分支名字是 ","l":"\n","c":[{"n":"code","x":"master","l":"。\n在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支。\n","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支会在每次提交时自动向前移动。","a":[["class","literal"]]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note"],["type","note",2]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"Git 的 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支并不是一个特殊分支。\n它就跟其它分支完全没有区别。\n之所以几乎每一个仓库都有 master 分支，是因为 ","a":[["class","literal"]]},{"n":"code","x":"git init","l":" 命令默认创建它，并且大多数人都懒得去改动它。","a":[["class","literal"]]}]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/branch-and-history.png"],["alt","分支及其提交历史。"],["data-calibre-src","OEBPS/images/branch-and-history.png"]]}]},{"n":"figcaption","x":"Figure 3. 分支及其提交历史","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","分支创建"]],"c":[{"n":"h3","x":"分支创建","l":"\n","a":[["id","_create_new_branch"]]},{"n":"p","x":"\nGit 是怎么创建新分支的呢？\n很简单，它只是为你创建了一个可以移动的新的指针。\n比如，创建一个 testing 分支，\n你需要使用 ","l":"\n","c":[{"n":"code","x":"git branch","l":" 命令：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch testing","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这会在当前所在的提交对象上创建一个指针。","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/two-branches.png"],["alt","两个指向相同提交历史的分支。"],["data-calibre-src","OEBPS/images/two-branches.png"]]}]},{"n":"figcaption","x":"Figure 4. 两个指向相同提交历史的分支","l":"\n"}]},{"n":"p","x":"那么，Git 又是怎么知道当前在哪一个分支上呢？\n也很简单，它有一个名为 ","l":"\n","c":[{"n":"code","x":"HEAD","l":" 的特殊指针。\n请注意它和许多其它版本控制系统（如 Subversion 或 CVS）里的 ","a":[["class","literal"]]},{"n":"code","x":"HEAD","l":" 概念完全不同。\n在 Git 中，它是一个指针，指向当前所在的本地分支（译注：将 ","a":[["class","literal"]]},{"n":"code","x":"HEAD","l":" 想象为当前分支的别名）。\n在本例中，你仍然在 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支上。\n因为 ","a":[["class","literal"]]},{"n":"code","x":"git branch","l":" 命令仅仅 ","a":[["class","literal"]]},{"n":"strong","x":"创建","l":" 一个新分支，并不会自动切换到新分支中去。"}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/head-to-master.png"],["alt","HEAD 指向当前所在的分支。"],["data-calibre-src","OEBPS/images/head-to-master.png"]]}]},{"n":"figcaption","x":"Figure 5. HEAD 指向当前所在的分支","l":"\n"}]},{"n":"p","x":"你可以简单地使用 ","l":"\n","c":[{"n":"code","x":"git log","l":" 命令查看各个分支当前所指的对象。\n提供这一功能的参数是 ","a":[["class","literal"]]},{"n":"code","x":"--decorate","l":"。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git log --oneline --decorate\nf30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface\n34ac2 Fixed bug #1328 - stack overflow under certain conditions\n98ca9 The initial commit of my project","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"正如你所见，当前 ","l":"\n","c":[{"n":"code","x":"master","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"testing","l":" 分支均指向校验和以 ","a":[["class","literal"]]},{"n":"code","x":"f30ab","l":" 开头的提交对象。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","分支切换"]],"c":[{"n":"h3","x":"分支切换","l":"\n","a":[["id","_switching_branches"]]},{"n":"p","x":"\n要切换到一个已存在的分支，你需要使用 ","l":"\n","c":[{"n":"code","x":"git checkout","l":" 命令。\n我们现在切换到新创建的 ","a":[["class","literal"]]},{"n":"code","x":"testing","l":" 分支去：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout testing","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这样 ","l":"\n","c":[{"n":"code","x":"HEAD","l":" 就指向 ","a":[["class","literal"]]},{"n":"code","x":"testing","l":" 分支了。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/head-to-testing.png"],["alt","HEAD 指向当前所在的分支。"],["data-calibre-src","OEBPS/images/head-to-testing.png"]]}]},{"n":"figcaption","x":"Figure 6. HEAD 指向当前所在的分支","l":"\n"}]},{"n":"p","x":"那么，这样的实现方式会给我们带来什么好处呢？\n现在不妨再提交一次：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"vim test.rb\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git commit -a -m ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'made a change'","a":[["style","font-style: italic"]]}]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/advance-testing.png"],["alt","HEAD 分支随着提交操作自动向前移动。"],["data-calibre-src","OEBPS/images/advance-testing.png"]]}]},{"n":"figcaption","x":"Figure 7. HEAD 分支随着提交操作自动向前移动","l":"\n"}]},{"n":"p","x":"如图所示，你的 ","l":"\n","c":[{"n":"code","x":"testing","l":" 分支向前移动了，但是 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支却没有，它仍然指向运行 ","a":[["class","literal"]]},{"n":"code","x":"git checkout","l":" 时所指的对象。\n这就有意思了，现在我们切换回 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支看看：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout master","a":[["style","font-weight: bold"]]}]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/checkout-master.png"],["alt","检出时 HEAD 随之移动。"],["data-calibre-src","OEBPS/images/checkout-master.png"]]}]},{"n":"figcaption","x":"Figure 8. 检出时 HEAD 随之移动","l":"\n"}]},{"n":"p","x":"这条命令做了两件事。\n一是使 HEAD 指回 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支，二是将工作目录恢复成 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支所指向的快照内容。\n也就是说，你现在做修改的话，项目将始于一个较旧的版本。\n本质上来讲，这就是忽略 ","a":[["class","literal"]]},{"n":"code","x":"testing","l":" 分支所做的修改，以便于向另一个方向进行开发。","a":[["class","literal"]]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note: 分支切换会改变你工作目录中的文件"],["type","note",2]],"c":[{"n":"h2","x":"分支切换会改变你工作目录中的文件","l":"\n"},{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"在切换分支时，一定要注意你工作目录里的文件会被改变。\n如果是切换到一个较旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。\n如果 Git 不能干净利落地完成这个任务，它将禁止切换分支。","l":"\n"}]}]},{"n":"p","x":"我们不妨再稍微做些修改并提交：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"vim test.rb\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git commit -a -m ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'made other changes'","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"现在，这个项目的提交历史已经产生了分叉（参见 ","l":"\n","c":[{"n":"a","x":"项目分叉历史","l":"）。\n因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。\n上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。\n而所有这些工作，你需要的命令只有 ","a":[["id","xref-divergent_history"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"divergent_history\"}"]]},{"n":"code","x":"branch","l":"、","a":[["class","literal"]]},{"n":"code","x":"checkout","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"commit","l":"。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","divergent_history"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/advance-master.png"],["alt","项目分叉历史。"],["data-calibre-src","OEBPS/images/advance-master.png"]]}]},{"n":"figcaption","x":"Figure 9. 项目分叉历史","l":"\n"}]},{"n":"p","x":"你可以简单地使用 ","l":"\n","c":[{"n":"code","x":"git log","l":" 命令查看分叉历史。\n运行 ","a":[["class","literal"]]},{"n":"code","x":"git log --oneline --decorate --graph --all","l":" ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git log --oneline --decorate --graph --all\n* c2b9e (HEAD, master) made other changes\n| * 87ab2 (testing) made a change\n|/\n* f30ab add feature #32 - ability to add new formats to the\n* 34ac2 fixed bug #1328 - stack overflow under certain conditions\n* 98ca9 initial commit of my project","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。\n创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？","l":"\n"},{"n":"p","x":"这与过去大多数版本控制系统形成了鲜明的对比，它们在创建分支时，将所有的项目文件都复制一遍，并保存到一个特定的目录。\n完成这样繁琐的过程通常需要好几秒钟，有时甚至需要好几分钟。所需时间的长短，完全取决于项目的规模。\n而在 Git 中，任何规模的项目都能在瞬间创建新分支。\n同时，由于每次提交都会记录父对象，所以寻找恰当的合并基础（译注：即共同祖先）也是同样的简单和高效。\n这些高效的特性使得 Git 鼓励开发人员频繁地创建和使用分支。","l":"\n"},{"n":"p","x":"接下来，让我们看看你为什么应该这样做。","l":"\n"},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note: 创建新分支的同时切换过去"],["type","note",2]],"c":[{"n":"h2","x":"创建新分支的同时切换过去","l":"\n"},{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"通常我们会在创建一个新分支后立即切换过去，这可以用 ","l":"\n","c":[{"n":"code","x":"git checkout -b <newbranchname>","l":" 一条命令搞定。","a":[["class","literal"]]}]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","分支的新建与合并"]],"c":[{"n":"h2","x":"分支的新建与合并","l":"\n","a":[["id","_分支的新建与合并"]]},{"n":"p","x":"让我们来看一个简单的分支新建与分支合并的例子，实际工作中你可能会用到类似的工作流。\n你将经历如下步骤：","l":"\n"},{"n":"div","x":"\n","l":"\n","a":[["class","ordered-list arabic"]],"c":[{"n":"ol","x":"\n","l":"\n","a":[["class","arabic"]],"c":[{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"开发某个网站。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"为实现某个新的用户需求，创建一个分支。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"在这个分支上开展工作。","l":"\n","a":[["class","principal"]]}]}]}]},{"n":"p","x":"正在此时，你突然接到一个电话说有个很严重的问题需要紧急修补。\n你将按照如下方式来处理：","l":"\n"},{"n":"div","x":"\n","l":"\n","a":[["class","ordered-list arabic"]],"c":[{"n":"ol","x":"\n","l":"\n","a":[["class","arabic"]],"c":[{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"切换到你的线上分支（production branch）。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"为这个紧急任务新建一个分支，并在其中修复它。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"切换回你最初工作的分支上，继续工作。","l":"\n","a":[["class","principal"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","新建分支"]],"c":[{"n":"h3","x":"新建分支","l":"\n","a":[["id","_basic_branching"]]},{"n":"p","x":"\n首先，我们假设你正在你的项目上工作，并且在 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支上已经有了一些提交。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/basic-branching-1.png"],["alt","一个简单的提交历史。"],["data-calibre-src","OEBPS/images/basic-branching-1.png"]]}]},{"n":"figcaption","x":"Figure 10. 一个简单提交历史","l":"\n"}]},{"n":"p","x":"现在，你已经决定要解决你的公司使用的问题追踪系统中的 #53 问题。\n想要新建一个分支并同时切换到那个分支上，你可以运行一个带有 ","l":"\n","c":[{"n":"code","x":"-b","l":" 参数的 ","a":[["class","literal"]]},{"n":"code","x":"git checkout","l":" 命令：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout -b iss53\nSwitched to a new branch \"iss53\"","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"它是下面两条命令的简写：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch iss53\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git checkout iss53","a":[["style","font-weight: bold"]]}]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/basic-branching-2.png"],["alt","创建一个新分支指针。"],["data-calibre-src","OEBPS/images/basic-branching-2.png"]]}]},{"n":"figcaption","x":"Figure 11. 创建一个新分支指针","l":"\n"}]},{"n":"p","x":"你继续在 #53 问题上工作，并且做了一些提交。\n在此过程中，","l":"\n","c":[{"n":"code","x":"iss53","l":" 分支在不断的向前推进，因为你已经检出到该分支\n（也就是说，你的 ","a":[["class","literal"]]},{"n":"code","x":"HEAD","l":" 指针指向了 ","a":[["class","literal"]]},{"n":"code","x":"iss53","l":" 分支）","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"vim index.html\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git commit -a -m ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'added a new footer [issue 53]'","a":[["style","font-style: italic"]]}]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/basic-branching-3.png"],["alt","`iss53` 分支随着工作的进展向前推进。"],["data-calibre-src","OEBPS/images/basic-branching-3.png"]]}]},{"n":"figcaption","x":"Figure 12. ","l":"\n","c":[{"n":"code","x":"iss53","l":" 分支随着工作的进展向前推进","a":[["class","literal"]]}]}]},{"n":"p","x":"现在你接到那个电话，有个紧急问题等待你来解决。\n有了 Git 的帮助，你不必把这个紧急问题和 ","l":"\n","c":[{"n":"code","x":"iss53","l":" 的修改混在一起，\n你也不需要花大力气来还原关于 53# 问题的修改，然后再添加关于这个紧急问题的修改，最后将这个修改提交到线上分支。\n你所要做的仅仅是切换回 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支。","a":[["class","literal"]]}]},{"n":"p","x":"但是，在你这么做之前，要留意你的工作目录和暂存区里那些还没有被提交的修改，\n它可能会和你即将检出的分支产生冲突从而阻止 Git 切换到该分支。\n最好的方法是，在你切换分支之前，保持好一个干净的状态。\n有一些方法可以绕过这个问题（即，暂存（stashing） 和 修补提交（commit amending）），\n我们会在 ","l":"\n","c":[{"n":"a","x":"贮藏与清理","l":" 中看到关于这两个命令的介绍。\n现在，我们假设你已经把你的修改全部提交了，这时你可以切换回 ","a":[["id","xref--ch07-git-tools--_git_stashing"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_git_stashing\"}"]]},{"n":"code","x":"master","l":" 分支了：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout master\nSwitched to branch 'master'","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这个时候，你的工作目录和你在开始 #53 问题之前一模一样，现在你可以专心修复紧急问题了。\n请牢记：当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。\nGit 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样。","l":"\n"},{"n":"p","x":"接下来，你要修复这个紧急问题。\n我们来建立一个 ","l":"\n","c":[{"n":"code","x":"hotfix","l":" 分支，在该分支上工作直到问题解决：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout -b hotfix\nSwitched to a new branch 'hotfix'\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"vim index.html\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git commit -a -m ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'fixed the broken email address'","l":"\n[hotfix 1fb7853] fixed the broken email address\n 1 file changed, 2 insertions(+)","a":[["style","font-style: italic"]]}]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/basic-branching-4.png"],["alt","基于 `master` 分支的紧急问题分支（hotfix branch）。"],["data-calibre-src","OEBPS/images/basic-branching-4.png"]]}]},{"n":"figcaption","x":"Figure 13. 基于 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支的紧急问题分支 ","a":[["class","literal"]]},{"n":"code","x":"hotfix branch","a":[["class","literal"]]}]}]},{"n":"p","x":"你可以运行你的测试，确保你的修改是正确的，然后将 ","l":"\n","c":[{"n":"code","x":"hotfix","l":" 分支合并回你的 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支来部署到线上。\n你可以使用 ","a":[["class","literal"]]},{"n":"code","x":"git merge","l":" 命令来达到上述目的：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout master\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git merge hotfix\nUpdating f42c576..3a0874c\nFast-forward\n index.html | 2 ++\n 1 file changed, 2 insertions(+)","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"在合并的时候，你应该注意到了“快进（fast-forward）”这个词。\n由于你想要合并的分支 ","l":"\n","c":[{"n":"code","x":"hotfix","l":" 所指向的提交 ","a":[["class","literal"]]},{"n":"code","x":"C4","l":" 是你所在的提交 ","a":[["class","literal"]]},{"n":"code","x":"C2","l":" 的直接后继，\n因此 Git 会直接将指针向前移动。换句话说，当你试图合并两个分支时，\n如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候，\n只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做 “快进（fast-forward）”。","a":[["class","literal"]]}]},{"n":"p","x":"现在，最新的修改已经在 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支所指向的提交快照中，你可以着手发布该修复了。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/basic-branching-5.png"],["alt","`master` 被快进到 `hotfix`。"],["data-calibre-src","OEBPS/images/basic-branching-5.png"]]}]},{"n":"figcaption","x":"Figure 14. ","l":"\n","c":[{"n":"code","x":"master","l":" 被快进到 ","a":[["class","literal"]]},{"n":"code","x":"hotfix","a":[["class","literal"]]}]}]},{"n":"p","x":"关于这个紧急问题的解决方案发布之后，你准备回到被打断之前时的工作中。\n然而，你应该先删除 ","l":"\n","c":[{"n":"code","x":"hotfix","l":" 分支，因为你已经不再需要它了 —— ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支已经指向了同一个位置。\n你可以使用带 ","a":[["class","literal"]]},{"n":"code","x":"-d","l":" 选项的 ","a":[["class","literal"]]},{"n":"code","x":"git branch","l":" 命令来删除分支：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch -d hotfix\nDeleted branch hotfix (3a0874c).","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"现在你可以切换回你正在工作的分支继续你的工作，也就是针对 #53 问题的那个分支（iss53 分支）。","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout iss53\nSwitched to branch \"iss53\"\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"vim index.html\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git commit -a -m ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'finished the new footer [issue 53]'","l":"\n[iss53 ad82d7a] finished the new footer [issue 53]\n1 file changed, 1 insertion(+)","a":[["style","font-style: italic"]]}]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/basic-branching-6.png"],["alt","继续在 `iss53` 分支上的工作。"],["data-calibre-src","OEBPS/images/basic-branching-6.png"]]}]},{"n":"figcaption","x":"Figure 15. 继续在 ","l":"\n","c":[{"n":"code","x":"iss53","l":" 分支上的工作","a":[["class","literal"]]}]}]},{"n":"p","x":"你在 ","l":"\n","c":[{"n":"code","x":"hotfix","l":" 分支上所做的工作并没有包含到 ","a":[["class","literal"]]},{"n":"code","x":"iss53","l":" 分支中。\n如果你需要拉取 ","a":[["class","literal"]]},{"n":"code","x":"hotfix","l":" 所做的修改，你可以使用 ","a":[["class","literal"]]},{"n":"code","x":"git merge master","l":" 命令将 ","a":[["class","literal"]]},{"n":"code","x":"master","l":"\n分支合并入 ","a":[["class","literal"]]},{"n":"code","x":"iss53","l":" 分支，或者你也可以等到 ","a":[["class","literal"]]},{"n":"code","x":"iss53","l":" 分支完成其使命，再将其合并回 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","分支的合并"]],"c":[{"n":"h3","x":"分支的合并","l":"\n","a":[["id","_basic_merging"]]},{"n":"p","x":"\n假设你已经修正了 #53 问题，并且打算将你的工作合并入 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支。\n为此，你需要合并 ","a":[["class","literal"]]},{"n":"code","x":"iss53","l":" 分支到 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支，这和之前你合并 ","a":[["class","literal"]]},{"n":"code","x":"hotfix","l":" 分支所做的工作差不多。\n你只需要检出到你想合并入的分支，然后运行 ","a":[["class","literal"]]},{"n":"code","x":"git merge","l":" 命令：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout master\nSwitched to branch 'master'\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git merge iss53\nMerge made by the 'recursive' strategy.\nindex.html |    1 +\n1 file changed, 1 insertion(+)","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这和你之前合并 ","l":"\n","c":[{"n":"code","x":"hotfix","l":" 分支的时候看起来有一点不一样。\n在这种情况下，你的开发历史从一个更早的地方开始分叉开来（diverged）。\n因为，","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支所在提交并不是 ","a":[["class","literal"]]},{"n":"code","x":"iss53","l":" 分支所在提交的直接祖先，Git 不得不做一些额外的工作。\n出现这种情况的时候，Git 会使用两个分支的末端所指的快照（","a":[["class","literal"]]},{"n":"code","x":"C4","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"C5","l":"）以及这两个分支的公共祖先（","a":[["class","literal"]]},{"n":"code","x":"C2","l":"），做一个简单的三方合并。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/basic-merging-1.png"],["alt","一次典型合并中所用到的三个快照。"],["data-calibre-src","OEBPS/images/basic-merging-1.png"]]}]},{"n":"figcaption","x":"Figure 16. 一次典型合并中所用到的三个快照","l":"\n"}]},{"n":"p","x":"和之前将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。\n这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/basic-merging-2.png"],["alt","一个合并提交。"],["data-calibre-src","OEBPS/images/basic-merging-2.png"]]}]},{"n":"figcaption","x":"Figure 17. 一个合并提交","l":"\n"}]},{"n":"p","x":"既然你的修改已经合并进来了，就不再需要 ","l":"\n","c":[{"n":"code","x":"iss53","l":" 分支了。\n现在你可以在任务追踪系统中关闭此项任务，并删除这个分支。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch -d iss53","a":[["style","font-weight: bold"]]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","遇到冲突时的分支合并"]],"c":[{"n":"h3","x":"遇到冲突时的分支合并","l":"\n","a":[["id","_basic_merge_conflicts"]]},{"n":"p","x":"\n有时候合并操作不会如此顺利。\n如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。\n如果你对 #53 问题的修改和有关 ","l":"\n","c":[{"n":"code","x":"hotfix","l":" 分支的修改都涉及到同一个文件的同一处，在合并它们的时候就会产生合并冲突：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git merge iss53\nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"此时 Git 做了合并，但是没有自动地创建一个新的合并提交。\nGit 会暂停下来，等待你去解决合并产生的冲突。\n你可以在合并冲突后的任意时刻使用 ","l":"\n","c":[{"n":"code","x":"git status","l":" 命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git status\nOn branch master\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\n    both modified:      index.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。\nGit 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。\n出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-html"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"<<<<<<","l":"< ","a":[["style","border: 1px solid #FF0000"]]},{"n":"span","x":"HEAD:index.html","l":"\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"<","l":"div id=","a":[["style","border: 1px solid #FF0000"]]},{"n":"span","x":"\"footer\"","l":">contact : email.support@github.com</","a":[["style","font-style: italic"]]},{"n":"span","x":"div","l":">\n=======\n<","a":[["style","font-weight: bold"]]},{"n":"span","x":"div","l":" id=","a":[["style","font-weight: bold"]]},{"n":"span","x":"\"footer\"","l":">\n please contact us at support@github.com\n</","a":[["style","font-style: italic"]]},{"n":"span","x":"div","l":">\n>>>>>>> iss53:index.html","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这表示 ","l":"\n","c":[{"n":"code","x":"HEAD","l":" 所指示的版本（也就是你的 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支所在的位置，因为你在运行 merge 命令的时候已经检出到了这个分支）在这个区段的上半部分（","a":[["class","literal"]]},{"n":"code","x":"=======","l":" 的上半部分），而 ","a":[["class","literal"]]},{"n":"code","x":"iss53","l":" 分支所指示的版本在 ","a":[["class","literal"]]},{"n":"code","x":"=======","l":" 的下半部分。\n为了解决冲突，你必须选择使用由 ","a":[["class","literal"]]},{"n":"code","x":"=======","l":" 分割的两部分中的一个，或者你也可以自行合并这些内容。\n例如，你可以通过把这段内容换成下面的样子来解决冲突：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-html"]],"c":[{"n":"code","c":[{"n":"span","l":"<"},{"n":"span","x":"div","l":" id=","a":[["style","font-weight: bold"]]},{"n":"span","x":"\"footer\"","l":">\nplease contact us at email.support@github.com\n</","a":[["style","font-style: italic"]]},{"n":"span","x":"div","l":">","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"上述的冲突解决方案仅保留了其中一个分支的修改，并且 ","l":"\n","c":[{"n":"code","x":"<<<<<<<","l":" , ","a":[["class","literal"]]},{"n":"code","x":"=======","l":" , 和 ","a":[["class","literal"]]},{"n":"code","x":">>>>>>>","l":" 这些行被完全删除了。\n在你解决了所有文件里的冲突之后，对每个文件使用 ","a":[["class","literal"]]},{"n":"code","x":"git add","l":" 命令来将其标记为冲突已解决。\n一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。","a":[["class","literal"]]}]},{"n":"p","x":"如果你想使用图形化工具来解决冲突，你可以运行 ","l":"\n","c":[{"n":"code","x":"git mergetool","l":"，该命令会为你启动一个合适的可视化合并工具，并带领你一步一步解决这些冲突：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git mergetool\n\nThis message is displayed because 'merge.tool' is not configured.\nSee 'git mergetool --tool-help' or 'git help config' for more details.\n'git mergetool' will now attempt to use one of the following tools:\nopendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge\nMerging:\nindex.html\n\nNormal merge conflict for 'index.html':\n  {local}: modified file\n  {remote}: modified file\nHit return to start merge resolution tool (opendiff):","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果你想使用除默认工具（在这里 Git 使用 ","l":"\n","c":[{"n":"code","x":"opendiff","l":" 做为默认的合并工具，因为作者在 Mac 上运行该程序）\n外的其他合并工具，你可以在 “下列工具中（one of the following tools）” 这句后面看到所有支持的合并工具。\n然后输入你喜欢的工具名字就可以了。","a":[["class","literal"]]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note"],["type","note",2]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"如果你需要更加高级的工具来解决复杂的合并冲突，我们会在 ","l":"\n","c":[{"n":"a","x":"高级合并","l":" 介绍更多关于分支合并的内容。","a":[["id","xref--ch07-git-tools--_advanced_merging"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_advanced_merging\"}"]]}]}]}]},{"n":"p","x":"等你退出合并工具之后，Git 会询问刚才的合并是否成功。\n如果你回答是，Git 会暂存那些文件以表明冲突已解决：\n你可以再次运行 ","l":"\n","c":[{"n":"code","x":"git status","l":" 来确认所有的合并冲突都已被解决：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git status\nOn branch master\nAll conflicts fixed but you are still merging.\n  (use \"git commit\" to conclude merge)\n\nChanges to be committed:\n\n    modified:   index.html","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 ","l":"\n","c":[{"n":"code","x":"git commit","l":" 来完成合并提交。\n默认情况下提交信息看起来像下面这个样子：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":"Merge branch 'iss53'\n\nConflicts:\n    index.html\n"},{"n":"span","x":"#","l":"\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"# ","l":"It looks like you may be committing a merge.\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"# ","l":"If this is not correct, please remove the file\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"#\t","l":".git/MERGE_HEAD\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"# ","l":"and try again.\n\n\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"# ","l":"Please enter the commit message ","a":[["style","font-weight: bold"]]},{"n":"span","x":"for","l":" your changes. Lines starting\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"# ","l":"with ","a":[["style","font-weight: bold"]]},{"n":"span","x":"'#'","l":" will be ignored, and an empty message aborts the commit.\n","a":[["style","font-style: italic"]]},{"n":"span","x":"# ","l":"On branch master\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"# ","l":"All conflicts fixed but you are still merging.\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"#","l":"\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"# ","l":"Changes to be committed:\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"#\t","l":"modified:   index.html\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"#","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果你觉得上述的信息不够充分，不能完全体现分支合并的过程，你可以修改上述信息，\n添加一些细节给未来检视这个合并的读者一些帮助，告诉他们你是如何解决合并冲突的，以及理由是什么。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","分支管理"]],"c":[{"n":"h2","x":"分支管理","l":"\n","a":[["id","_branch_management"]]},{"n":"p","x":"\n现在已经创建、合并、删除了一些分支，让我们看看一些常用的分支管理工具。","l":"\n"},{"n":"p","l":"\n","c":[{"n":"code","x":"git branch","l":" 命令不只是可以创建与删除分支。\n如果不加任何参数运行它，会得到当前所有分支的一个列表：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch\n  iss53\n* master\n  testing","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"注意 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支前的 ","a":[["class","literal"]]},{"n":"code","x":"*","l":" 字符：它代表现在检出的那一个分支（也就是说，当前 ","a":[["class","literal"]]},{"n":"code","x":"HEAD","l":" 指针所指向的分支）。\n这意味着如果在这时候提交，","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支将会随着新的工作向前移动。\n如果需要查看每一个分支的最后一次提交，可以运行 ","a":[["class","literal"]]},{"n":"code","x":"git branch -v","l":" 命令：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch -v\n  iss53   93b412c fix javascript issue\n* master  7a98805 Merge branch 'iss53'\n  testing 782fd34 add scott to the author list in the readmes","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","l":"\n","c":[{"n":"code","x":"--merged","l":" 与 ","a":[["class","literal"]]},{"n":"code","x":"--no-merged","l":" 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。\n如果要查看哪些分支已经合并到当前分支，可以运行 ","a":[["class","literal"]]},{"n":"code","x":"git branch --merged","l":"：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch --merged\n  iss53\n* master","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"因为之前已经合并了 ","l":"\n","c":[{"n":"code","x":"iss53","l":" 分支，所以现在看到它在列表中。\n在这个列表中分支名字前没有 ","a":[["class","literal"]]},{"n":"code","x":"*","l":" 号的分支通常可以使用 ","a":[["class","literal"]]},{"n":"code","x":"git branch -d","l":" 删除掉；你已经将它们的工作整合到了另一个分支，所以并不会失去任何东西。","a":[["class","literal"]]}]},{"n":"p","x":"查看所有包含未合并工作的分支，可以运行 ","l":"\n","c":[{"n":"code","x":"git branch --no-merged","l":"：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch --no-merged\n  testing","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这里显示了其他分支。\n因为它包含了还未合并的工作，尝试使用 ","l":"\n","c":[{"n":"code","x":"git branch -d","l":" 命令删除它时会失败：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch -d testing\nerror: The branch 'testing' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D testing'.","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果真的想要删除分支并丢掉那些工作，如同帮助信息里所指出的，可以使用 ","l":"\n","c":[{"n":"code","x":"-D","l":" 选项强制删除它。","a":[["class","literal"]]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition tip"],["title","Tip"],["type","help",2]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"上面描述的选项 ","l":"\n","c":[{"n":"code","x":"--merged","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"--no-merged","l":" 会在没有给定提交或分支名作为参数时，\n分别列出已合并或未合并到 ","a":[["class","literal"]]},{"n":"strong","x":"当前","l":" 分支的分支。"}]},{"n":"p","x":"你总是可以提供一个附加的参数来查看其它分支的合并状态而不必检出它们。\n例如，尚未合并到 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支的有哪些？","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout testing\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git branch --no-merged master\n  topicA\n  featureB","a":[["style","font-weight: bold"]]}]}]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","分支开发工作流"]],"c":[{"n":"h2","x":"分支开发工作流","l":"\n","a":[["id","_分支开发工作流"]]},{"n":"p","x":"现在你已经学会新建和合并分支，那么你可以或者应该用它来做些什么呢？\n在本节，我们会介绍一些常见的利用分支进行开发的工作流程。而正是由于分支管理的便捷，\n才衍生出这些典型的工作模式，你可以根据项目实际情况选择一种用用看。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","长期分支"]],"c":[{"n":"h3","x":"长期分支","l":"\n","a":[["id","_长期分支"]]},{"n":"p","x":"\n因为 Git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，也不是什么难事。\n也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支；你可以定期地把某些主题分支合并入其他分支中。","l":"\n"},{"n":"p","x":"许多使用 Git 的开发者都喜欢使用这种方式来工作，比如只在 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支上保留完全稳定的代码——有可能仅仅是已经发布或即将发布的代码。\n他们还有一些名为 ","a":[["class","literal"]]},{"n":"code","x":"develop","l":" 或者 ","a":[["class","literal"]]},{"n":"code","x":"next","l":" 的平行分支，被用来做后续开发或者测试稳定性——这些分支不必保持绝对稳定，但是一旦达到稳定状态，它们就可以被合并入 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支了。\n这样，在确保这些已完成的主题分支（短期分支，比如之前的 ","a":[["class","literal"]]},{"n":"code","x":"iss53","l":" 分支）能够通过所有测试，并且不会引入更多 bug 之后，就可以合并入主干分支中，等待下一次的发布。","a":[["class","literal"]]}]},{"n":"p","x":"事实上我们刚才讨论的，是随着你的提交而不断右移的指针。\n稳定分支的指针总是在提交历史中落后一大截，而前沿分支的指针往往比较靠前。","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/lr-branches-1.png"],["alt","趋于稳定分支的线性图。"],["data-calibre-src","OEBPS/images/lr-branches-1.png"]]}]},{"n":"figcaption","x":"Figure 18. 趋于稳定分支的线性图","l":"\n"}]},{"n":"p","x":"通常把他们想象成流水线（work silos）可能更好理解一点，那些经过测试考验的提交会被遴选到更加稳定的流水线上去。","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["id","lrbranch_b"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/lr-branches-2.png"],["alt","趋于稳定分支的工作流（“silo”）视图。"],["data-calibre-src","OEBPS/images/lr-branches-2.png"]]}]},{"n":"figcaption","x":"Figure 19. 趋于稳定分支的流水线（“silo”）视图","l":"\n"}]},{"n":"p","x":"你可以用这种方法维护不同层次的稳定性。\n一些大型项目还有一个 ","l":"\n","c":[{"n":"code","x":"proposed","l":"（建议） 或 ","a":[["class","literal"]]},{"n":"code","x":"pu: proposed updates","l":"（建议更新）分支，它可能因包含一些不成熟的内容而不能进入 ","a":[["class","literal"]]},{"n":"code","x":"next","l":" 或者 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支。\n这么做的目的是使你的分支具有不同级别的稳定性；当它们具有一定程度的稳定性后，再把它们合并入具有更高级别稳定性的分支中。\n再次强调一下，使用多个长期分支的方法并非必要，但是这么做通常很有帮助，尤其是当你在一个非常庞大或者复杂的项目中工作时。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","主题分支"]],"c":[{"n":"h3","x":"主题分支","l":"\n","a":[["id","_topic_branch"]]},{"n":"p","x":"\n主题分支对任何规模的项目都适用。\n主题分支是一种短期分支，它被用来实现单一特性或其相关工作。\n也许你从来没有在其他的版本控制系统（","l":"\n","c":[{"n":"code","x":"VCS","l":"）上这么做过，因为在那些版本控制系统中创建和合并分支通常很费劲。\n然而，在 Git 中一天之内多次创建、使用、合并、删除分支都很常见。","a":[["class","literal"]]}]},{"n":"p","x":"你已经在上一节中你创建的 ","l":"\n","c":[{"n":"code","x":"iss53","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"hotfix","l":" 主题分支中看到过这种用法。\n你在上一节用到的主题分支（","a":[["class","literal"]]},{"n":"code","x":"iss53","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"hotfix","l":" 分支）中提交了一些更新，并且在它们合并入主干分支之后，你又删除了它们。\n这项技术能使你快速并且完整地进行上下文切换（context-switch）——因为你的工作被分散到不同的流水线中，在不同的流水线中每个分支都仅与其目标特性相关，因此，在做代码审查之类的工作的时候就能更加容易地看出你做了哪些改动。\n你可以把做出的改动在主题分支中保留几分钟、几天甚至几个月，等它们成熟之后再合并，而不用在乎它们建立的顺序或工作进度。","a":[["class","literal"]]}]},{"n":"p","x":"考虑这样一个例子，你在 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支上工作到 ","a":[["class","literal"]]},{"n":"code","x":"C1","l":"，这时为了解决一个问题而新建 ","a":[["class","literal"]]},{"n":"code","x":"iss91","l":" 分支，在 ","a":[["class","literal"]]},{"n":"code","x":"iss91","l":" 分支上工作到 ","a":[["class","literal"]]},{"n":"code","x":"C4","l":"，然而对于那个问题你又有了新的想法，于是你再新建一个 ","a":[["class","literal"]]},{"n":"code","x":"iss91v2","l":" 分支试图用另一种方法解决那个问题，接着你回到 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支工作了一会儿，你又冒出了一个不太确定的想法，你便在 ","a":[["class","literal"]]},{"n":"code","x":"C10","l":" 的时候新建一个 ","a":[["class","literal"]]},{"n":"code","x":"dumbidea","l":" 分支，并在上面做些实验。\n你的提交历史看起来像下面这个样子：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/topic-branches-1.png"],["alt","拥有多个主题分支的提交历史。"],["data-calibre-src","OEBPS/images/topic-branches-1.png"]]}]},{"n":"figcaption","x":"Figure 20. 拥有多个主题分支的提交历史","l":"\n"}]},{"n":"p","x":"现在，我们假设两件事情：你决定使用第二个方案来解决那个问题，即使用在 ","l":"\n","c":[{"n":"code","x":"iss91v2","l":" 分支中方案。\n另外，你将 ","a":[["class","literal"]]},{"n":"code","x":"dumbidea","l":" 分支拿给你的同事看过之后，结果发现这是个惊人之举。\n这时你可以抛弃 ","a":[["class","literal"]]},{"n":"code","x":"iss91","l":" 分支（即丢弃 ","a":[["class","literal"]]},{"n":"code","x":"C5","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"C6","l":" 提交），然后把另外两个分支合并入主干分支。\n最终你的提交历史看起来像下面这个样子：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/topic-branches-2.png"],["alt","合并了 `dumbidea` 和 `iss91v2` 分支之后的提交历史。"],["data-calibre-src","OEBPS/images/topic-branches-2.png"]]}]},{"n":"figcaption","x":"Figure 21. 合并了 ","l":"\n","c":[{"n":"code","x":"dumbidea","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"iss91v2","l":" 分支之后的提交历史","a":[["class","literal"]]}]}]},{"n":"p","x":"我们将会在 ","l":"\n","c":[{"n":"a","x":"分布式 Git","l":" 中向你揭示更多有关分支工作流的细节，\n因此，请确保你阅读完那个章节之后，再来决定你的下个项目要使用什么样的分支策略（branching scheme）。","a":[["id","xref--ch05-distributed-git"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"\"}"]]}]},{"n":"p","x":"请牢记，当你做这么多操作的时候，这些分支全部都存于本地。\n当你新建和合并分支的时候，所有这一切都只发生在你本地的 Git 版本库中 —— 没有与服务器发生交互。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","远程分支"]],"c":[{"n":"h2","x":"远程分支","l":"\n","a":[["id","_remote_branches"]]},{"n":"p","x":"\n远程引用是对远程仓库的引用（指针），包括分支、标签等等。\n你可以通过 ","l":"\n","c":[{"n":"code","x":"git ls-remote <remote>","l":" 来显式地获得远程引用的完整列表，\n或者通过 ","a":[["class","literal"]]},{"n":"code","x":"git remote show <remote>","l":" 获得远程分支的更多信息。\n然而，一个更常见的做法是利用远程跟踪分支。","a":[["class","literal"]]}]},{"n":"p","x":"远程跟踪分支是远程分支状态的引用。它们是你无法移动的本地引用。一旦你进行了网络通信，\nGit 就会为你移动它们以精确反映远程仓库的状态。请将它们看做书签，\n这样可以提醒你该分支在远程仓库中的位置就是你最后一次连接到它们的位置。","l":"\n"},{"n":"p","x":"它们以 ","l":"\n","c":[{"n":"code","x":"<remote>/<branch>","l":" 的形式命名。\n例如，如果你想要看你最后一次与远程仓库 ","a":[["class","literal"]]},{"n":"code","x":"origin","l":" 通信时 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支的状态，你可以查看 ","a":[["class","literal"]]},{"n":"code","x":"origin/master","l":" 分支。\n你与同事合作解决一个问题并且他们推送了一个 ","a":[["class","literal"]]},{"n":"code","x":"iss53","l":" 分支，你可能有自己的本地 ","a":[["class","literal"]]},{"n":"code","x":"iss53","l":" 分支，\n然而在服务器上的分支会以 ","a":[["class","literal"]]},{"n":"code","x":"origin/iss53","l":" 来表示。","a":[["class","literal"]]}]},{"n":"p","x":"这可能有一点儿难以理解，让我们来看一个例子。\n假设你的网络里有一个在 ","l":"\n","c":[{"n":"code","x":"git.ourcompany.com","l":" 的 Git 服务器。\n如果你从这里克隆，Git 的 ","a":[["class","literal"]]},{"n":"code","x":"clone","l":" 命令会为你自动将其命名为 ","a":[["class","literal"]]},{"n":"code","x":"origin","l":"，拉取它的所有数据，\n创建一个指向它的 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支的指针，并且在本地将其命名为 ","a":[["class","literal"]]},{"n":"code","x":"origin/master","l":"。\nGit 也会给你一个与 origin 的 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支在指向同一个地方的本地 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支，这样你就有工作的基础。","a":[["class","literal"]]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note: “origin” 并无特殊含义"],["type","note",2]],"c":[{"n":"h2","x":"“origin” 并无特殊含义","l":"\n"},{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。\n同时 “master” 是当你运行 ","l":"\n","c":[{"n":"code","x":"git init","l":" 时默认的起始分支名字，原因仅仅是它的广泛使用，\n“origin” 是当你运行 ","a":[["class","literal"]]},{"n":"code","x":"git clone","l":" 时默认的远程仓库名字。\n如果你运行 ","a":[["class","literal"]]},{"n":"code","x":"git clone -o booyah","l":"，那么你默认的远程分支名字将会是 ","a":[["class","literal"]]},{"n":"code","x":"booyah/master","l":"。","a":[["class","literal"]]}]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/remote-branches-1.png"],["alt","克隆之后的服务器与本地仓库。"],["data-calibre-src","OEBPS/images/remote-branches-1.png"]]}]},{"n":"figcaption","x":"Figure 22. 克隆之后的服务器与本地仓库","l":"\n"}]},{"n":"p","x":"如果你在本地的 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支做了一些工作，在同一段时间内有其他人推送提交到\n","a":[["class","literal"]]},{"n":"code","x":"git.ourcompany.com","l":" 并且更新了它的 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支，这就是说你们的提交历史已走向不同的方向。\n即便这样，只要你保持不与 ","a":[["class","literal"]]},{"n":"code","x":"origin","l":" 服务器连接（并拉取数据），你的 ","a":[["class","literal"]]},{"n":"code","x":"origin/master","l":" 指针就不会移动。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/remote-branches-2.png"],["alt","本地与远程的工作可以分叉。"],["data-calibre-src","OEBPS/images/remote-branches-2.png"]]}]},{"n":"figcaption","x":"Figure 23. 本地与远程的工作可以分叉","l":"\n"}]},{"n":"p","x":"如果要与给定的远程仓库同步数据，运行 ","l":"\n","c":[{"n":"code","x":"git fetch <remote>","l":" 命令（在本例中为 ","a":[["class","literal"]]},{"n":"code","x":"git fetch origin","l":"）。\n这个命令查找 “origin” 是哪一个服务器（在本例中，它是 ","a":[["class","literal"]]},{"n":"code","x":"git.ourcompany.com","l":"），\n从中抓取本地没有的数据，并且更新本地数据库，移动 ","a":[["class","literal"]]},{"n":"code","x":"origin/master","l":" 指针到更新之后的位置。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/remote-branches-3.png"],["alt","`git fetch` 更新你的远程仓库引用。"],["data-calibre-src","OEBPS/images/remote-branches-3.png"]]}]},{"n":"figcaption","x":"Figure 24. ","l":"\n","c":[{"n":"code","x":"git fetch","l":" 更新你的远程跟踪分支","a":[["class","literal"]]}]}]},{"n":"p","x":"为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 Git 服务器，仅服务于你的某个敏捷开发团队。\n这个服务器位于 ","l":"\n","c":[{"n":"code","x":"git.team1.ourcompany.com","l":"。\n你可以运行 ","a":[["class","literal"]]},{"n":"code","x":"git remote add","l":" 命令添加一个新的远程仓库引用到当前的项目，这个命令我们会在\n","a":[["class","literal"]]},{"n":"a","x":"Git 基础","l":" 中详细说明。\n将这个远程仓库命名为 ","a":[["id","xref--ch02-git-basics-chapter"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch02-git-basics-chapter.xhtml\", \"frag\": \"\"}"]]},{"n":"code","x":"teamone","l":"，将其作为完整 URL 的缩写。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/remote-branches-4.png"],["alt","添加另一个远程仓库。"],["data-calibre-src","OEBPS/images/remote-branches-4.png"]]}]},{"n":"figcaption","x":"Figure 25. 添加另一个远程仓库","l":"\n"}]},{"n":"p","x":"现在，可以运行 ","l":"\n","c":[{"n":"code","x":"git fetch teamone","l":" 来抓取远程仓库 ","a":[["class","literal"]]},{"n":"code","x":"teamone","l":" 有而本地没有的数据。\n因为那台服务器上现有的数据是 ","a":[["class","literal"]]},{"n":"code","x":"origin","l":" 服务器上的一个子集，\n所以 Git 并不会抓取数据而是会设置远程跟踪分支 ","a":[["class","literal"]]},{"n":"code","x":"teamone/master","l":" 指向 ","a":[["class","literal"]]},{"n":"code","x":"teamone","l":" 的 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/remote-branches-5.png"],["alt","远程跟踪分支 `teamone/master`。"],["data-calibre-src","OEBPS/images/remote-branches-5.png"]]}]},{"n":"figcaption","x":"Figure 26. 远程跟踪分支 ","l":"\n","c":[{"n":"code","x":"teamone/master","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","推送"]],"c":[{"n":"h3","x":"推送","l":"\n","a":[["id","_pushing_branches"]]},{"n":"p","x":"\n当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。\n本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。\n这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。","l":"\n"},{"n":"p","x":"如果希望和别人一起在名为 ","l":"\n","c":[{"n":"code","x":"serverfix","l":" 的分支上工作，你可以像推送第一个分支那样推送它。\n运行 ","a":[["class","literal"]]},{"n":"code","x":"git push <remote> <branch>","l":":","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git push origin serverfix\nCounting objects: 24, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.\nTotal 24 (delta 2), reused 0 (delta 0)\nTo https://github.com/schacon/simplegit\n * [new branch]      serverfix -> serverfix","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这里有些工作被简化了。\nGit 自动将 ","l":"\n","c":[{"n":"code","x":"serverfix","l":" 分支名字展开为 ","a":[["class","literal"]]},{"n":"code","x":"refs/heads/serverfix:refs/heads/serverfix","l":"，\n那意味着，“推送本地的 ","a":[["class","literal"]]},{"n":"code","x":"serverfix","l":" 分支来更新远程仓库上的 ","a":[["class","literal"]]},{"n":"code","x":"serverfix","l":" 分支。”\n我们将会详细学习 ","a":[["class","literal"]]},{"n":"a","x":"Git 内部原理","l":" 的 ","a":[["id","xref--ch10-git-internals"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"\"}"]]},{"n":"code","x":"refs/heads/","l":" 部分，\n但是现在可以先把它放在儿。你也可以运行 ","a":[["class","literal"]]},{"n":"code","x":"git push origin serverfix:serverfix","l":"，\n它会做同样的事——也就是说“推送本地的 ","a":[["class","literal"]]},{"n":"code","x":"serverfix","l":" 分支，将其作为远程仓库的 ","a":[["class","literal"]]},{"n":"code","x":"serverfix","l":" 分支”\n可以通过这种格式来推送本地分支到一个命名不相同的远程分支。\n如果并不想让远程仓库上的分支叫做 ","a":[["class","literal"]]},{"n":"code","x":"serverfix","l":"，可以运行 ","a":[["class","literal"]]},{"n":"code","x":"git push origin serverfix:awesomebranch","l":"\n来将本地的 ","a":[["class","literal"]]},{"n":"code","x":"serverfix","l":" 分支推送到远程仓库上的 ","a":[["class","literal"]]},{"n":"code","x":"awesomebranch","l":" 分支。","a":[["class","literal"]]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note: 如何避免每次输入密码"],["type","note",2]],"c":[{"n":"h2","x":"如何避免每次输入密码","l":"\n"},{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"如果你正在使用 HTTPS URL 来推送，Git 服务器会询问用户名与密码。\n默认情况下它会在终端中提示服务器是否允许你进行推送。","l":"\n"},{"n":"p","x":"如果不想在每一次推送时都输入用户名与密码，你可以设置一个 “credential cache”。\n最简单的方式就是将其保存在内存中几分钟，可以简单地运行 ","l":"\n","c":[{"n":"code","x":"git config --global credential.helper cache","l":" 来设置它。","a":[["class","literal"]]}]},{"n":"p","x":"想要了解更多关于不同验证缓存的可用选项，查看 ","l":"\n","c":[{"n":"a","x":"凭证存储","l":"。","a":[["id","xref--ch07-git-tools--_credential_caching"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"_credential_caching\"}"]]}]}]}]},{"n":"p","x":"下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 ","l":"\n","c":[{"n":"code","x":"origin/serverfix","l":"，指向服务器的 ","a":[["class","literal"]]},{"n":"code","x":"serverfix","l":" 分支的引用：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git fetch origin\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/schacon/simplegit\n * [new branch]      serverfix    -> origin/serverfix","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。\n换一句话说，这种情况下，不会有一个新的 ","l":"\n","c":[{"n":"code","x":"serverfix","l":" 分支——只有一个不可以修改的 ","a":[["class","literal"]]},{"n":"code","x":"origin/serverfix","l":" 指针。","a":[["class","literal"]]}]},{"n":"p","x":"可以运行 ","l":"\n","c":[{"n":"code","x":"git merge origin/serverfix","l":" 将这些工作合并到当前所在的分支。\n如果想要在自己的 ","a":[["class","literal"]]},{"n":"code","x":"serverfix","l":" 分支上工作，可以将其建立在远程跟踪分支之上：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout -b serverfix origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这会给你一个用于工作的本地分支，并且起点位于 ","l":"\n","c":[{"n":"code","x":"origin/serverfix","l":"。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","跟踪分支"]],"c":[{"n":"h3","x":"跟踪分支","l":"\n","a":[["id","_tracking_branches"]]},{"n":"p","x":"\n从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫做“上游分支”）。\n跟踪分支是与远程分支有直接关系的本地分支。\n如果在一个跟踪分支上输入 ","l":"\n","c":[{"n":"code","x":"git pull","l":"，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。","a":[["class","literal"]]}]},{"n":"p","x":"当克隆一个仓库时，它通常会自动地创建一个跟踪 ","l":"\n","c":[{"n":"code","x":"origin/master","l":" 的 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支。\n然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支。\n最简单的实例就是像之前看到的那样，运行 ","a":[["class","literal"]]},{"n":"code","x":"git checkout -b <branch> <remote>/<branch>","l":"。\n这是一个十分常用的操作所以 Git 提供了 ","a":[["class","literal"]]},{"n":"code","x":"--track","l":" 快捷方式：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout --track origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"由于这个操作太常用了，该捷径本身还有一个捷径。\n如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如果想要将本地分支与远程分支设置为不同的名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout -b sf origin/serverfix\nBranch sf set up to track remote branch serverfix from origin.\nSwitched to a new branch 'sf'","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"现在，本地分支 ","l":"\n","c":[{"n":"code","x":"sf","l":" 会自动从 ","a":[["class","literal"]]},{"n":"code","x":"origin/serverfix","l":" 拉取。","a":[["class","literal"]]}]},{"n":"p","x":"设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，\n你可以在任意时间使用 ","l":"\n","c":[{"n":"code","x":"-u","l":" 或 ","a":[["class","literal"]]},{"n":"code","x":"--set-upstream-to","l":" 选项运行 ","a":[["class","literal"]]},{"n":"code","x":"git branch","l":" 来显式地设置。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch -u origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.","a":[["style","font-weight: bold"]]}]}]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note: 上游快捷方式"],["type","note",2]],"c":[{"n":"h2","x":"上游快捷方式","l":"\n"},{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"当设置好跟踪分支后，可以通过简写 ","l":"\n","c":[{"n":"code","x":"@{upstream}","l":" 或 ","a":[["class","literal"]]},{"n":"code","x":"@{u}","l":" 来引用它的上游分支。\n所以在 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支时并且它正在跟踪 ","a":[["class","literal"]]},{"n":"code","x":"origin/master","l":" 时，如果愿意的话可以使用 ","a":[["class","literal"]]},{"n":"code","x":"git merge @{u}","l":" 来取代 ","a":[["class","literal"]]},{"n":"code","x":"git merge origin/master","l":"。","a":[["class","literal"]]}]}]}]},{"n":"p","x":"如果想要查看设置的所有跟踪分支，可以使用 ","l":"\n","c":[{"n":"code","x":"git branch","l":" 的 ","a":[["class","literal"]]},{"n":"code","x":"-vv","l":" 选项。\n这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch -vv\n  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets\n  master    1ae2a45 [origin/master] deploying index fix\n* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it\n  testing   5ea463a trying something new","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"这里可以看到 ","l":"\n","c":[{"n":"code","x":"iss53","l":" 分支正在跟踪 ","a":[["class","literal"]]},{"n":"code","x":"origin/iss53","l":" 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。\n也能看到 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支正在跟踪 ","a":[["class","literal"]]},{"n":"code","x":"origin/master","l":" 分支并且是最新的。\n接下来可以看到 ","a":[["class","literal"]]},{"n":"code","x":"serverfix","l":" 分支正在跟踪 ","a":[["class","literal"]]},{"n":"code","x":"teamone","l":" 服务器上的 ","a":[["class","literal"]]},{"n":"code","x":"server-fix-good","l":" 分支并且领先 3 落后 1，\n意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。\n最后看到 ","a":[["class","literal"]]},{"n":"code","x":"testing","l":" 分支并没有跟踪任何远程分支。","a":[["class","literal"]]}]},{"n":"p","x":"需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。\n这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。\n如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。\n可以像这样做：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git fetch --all; git branch -vv","a":[["style","font-weight: bold"]]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","拉取"]],"c":[{"n":"h3","x":"拉取","l":"\n","a":[["id","_拉取"]]},{"n":"p","x":"\n当 ","l":"\n","c":[{"n":"code","x":"git fetch","l":" 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。\n它只会获取数据然后让你自己合并。\n然而，有一个命令叫作 ","a":[["class","literal"]]},{"n":"code","x":"git pull","l":" 在大多数情况下它的含义是一个 ","a":[["class","literal"]]},{"n":"code","x":"git fetch","l":" 紧接着一个 ","a":[["class","literal"]]},{"n":"code","x":"git merge","l":" 命令。\n如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过\n","a":[["class","literal"]]},{"n":"code","x":"clone","l":" 或 ","a":[["class","literal"]]},{"n":"code","x":"checkout","l":" 命令为你创建的，","a":[["class","literal"]]},{"n":"code","x":"git pull","l":" 都会查找当前分支所跟踪的服务器与分支，\n从服务器上抓取数据然后尝试合并入那个远程分支。","a":[["class","literal"]]}]},{"n":"p","x":"由于 ","l":"\n","c":[{"n":"code","x":"git pull","l":" 的魔法经常令人困惑所以通常单独显式地使用 ","a":[["class","literal"]]},{"n":"code","x":"fetch","l":" 与 ","a":[["class","literal"]]},{"n":"code","x":"merge","l":" 命令会更好一些。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","删除远程分支"]],"c":[{"n":"h3","x":"删除远程分支","l":"\n","a":[["id","_delete_branches"]]},{"n":"p","x":"\n假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性，\n并且将其合并到了远程仓库的 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支（或任何其他稳定代码分支）。\n可以运行带有 ","a":[["class","literal"]]},{"n":"code","x":"--delete","l":" 选项的 ","a":[["class","literal"]]},{"n":"code","x":"git push","l":" 命令来删除一个远程分支。\n如果想要从服务器上删除 ","a":[["class","literal"]]},{"n":"code","x":"serverfix","l":" 分支，运行下面的命令：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git push origin --delete serverfix\nTo https://github.com/schacon/simplegit\n - [deleted]         serverfix","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"基本上这个命令做的只是从服务器上移除这个指针。\nGit 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","变基"]],"c":[{"n":"h2","x":"变基","l":"\n","a":[["id","_rebasing"]]},{"n":"p","x":"\n在 Git 中整合来自不同分支的修改主要有两种方法：","l":"\n","c":[{"n":"code","x":"merge","l":" 以及 ","a":[["class","literal"]]},{"n":"code","x":"rebase","l":"。\n在本节中我们将学习什么是“变基”，怎样使用“变基”，并将展示该操作的惊艳之处，以及指出在何种情况下你应避免使用它。","a":[["class","literal"]]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","变基的基本操作"]],"c":[{"n":"h3","x":"变基的基本操作","l":"\n","a":[["id","_变基的基本操作"]]},{"n":"p","x":"请回顾之前在 ","l":"\n","c":[{"n":"a","x":"分支的合并","l":" 中的一个例子，你会看到开发任务分叉到两个不同分支，又各自提交了更新。","a":[["id","xref-_basic_merging"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_basic_merging\"}"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/basic-rebase-1.png"],["alt","分叉的提交历史。"],["data-calibre-src","OEBPS/images/basic-rebase-1.png"]]}]},{"n":"figcaption","x":"Figure 27. 分叉的提交历史","l":"\n"}]},{"n":"p","x":"之前介绍过，整合分支最容易的方法是 ","l":"\n","c":[{"n":"code","x":"merge","l":" 命令。\n它会把两个分支的最新快照（","a":[["class","literal"]]},{"n":"code","x":"C3","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"C4","l":"）以及二者最近的共同祖先（","a":[["class","literal"]]},{"n":"code","x":"C2","l":"）进行三方合并，合并的结果是生成一个新的快照（并提交）。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","ebasing-merging-example"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/basic-rebase-2.png"],["alt","通过合并操作来整合分叉了的历史。"],["data-calibre-src","OEBPS/images/basic-rebase-2.png"]]}]},{"n":"figcaption","x":"Figure 28. 通过合并操作来整合分叉的历史","l":"\n"}]},{"n":"p","x":"其实，还有一种方法：你可以提取在 ","l":"\n","c":[{"n":"code","x":"C4","l":" 中引入的补丁和修改，然后在 ","a":[["class","literal"]]},{"n":"code","x":"C3","l":" 的基础上应用一次。\n在 Git 中，这种操作就叫做 ","a":[["class","literal"]]},{"n":"strong","x":"变基（rebase）","l":"。\n你可以使用 "},{"n":"code","x":"rebase","l":" 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。","a":[["class","literal"]]}]},{"n":"p","x":"在这个例子中，你可以检出 ","l":"\n","c":[{"n":"code","x":"experiment","l":" 分支，然后将它变基到 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支上：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout experiment\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git rebase master\nFirst, rewinding head to replay your work on top of it...\nApplying: added staged command","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"它的原理是首先找到这两个分支（即当前分支 ","l":"\n","c":[{"n":"code","x":"experiment","l":"、变基操作的目标基底分支 ","a":[["class","literal"]]},{"n":"code","x":"master","l":"）\n的最近共同祖先 ","a":[["class","literal"]]},{"n":"code","x":"C2","l":"，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，\n然后将当前分支指向目标基底 ","a":[["class","literal"]]},{"n":"code","x":"C3","l":", 最后以此将之前另存为临时文件的修改依序应用。\n（译注：写明了 commit id，以便理解，下同）","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/basic-rebase-3.png"],["alt","将 `C4` 中的修改变基到 `C3` 上。"],["data-calibre-src","OEBPS/images/basic-rebase-3.png"]]}]},{"n":"figcaption","x":"Figure 29. 将 ","l":"\n","c":[{"n":"code","x":"C4","l":" 中的修改变基到 ","a":[["class","literal"]]},{"n":"code","x":"C3","l":" 上","a":[["class","literal"]]}]}]},{"n":"p","x":"现在回到 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支，进行一次快进合并。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout master\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git merge experiment","a":[["style","font-weight: bold"]]}]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/basic-rebase-4.png"],["alt","`master` 分支的快进合并。"],["data-calibre-src","OEBPS/images/basic-rebase-4.png"]]}]},{"n":"figcaption","x":"Figure 30. ","l":"\n","c":[{"n":"code","x":"master","l":" 分支的快进合并","a":[["class","literal"]]}]}]},{"n":"p","x":"此时，","l":"\n","c":[{"n":"code","x":"C4'","l":" 指向的快照就和 ","a":[["class","literal"]]},{"n":"a","x":"the merge example","l":" 中 ","a":[["id","xref-ebasing-merging-example"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"ebasing-merging-example\"}"]]},{"n":"code","x":"C5","l":" 指向的快照一模一样了。\n这两种整合方法的最终结果没有任何区别，但是变基使得提交历史更加整洁。\n你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的，\n但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。","a":[["class","literal"]]}]},{"n":"p","x":"一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。\n在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 ","l":"\n","c":[{"n":"code","x":"origin/master","l":" 上，然后再向主项目提交修改。\n这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。","a":[["class","literal"]]}]},{"n":"p","x":"请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。\n变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","更有趣的变基例子"]],"c":[{"n":"h3","x":"更有趣的变基例子","l":"\n","a":[["id","_更有趣的变基例子"]]},{"n":"p","x":"在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。\n就像 ","l":"\n","c":[{"n":"a","x":"从一个主题分支里再分出一个主题分支的提交历史","l":" 中的例子那样。\n你创建了一个主题分支 ","a":[["id","xref-bdiag_e"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"bdiag_e\"}"]]},{"n":"code","x":"server","l":"，为服务端添加了一些功能，提交了 ","a":[["class","literal"]]},{"n":"code","x":"C3","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"C4","l":"。\n然后从 ","a":[["class","literal"]]},{"n":"code","x":"C3","l":" 上创建了主题分支 ","a":[["class","literal"]]},{"n":"code","x":"client","l":"，为客户端添加了一些功能，提交了 ","a":[["class","literal"]]},{"n":"code","x":"C8","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"C9","l":"。\n最后，你回到 ","a":[["class","literal"]]},{"n":"code","x":"server","l":" 分支，又提交了 ","a":[["class","literal"]]},{"n":"code","x":"C10","l":"。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","bdiag_e"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/interesting-rebase-1.png"],["alt","从一个主题分支里再分出一个主题分支的提交历史。"],["data-calibre-src","OEBPS/images/interesting-rebase-1.png"]]}]},{"n":"figcaption","x":"Figure 31. 从一个主题分支里再分出一个主题分支的提交历史","l":"\n"}]},{"n":"p","x":"假设你希望将 ","l":"\n","c":[{"n":"code","x":"client","l":" 中的修改合并到主分支并发布，但暂时并不想合并 ","a":[["class","literal"]]},{"n":"code","x":"server","l":" 中的修改，\n因为它们还需要经过更全面的测试。这时，你就可以使用 ","a":[["class","literal"]]},{"n":"code","x":"git rebase","l":" 命令的 ","a":[["class","literal"]]},{"n":"code","x":"--onto","l":" 选项，\n选中在 ","a":[["class","literal"]]},{"n":"code","x":"client","l":" 分支里但不在 ","a":[["class","literal"]]},{"n":"code","x":"server","l":" 分支里的修改（即 ","a":[["class","literal"]]},{"n":"code","x":"C8","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"C9","l":"），将它们在 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支上重放：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git rebase --onto master server client","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"以上命令的意思是：“取出 ","l":"\n","c":[{"n":"code","x":"client","l":" 分支，找出它从 ","a":[["class","literal"]]},{"n":"code","x":"server","l":" 分支分歧之后的补丁，\n然后把这些补丁在 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 分支上重放一遍，让 ","a":[["class","literal"]]},{"n":"code","x":"client","l":" 看起来像直接基于\n","a":[["class","literal"]]},{"n":"code","x":"master","l":" 修改一样”。这理解起来有一点复杂，不过效果非常酷。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/interesting-rebase-2.png"],["alt","截取主题分支上的另一个主题分支，然后变基到其他分支。"],["data-calibre-src","OEBPS/images/interesting-rebase-2.png"]]}]},{"n":"figcaption","x":"Figure 32. 截取主题分支上的另一个主题分支，然后变基到其他分支","l":"\n"}]},{"n":"p","x":"现在可以快进合并 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支了。（如图 ","a":[["class","literal"]]},{"n":"a","x":"快进合并 ","l":"）：","a":[["id","xref-bdiag_g"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"bdiag_g\"}"]],"c":[{"n":"code","x":"master","l":" 分支，使之包含来自 ","a":[["class","literal"]]},{"n":"code","x":"client","l":" 分支的修改","a":[["class","literal"]]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout master\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git merge client","a":[["style","font-weight: bold"]]}]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","bdiag_g"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/interesting-rebase-3.png"],["alt","快进合并 `master` 分支，使之包含来自 `client` 分支的修改。"],["data-calibre-src","OEBPS/images/interesting-rebase-3.png"]]}]},{"n":"figcaption","x":"Figure 33. 快进合并 ","l":"\n","c":[{"n":"code","x":"master","l":" 分支，使之包含来自 ","a":[["class","literal"]]},{"n":"code","x":"client","l":" 分支的修改","a":[["class","literal"]]}]}]},{"n":"p","x":"接下来你决定将 ","l":"\n","c":[{"n":"code","x":"server","l":" 分支中的修改也整合进来。\n使用 ","a":[["class","literal"]]},{"n":"code","x":"git rebase <basebranch> <topicbranch>","l":" 命令可以直接将主题分支\n（即本例中的 ","a":[["class","literal"]]},{"n":"code","x":"server","l":"）变基到目标分支（即 ","a":[["class","literal"]]},{"n":"code","x":"master","l":"）上。\n这样做能省去你先切换到 ","a":[["class","literal"]]},{"n":"code","x":"server","l":" 分支，再对其执行变基命令的多个步骤。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git rebase master server","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"如图 ","l":"\n","c":[{"n":"a","x":"将 ","l":" 所示，","a":[["id","xref-bdiag_h"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"bdiag_h\"}"]],"c":[{"n":"code","x":"server","l":" 中的修改变基到 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 上","a":[["class","literal"]]}]},{"n":"code","x":"server","l":" 中的代码被“续”到了 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 后面。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","bdiag_h"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/interesting-rebase-4.png"],["alt","将 `server` 中的修改变基到 `master` 上。"],["data-calibre-src","OEBPS/images/interesting-rebase-4.png"]]}]},{"n":"figcaption","x":"Figure 34. 将 ","l":"\n","c":[{"n":"code","x":"server","l":" 中的修改变基到 ","a":[["class","literal"]]},{"n":"code","x":"master","l":" 上","a":[["class","literal"]]}]}]},{"n":"p","x":"然后就可以快进合并主分支 ","l":"\n","c":[{"n":"code","x":"master","l":" 了：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git checkout master\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git merge server","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"至此，","l":"\n","c":[{"n":"code","x":"client","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"server","l":" 分支中的修改都已经整合到主分支里了，\n你可以删除这两个分支，最终提交历史会变成图 ","a":[["class","literal"]]},{"n":"a","x":"最终的提交历史","l":" 中的样子：","a":[["id","xref-bdiag_i"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"bdiag_i\"}"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git branch -d client\n","a":[["style","font-weight: bold"]]},{"n":"span","x":"$ ","l":"git branch -d server","a":[["style","font-weight: bold"]]}]}]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","bdiag_i"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/interesting-rebase-5.png"],["alt","最终的提交历史。"],["data-calibre-src","OEBPS/images/interesting-rebase-5.png"]]}]},{"n":"figcaption","x":"Figure 35. 最终的提交历史","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","变基的风险"]],"c":[{"n":"h3","x":"变基的风险","l":"\n","a":[["id","_rebase_peril"]]},{"n":"p","x":"\n呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：","l":"\n"},{"n":"p","l":"\n","c":[{"n":"strong","x":"如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。"}]},{"n":"p","x":"如果你遵循这条金科玉律，就不会出差错。\n否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。","l":"\n"},{"n":"p","x":"变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。\n如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交并进行了后续工作，此时，如果你用 ","l":"\n","c":[{"n":"code","x":"git rebase","l":" 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。","a":[["class","literal"]]}]},{"n":"p","x":"让我们来看一个在公开的仓库上执行变基操作所带来的问题。\n假设你从一个中央服务器克隆然后在它的基础上进行了一些开发。\n你的提交历史如图所示：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/perils-of-rebasing-1.png"],["alt","克隆一个仓库，然后在它的基础上进行了一些开发。"],["data-calibre-src","OEBPS/images/perils-of-rebasing-1.png"]]}]},{"n":"figcaption","x":"Figure 36. 克隆一个仓库，然后在它的基础上进行了一些开发","l":"\n"}]},{"n":"p","x":"然后，某人又向中央服务器提交了一些修改，其中还包括一次合并。\n你抓取了这些在远程分支上的修改，并将其合并到你本地的开发分支，然后你的提交历史就会变成这样：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/perils-of-rebasing-2.png"],["alt","抓取别人的提交，合并到自己的开发分支。"],["data-calibre-src","OEBPS/images/perils-of-rebasing-2.png"]]}]},{"n":"figcaption","x":"Figure 37. 抓取别人的提交，合并到自己的开发分支","l":"\n"}]},{"n":"p","x":"接下来，这个人又决定把合并操作回滚，改用变基；继而又用 ","l":"\n","c":[{"n":"code","x":"git push --force","l":" 命令覆盖了服务器上的提交历史。\n之后你从服务器抓取更新，会发现多出来一些新的提交。","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","_pre_merge_rebase_work"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/perils-of-rebasing-3.png"],["alt","有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交。"],["data-calibre-src","OEBPS/images/perils-of-rebasing-3.png"]]}]},{"n":"figcaption","x":"Figure 38. 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交","l":"\n"}]},{"n":"p","x":"结果就是你们两人的处境都十分尴尬。\n如果你执行 ","l":"\n","c":[{"n":"code","x":"git pull","l":" 命令，你将合并来自两条提交历史的内容，生成一个新的合并提交，最终仓库会如图所示：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","_merge_rebase_work"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/perils-of-rebasing-4.png"],["alt","你将相同的内容又合并了一次，生成了一个新的提交。"],["data-calibre-src","OEBPS/images/perils-of-rebasing-4.png"]]}]},{"n":"figcaption","x":"Figure 39. 你将相同的内容又合并了一次，生成了一个新的提交","l":"\n"}]},{"n":"p","x":"此时如果你执行 ","l":"\n","c":[{"n":"code","x":"git log","l":" 命令，你会发现有两个提交的作者、日期、日志居然是一样的，这会令人感到混乱。\n此外，如果你将这一堆又推送到服务器上，你实际上是将那些已经被变基抛弃的提交又找了回来，这会令人感到更加混乱。\n很明显对方并不想在提交历史中看到 ","a":[["class","literal"]]},{"n":"code","x":"C4","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"C6","l":"，因为之前就是他把这两个提交通过变基丢弃的。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","用变基解决变基"]],"c":[{"n":"h3","x":"用变基解决变基","l":"\n","a":[["id","_rebase_rebase"]]},{"n":"p","x":"如果你 ","l":"\n","c":[{"n":"strong","x":"真的","l":" 遭遇了类似的处境，Git 还有一些高级魔法可以帮到你。\n如果团队中的某人强制推送并覆盖了一些你所基于的提交，你需要做的就是检查你做了哪些修改，以及他们覆盖了哪些修改。"}]},{"n":"p","x":"实际上，Git 除了对整个提交计算 SHA-1 校验和以外，也对本次提交所引入的修改计算了校验和——即 “patch-id”。","l":"\n"},{"n":"p","x":"如果你拉取被覆盖过的更新并将你手头的工作基于此进行变基的话，一般情况下 Git 都能成功分辨出哪些是你的修改，并把它们应用到新分支上。","l":"\n"},{"n":"p","x":"举个例子，如果遇到前面提到的 ","l":"\n","c":[{"n":"a","x":"有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交","l":" 那种情境，如果我们不是执行合并，而是执行 ","a":[["id","xref-_pre_merge_rebase_work"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_pre_merge_rebase_work\"}"]]},{"n":"code","x":"git rebase teamone/master","l":", Git 将会：","a":[["class","literal"]]}]},{"n":"div","x":"\n","l":"\n","a":[["class","itemized-list"]],"c":[{"n":"ul","x":"\n","l":"\n","c":[{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"检查哪些提交是我们的分支上独有的（C2，C3，C4，C6，C7）","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"检查其中哪些提交不是合并操作的结果（C2，C3，C4）","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"检查哪些提交在对方覆盖更新时并没有被纳入目标分支（只有 C2 和 C3，因为 C4 其实就是 C4'）","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"把查到的这些提交应用在 ","l":"\n","a":[["class","principal"]],"c":[{"n":"code","x":"teamone/master","l":" 上面","a":[["class","literal"]]}]}]}]}]},{"n":"p","x":"从而我们将得到与 ","l":"\n","c":[{"n":"a","x":"你将相同的内容又合并了一次，生成了一个新的提交","l":" 中不同的结果，如图 ","a":[["id","xref-_merge_rebase_work"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_merge_rebase_work\"}"]]},{"n":"a","x":"在一个被变基然后强制推送的分支上再次执行变基","l":" 所示。","a":[["id","xref-_rebase_rebase_work"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"_rebase_rebase_work\"}"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","_rebase_rebase_work"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/perils-of-rebasing-5.png"],["alt","在一个被变基然后强制推送的分支上再次执行变基。"],["data-calibre-src","OEBPS/images/perils-of-rebasing-5.png"]]}]},{"n":"figcaption","x":"Figure 40. 在一个被变基然后强制推送的分支上再次执行变基","l":"\n"}]},{"n":"p","x":"要想上述方案有效，还需要对方在变基时确保 ","l":"\n","c":[{"n":"code","x":"C4'","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"C4","l":" 是几乎一样的。\n否则变基操作将无法识别，并新建另一个类似 ","a":[["class","literal"]]},{"n":"code","x":"C4","l":" 的补丁（而这个补丁很可能无法整洁的整合入历史，因为补丁中的修改已经存在于某个地方了）。","a":[["class","literal"]]}]},{"n":"p","x":"在本例中另一种简单的方法是使用 ","l":"\n","c":[{"n":"code","x":"git pull --rebase","l":" 命令而不是直接 ","a":[["class","literal"]]},{"n":"code","x":"git pull","l":"。\n又或者你可以自己手动完成这个过程，先 ","a":[["class","literal"]]},{"n":"code","x":"git fetch","l":"，再 ","a":[["class","literal"]]},{"n":"code","x":"git rebase teamone/master","l":"。","a":[["class","literal"]]}]},{"n":"p","x":"如果你习惯使用 ","l":"\n","c":[{"n":"code","x":"git pull","l":" ，同时又希望默认使用选项 ","a":[["class","literal"]]},{"n":"code","x":"--rebase","l":"，你可以执行这条语句 ","a":[["class","literal"]]},{"n":"code","x":"git config --global pull.rebase true","l":" 来更改 ","a":[["class","literal"]]},{"n":"code","x":"pull.rebase","l":" 的默认配置。","a":[["class","literal"]]}]},{"n":"p","x":"如果你只对不会离开你电脑的提交执行变基，那就不会有事。\n如果你对已经推送过的提交执行变基，但别人没有基于它的提交，那么也不会有事。\n如果你对已经推送至共用仓库的提交上执行变基命令，并因此丢失了一些别人的开发所基于的提交，\n那你就有大麻烦了，你的同事也会因此鄙视你。","l":"\n"},{"n":"p","x":"如果你或你的同事在某些情形下决意要这么做，请一定要通知每个人执行 ","l":"\n","c":[{"n":"code","x":"git pull --rebase","l":" 命令，这样尽管不能避免伤痛，但能有所缓解。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","变基 vs. 合并"]],"c":[{"n":"h3","x":"变基 vs. 合并","l":"\n","a":[["id","_变基_vs_合并"]]},{"n":"p","x":"\n至此，你已在实战中学习了变基和合并的用法，你一定会想问，到底哪种方式更好。\n在回答这个问题之前，让我们退后一步，想讨论一下提交历史到底意味着什么。","l":"\n"},{"n":"p","x":"有一种观点认为，仓库的提交历史即是 ","l":"\n","c":[{"n":"strong","x":"记录实际发生过什么","l":"。\n它是针对历史的文档，本身就有价值，不能乱改。\n从这个角度看来，改变提交历史是一种亵渎，你使用 "},{"n":"em","x":"谎言","l":" 掩盖了实际发生过的事情。\n如果由合并产生的提交历史是一团糟怎么办？\n既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。"}]},{"n":"p","x":"另一种观点则正好相反，他们认为提交历史是 ","l":"\n","c":[{"n":"strong","x":"项目过程中发生的事","l":"。\n没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。\n持这一观点的人会使用 "},{"n":"code","x":"rebase","l":" 及 ","a":[["class","literal"]]},{"n":"code","x":"filter-branch","l":" 等工具来编写故事，怎么方便后来的读者就怎么写。","a":[["class","literal"]]}]},{"n":"p","x":"现在，让我们回到之前的问题上来，到底合并还是变基好？希望你能明白，这并没有一个简单的答案。\nGit 是一个非常强大的工具，它允许你对提交历史做许多事情，但每个团队、每个项目对此的需求并不相同。\n既然你已经分别学习了两者的用法，相信你能够根据实际情况作出明智的选择。","l":"\n"},{"n":"p","x":"总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史，\n从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","总结"]],"c":[{"n":"h2","x":"总结","l":"\n","a":[["id","_总结"]]},{"n":"p","x":"我们已经讲完了 Git 分支与合并的基础知识。\n你现在应该能自如地创建并切换至新分支、在不同分支之间切换以及合并本地分支。\n你现在应该也能通过推送你的分支至共享服务以分享它们、使用共享分支与他人协作以及在共享之前使用变基操作合并你的分支。\n下一章，我们将要讲到，如果你想要运行自己的 Git 仓库托管服务器，你需要知道些什么。","l":"\n"}]}]}]}]},"ns_map":["http://www.w3.org/1999/xhtml","http://www.w3.org/XML/1998/namespace","http://www.idpf.org/2007/ops"]}