{"version":1,"tree":{"n":"html","a":[["lang","zh",1],["lang","zh"]],"c":[{"n":"head","x":"\n\n","l":"\n","c":[{"n":"title","x":"在其它环境中使用 Git","l":"\n"},{"n":"link","l":"\n","a":[["rel","stylesheet"],["type","text/css"],["href","styles/epub3.css"]]},{"n":"link","l":"\n","a":[["rel","stylesheet"],["type","text/css"],["href","styles/epub3-css3-only.css"],["media","(min-device-width: 0px)"]]},{"n":"script","x":"\ndocument.addEventListener('DOMContentLoaded', function(event, reader) {\n  if (!(reader = navigator.epubReadingSystem)) {\n    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };\n    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;\n  }\n  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));\n});\n","l":"\n","a":[["type","text/javascript"]]}]},{"n":"body","x":"\n","l":"\n","c":[{"n":"section","x":"\n","l":"\n","a":[["class","chapter"],["title","在其它环境中使用 Git"],["type","chapter",2],["id","A-git-in-other-environments"]],"c":[{"n":"header","x":"\n","l":"\n","c":[{"n":"div","x":"\n","l":"\n","a":[["class","chapter-header"]],"c":[{"n":"h1","l":"\n","a":[["class","chapter-title"]],"c":[{"n":"small","a":[["class","subtitle"]],"c":[{"n":"b","x":"在其它环境中使用","l":" "},{"n":"b","x":"Git"}]}]}]}]},{"n":"div","x":"\n","l":"\n","a":[["class","abstract"],["type","preamble",2]],"c":[{"n":"p","x":"如果你读完了本书，那就已经掌握了很多在命令行中使用 Git 的知识了。\n你可以用它来处理本地文件，通过网络连接到他人的仓库，以及高效地与他人协同工作。\n不过故事到这儿还没结束。Git 通常还会作为一个组件在更大的生态系统中使用，\n而终端并不总是最佳的使用方式。现在我们来看看 Git 在其它环境中的使用，\n以及其它应用（包括你的应用）是如何与 Git 协同使用的。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","图形界面"]],"c":[{"n":"h2","x":"图形界面","l":"\n","a":[["id","_图形界面"]]},{"n":"p","x":"\nGit 的原生环境是终端。\n在那里，你可以体验到最新的功能，也只有在那里，你才能尽情发挥 Git 的全部能力。\n但是对于某些任务而言，纯文本并不是最佳的选择；有时候你确实需要一个可视化的展示方式，而且有些用户更习惯那种能点击的界面。","l":"\n"},{"n":"p","x":"有一点请注意，不同的界面是为不同的工作流程设计的。\n一些客户端的作者为了支持他认为高效的特定的工作流程，经过精心挑选，只显示了 Git 功能的一个子集。\n每种工具都有其特定的目的和意义，从这个角度来看，不能说某种工具比其它的“更好”。\n还有请注意，没有什么事情是图形界面客户端可以做而命令行客户端不能做的，命令行始终是你可以完全操控仓库并发挥出全部力量的地方。","l":"\n"},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","gitk 和 git-gui"]],"c":[{"n":"h3","l":"\n","a":[["id","_code_class_literal_gitk_code_和_code_class_literal_git_gui_code"]],"c":[{"n":"code","x":"gitk","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"git-gui","a":[["class","literal"]]}]},{"n":"p","x":"\n在安装 Git 的同时，你也装好了它提供的可视化工具，","l":"\n","c":[{"n":"code","x":"gitk","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"git-gui","l":"。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"code","x":"gitk","l":" 是一个历史记录的图形化查看器。\n你可以把它当作是基于 ","a":[["class","literal"]]},{"n":"code","x":"git log","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"git grep","l":" 命令的一个强大的图形操作界面。\n当你需要查找过去发生的某次记录，或是可视化查看项目历史的时候，你将会用到这个工具。","a":[["class","literal"]]}]},{"n":"p","x":"使用 Gitk 的最简单方法就是从命令行打开。\n只需 ","l":"\n","c":[{"n":"code","x":"cd","l":" 到一个 Git 仓库，然后键入：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"gitk [git log options]","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"Gitk 可以接受很多命令行选项，其中的大部分都直接传给底层的 ","l":"\n","c":[{"n":"code","x":"git log","l":" 去执行了。\n","a":[["class","literal"]]},{"n":"code","x":"--all","l":" 可能是这其中最有用的一个, 它告诉 gitk 去尽可能地从 ","a":[["class","literal"]]},{"n":"em","x":"任何","l":" 引用查找提交并显示，而不仅仅是从 HEAD。\nGitk 的界面看起来长这样："}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/gitk.png"],["alt","`gitk` 历史查看器。"],["data-calibre-src","OEBPS/images/gitk.png"]]}]},{"n":"figcaption","x":"Figure 1. ","l":"\n","c":[{"n":"code","x":"gitk","l":" 历史查看器。","a":[["class","literal"]]}]}]},{"n":"p","x":"这张图看起来就和执行 ","l":"\n","c":[{"n":"code","x":"git log --graph","l":" 命令的输出差不多；每个点代表一次提交，线代表父子关系，而彩色的方块则用来标示一个个引用。\n黄点表示 HEAD，红点表示尚未提交的本地变动。\n下方的窗口用来显示当前选中的提交的具体信息；评论和补丁显示在左侧，摘要显示在右侧。\n中间则是一组用来搜索历史的控件。","a":[["class","literal"]]}]},{"n":"p","x":"与之相比，","l":"\n","c":[{"n":"code","x":"git-gui","l":" 则主要是一个用来制作提交的工具。\n打开它的最简单方法也是从命令行启动：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git gui","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"它的界面长这个样子：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/git-gui.png"],["alt","`git-gui` 提交工具。"],["data-calibre-src","OEBPS/images/git-gui.png"]]}]},{"n":"figcaption","x":"Figure 2. ","l":"\n","c":[{"n":"code","x":"git-gui","l":" 提交工具。","a":[["class","literal"]]}]}]},{"n":"p","x":"左侧是索引区，未暂存的修改显示在上方，已暂存的修改显示在下方。\n你可以通过点击文件名左侧的图标来将该文件在暂存状态与未暂存状态之间切换，你也可以通过选中一个文件名来查看它的详情。","l":"\n"},{"n":"p","x":"右侧窗口的上方以 diff 格式来显示当前选中文件发生了变动的地方。\n你可以通过右击某一区块或行从而将这一区块或行放入暂存区。","l":"\n"},{"n":"p","x":"右侧窗口的下方是写日志和执行操作的地方。\n在文本框中键入日志然后点击“提交”就和执行 ","l":"\n","c":[{"n":"code","x":"git commit","l":" 的效果差不多。\n如果你想要修订上一次提交, 可以选中“修订”按钮，上次一提交的内容就会显示在“暂存区”。\n然后你就可以简单的对修改进行暂存和取消暂存操作，更新提交日志，然后再次点击“提交”用这个新的提交来覆盖上一次提交。","a":[["class","literal"]]}]},{"n":"p","l":"\n","c":[{"n":"code","x":"gitk","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"git-gui","l":" 就是针对某种任务设计的工具的两个例子。\n它们分别为了不同的目的（即查看历史和制作提交）而进行了精简，略去了用不到的功能。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","GitHub for macOS and Windows"]],"c":[{"n":"h3","x":"GitHub for macOS and Windows","l":"\n","a":[["id","_github_for_macos_and_windows"]]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","macOS 和 Windows 上的 GitHub 客户端"]],"c":[{"n":"h3","x":"macOS 和 Windows 上的 GitHub 客户端","l":"\n","a":[["id","_macos_和_windows_上的_github_客户端"]]},{"n":"p","x":"\nGitHub 发布了两个面向工作流程的 Git 客户端：Windows 版，和 macOS 版。\n它们很好的展示了一个面向工作流程的工具应该是什么样子——专注于提升那些常用的功能及其协作的可用性，而不是实现 Git 的 ","l":"\n","c":[{"n":"em","x":"所有","l":" 功能.\n它们看起来长这个样子："}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/github_mac.png"],["alt","GitHub macOS 客户端。"],["data-calibre-src","OEBPS/images/github_mac.png"]]}]},{"n":"figcaption","x":"Figure 3. GitHub macOS 客户端。","l":"\n"}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/github_win.png"],["alt","GitHub Windows 客户端。"],["data-calibre-src","OEBPS/images/github_win.png"]]}]},{"n":"figcaption","x":"Figure 4. GitHub Windows 客户端。","l":"\n"}]},{"n":"p","x":"我们在设计的时候就努力将二者的外观和操作体验都保持一致，因此本章会把他们当做同一个产品来介绍。\n我们并不会详细地介绍该工具的每一个功能（因为它们本身也有文档），但请快速了解一下“变更”窗口（你大部分时间都会花在使用该窗口上）的以下几点：","l":"\n"},{"n":"div","x":"\n","l":"\n","a":[["class","itemized-list"]],"c":[{"n":"ul","x":"\n","l":"\n","c":[{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"左侧是正在追踪的仓库的列表；通过点击左上方的 “+” 图标，你可以添加一个需要追踪的仓库（既可以是通过 clone，也可以从本地添加）。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"中间是输入-提交区，你可以在这里输入提交日志，以及选择哪些文件需要被提交。\n（在 Windows 上，提交历史就显示在这个区域的下方；在 macOS 上，提交历史有一个单独的窗口）","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"右侧是修改查看区，它会告诉你工作目录里哪些东西被修改了（译注：修改模式），或选中的提交里包括了哪些修改（译注：历史模式）。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"最后需要熟悉的是右上角的 “Sync” 按钮，你主要通过这个按钮来进行网络上的交互。","l":"\n","a":[["class","principal"]]}]}]}]},{"n":"aside","x":"\n","l":"\n","a":[["class","admonition note"],["title","Note"],["type","note",2]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"p","x":"你不需要注册 GitHub 账号也可以使用这些工具。\n尽管它们是按照 GitHub 推荐的工作流程来设计的，并突出提升了一些 GitHub 的服务体验，但它们可以在任何 Git 仓库上工作良好，也可以通过网络连接到任意 Git 主机。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","安装"]],"c":[{"n":"h4","x":"安装","l":"\n","a":[["id","_安装"]]},{"n":"p","x":"GitHub 的 Windows 客户端可以从 ","l":"\n","c":[{"n":"a","x":"https://windows.github.com","l":" 下载，macOS 客户端可以从 ","a":[["href","https://windows.github.com"],["class","link"]]},{"n":"a","x":"https://mac.github.com","l":"下载。\n第一次打开软件时，它会引导你进行一系列的首次使用设置，例如设置你的姓名和电子邮件，它还会智能地帮你调整一些常用的默认设置，例如凭证缓存和 CRLF 的处理方式。","a":[["href","https://mac.github.com"],["class","link"]]}]},{"n":"p","x":"它们都是“绿色软件”——如果软件打开发现有更新，下载和安装升级包都是在后台完成的。\n为方便起见它们还打包了一份 Git，也就是说你一旦安装好就再也无需劳心升级的事情了。\nWindows 的客户端还提供了快捷方式，可以启动装了 Posh-git 插件的 Powershell，在本章的后面一节我们会详细介绍这方面的内容。","l":"\n"},{"n":"p","x":"接下来我们给它设置一些工作仓库。\n客户端会显示你在 GitHub 上有权限操作的仓库的列表，你可以选择一个然后一键克隆。\n如果你本地已经建立了仓库，只需要用鼠标把它从 Finder 或 Windows 资源管理器拖进 GitHub 客户端窗口，就可以把该仓库添加到左侧的仓库列表里面去了。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","推荐的工作流程"]],"c":[{"n":"h4","x":"推荐的工作流程","l":"\n","a":[["id","_推荐的工作流程"]]},{"n":"p","x":"安装并配置好以后，你就可以使用 GitHub 客户端来执行一些常见的 Git 任务。\n该工具所推荐的工作流程有时也被叫做“GitHub 流”。\n我们在 ","l":"\n","c":[{"n":"a","x":"GitHub 流程","l":" 一节中对此有详细的介绍，其要点是 (a) 你会提交到一个分支；(b) 你需要经常与远程仓库保持同步。","a":[["id","xref--ch06-github--_github_flow"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/ch06-github.xhtml\", \"frag\": \"_github_flow\"}"]]}]},{"n":"p","x":"两个平台上的客户端在分支管理上有所不同。\n在 macOS 上，创建分支的按钮在窗口的上方：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/branch_widget_mac.png"],["alt","macOS 上的“创建分支”按钮。"],["data-calibre-src","OEBPS/images/branch_widget_mac.png"]]}]},{"n":"figcaption","x":"Figure 5. macOS 上的“创建分支”按钮。","l":"\n"}]},{"n":"p","x":"在 Windows 上，你可以通过在分支切换挂件中输入新分支的名称来完成创建：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/branch_widget_win.png"],["alt","在 Windows 上创建分支。"],["data-calibre-src","OEBPS/images/branch_widget_win.png"]]}]},{"n":"figcaption","x":"Figure 6. 在 Windows 上创建分支。","l":"\n"}]},{"n":"p","x":"分支创建好以后，新建提交就变得非常简单直接了。\n现在工作目录中做一些修改，然后切换到 GitHub 客户端窗口，你所做的修改就会显示在那里。\n输入提交日志，选中那些需要被包含在本次提交中的文件，然后点击“提交”按钮（也可以在键盘上按 ctrl-enter 或 ⌘-enter）。","l":"\n"},{"n":"p","x":"“同步”功能是你在网络上和其它仓库交互的主要途径。\npush，fetch，merge，和 rebase 在 Git 内部是一连串独立的操作, 而 GitHub 客户端将这些操作都合并成了单独一个功能。\n你点击同步按钮时实际上会发生如下这些操作：","l":"\n"},{"n":"div","x":"\n","l":"\n","a":[["class","ordered-list arabic"]],"c":[{"n":"ol","x":"\n","l":"\n","a":[["class","arabic"]],"c":[{"n":"li","x":"\n","l":"\n","c":[{"n":"span","l":"\n","a":[["class","principal"]],"c":[{"n":"code","x":"git pull --rebase","l":"。\n如果上述命令由于存在合并冲突而失败，则会退而执行 ","a":[["class","literal"]]},{"n":"code","x":"git pull --no-rebase","l":"。","a":[["class","literal"]]}]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","l":"\n","a":[["class","principal"]],"c":[{"n":"code","x":"git push","l":"。","a":[["class","literal"]]}]}]}]}]},{"n":"p","x":"如果你遵循推荐的工作流程，以上就是最常用的一系列命令，因此将它们合并为一个让事情简单了很多。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","小结"]],"c":[{"n":"h4","x":"小结","l":"\n","a":[["id","_小结"]]},{"n":"p","x":"这些工具是为其各自针对的工作流程所量身定做的。\n开发者和非开发者可以轻松地在分分钟内就搭建起项目协作环境，它们还内置了其它辅助最佳实践的功能。\n但是，如果你的工作流程有所不同，或者你需要在进行网络操作时有更多的控制，那么建议你考虑一下其它客户端或者使用命令行。","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","其它图形界面"]],"c":[{"n":"h3","x":"其它图形界面","l":"\n","a":[["id","_其它图形界面"]]},{"n":"p","x":"除此之外，还有许许多多其它的图形化 Git 客户端，其中既有单一功能的定制工具，也有试图提供 Git 所有功能的复杂应用。\nGit 的官方网站整理了一份时下最流行的客户端的清单 ","l":"\n","c":[{"n":"a","x":"https://git-scm.com/downloads/guis","l":"。\n在 Git 的维基站点还可以看到一份更全的清单 ","a":[["href","https://git-scm.com/downloads/guis"],["class","link"]]},{"n":"a","x":"https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces","l":".","a":[["href","https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces"],["class","link"]]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","Visual Studio 中的 Git"]],"c":[{"n":"h2","x":"Visual Studio 中的 Git","l":"\n","a":[["id","_visual_studio_中的_git"]]},{"n":"p","x":"\n从 Visual Studio 2013 Update 1 版本开始，Visual Studio 用户可以在他们的 IDE 中直接使用内嵌的 Git 客户端。\nVisual Studio 集成源代码版本控制特性已经有很长一段时间，但面向的是集中式、文件锁定方式的系统，Git 并不能很好地符合这种工作流程。\nVisual Studio 2013 中已经支持 Git，并独立于原有版本管理系统，这使得 Visual Studio 和 Git 能更好地相互适应。","l":"\n"},{"n":"p","x":"想要找到这个特性，在 Visual Studio 中打开一个已经用 Git 管理的项目（或者直接在项目目录中 ","l":"\n","c":[{"n":"code","x":"git init","l":" ），选择菜单 View > Team Explorer。\n你将看到 \"Connect\" 视图，大概如下图所示：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/vs-1.png"],["alt","从 Team Explorer 中连接 Git 仓库。"],["data-calibre-src","OEBPS/images/vs-1.png"]]}]},{"n":"figcaption","x":"Figure 7. 从 Team Explorer 中连接 Git 仓库。","l":"\n"}]},{"n":"p","x":"Visual Studio 能够记住所有你打开过的用 Git 管理的项目，它们都在下方的列表中。\n如果没看到你想要的项目，点击 \"Add\" 按钮，添加项目工作目录的路径。\n双击其中一个本地的 Git 仓库会将你带入 \"Home\" 视图，大概如 ","l":"\n","c":[{"n":"a","x":"Visual Studio 中的 Git 仓库的 “Home” 视图。","l":" 所示。\n这是一个执行 Git 操作的操作中心；当你 ","a":[["id","xref-vs_home"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/A-git-in-other-environments.xhtml\", \"frag\": \"vs_home\"}"]]},{"n":"em","x":"正在编写","l":" 代码的时候，你可能主要关注 \"Changes\" 视图，当需要拉取同伴的改动时，你将使用 \"Unsynced Commits\" 和 \"Branches\" 视图。"}]},{"n":"figure","x":"\n","l":"\n","a":[["id","vs_home"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/vs-2.png"],["alt","Visual Studio 中的 Git 仓库的 “Home” 视图。"],["data-calibre-src","OEBPS/images/vs-2.png"]]}]},{"n":"figcaption","x":"Figure 8. Visual Studio 中的 Git 仓库的 “Home” 视图。","l":"\n"}]},{"n":"p","x":"Visual Studio 现在拥有一套着眼于任务的强大 Git 操作界面。\n它包括线性的历史视图、diff 视图、远程仓库操作命令，以及其它很多功能。\n这个特性的完整文档（放在这里并不合适）请参阅 ","l":"\n","c":[{"n":"a","x":"http://msdn.microsoft.com/en-us/library/hh850437.aspx","l":" 。","a":[["href","http://msdn.microsoft.com/en-us/library/hh850437.aspx"],["class","link"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","Visual Studio Code 中的 Git"]],"c":[{"n":"h2","x":"Visual Studio Code 中的 Git","l":"\n","a":[["id","_visual_studio_code_中的_git"]]},{"n":"p","x":"\nVisual Studio Code 自带对 Git 的支持。你需要已经安装好 2.0.0（及以上）版本的 Git。","l":"\n"},{"n":"p","x":"主要功能如下：","l":"\n"},{"n":"div","x":"\n","l":"\n","a":[["class","itemized-list"]],"c":[{"n":"ul","x":"\n","l":"\n","c":[{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"在行号槽显示你正在编辑的文件的改动情况。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"Git 状态栏（位于左下角）会显示当前所在分支，编辑指示符以及未提交或者未拉取的提交的数量。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"你能够在编辑器内完成常用的 Git 操作：","l":"\n","a":[["class","principal"]]},{"n":"div","x":"\n","l":"\n","a":[["class","itemized-list"]],"c":[{"n":"ul","x":"\n","l":"\n","c":[{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"初始化一个仓库。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"克隆一个仓库。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"新建分支和标签。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"暂存和提交修改。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"对一个远程分支进行推送/拉取/同步。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"解决合并冲突。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"查看比较。","l":"\n","a":[["class","principal"]]}]}]}]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"配合一个扩展，你也能够处理 GitHub 的拉取请求：\n","l":"\n","a":[["class","principal"]],"c":[{"n":"a","x":"https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github","a":[["href","https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github"],["class","link"]]}]}]}]}]},{"n":"p","x":"官方文档请访问：\n","l":"\n","c":[{"n":"a","x":"https://code.visualstudio.com/Docs/editor/versioncontrol","a":[["href","https://code.visualstudio.com/Docs/editor/versioncontrol"],["class","link"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","Eclipse 中的 Git"]],"c":[{"n":"h2","x":"Eclipse 中的 Git","l":"\n","a":[["id","_eclipse_中的_git"]]},{"n":"p","x":"\nEclipse 附带了一个名为 Egit 的插件，它提供了一个非常完善的 Git 操作接口。\n这个插件可以通过切换到 Git 视图来使用。（ Window > Open Perspective > Other…， 然后选择 “Git” ）。","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/egit.png"],["alt","Eclipse 中 EGit 的界面环境。"],["data-calibre-src","OEBPS/images/egit.png"]]}]},{"n":"figcaption","x":"Figure 9. Eclipse 中 EGit 的界面环境。","l":"\n"}]},{"n":"p","x":"EGit 提供了许多强大的帮助文档，你能通过下面的操作来访问它：单击菜单 Help > Help Contents，然后从内容列表中选择 “EGit Documentation” 节点。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","IntelliJ / PyCharm / WebStorm / PhpStorm / RubyMine 中的 Git"]],"c":[{"n":"h2","x":"IntelliJ / PyCharm / WebStorm / PhpStorm / RubyMine 中的 Git","l":"\n","a":[["id","_intellij_pycharm_webstorm_phpstorm_rubymine_中的_git"]]},{"n":"p","x":"\nJetBrains IDEs（比如 IntelliJ IDEA，PyCharm，WebStorm，PhpStorm，RubyMine，以及其他）自带 Git 集成插件。插件在 IDE 中提供了一个专门的页面，可以使用 Git 和 GitHub 的 Pull Request。","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/jb.png"],["alt","JetBrains IDEs 中的版本控制工具窗口。"],["data-calibre-src","OEBPS/images/jb.png"]]}]},{"n":"figcaption","x":"Figure 10. JetBrains IDEs 中的版本控制工具窗口。","l":"\n"}]},{"n":"p","x":"该集成插件依赖于 Git 的命令行客户端，所以需要先安装一个 Git 客户端。官方文档请访问：\n","l":"\n","c":[{"n":"a","x":"https://www.jetbrains.com/help/idea/using-git-integration.html","l":" 。","a":[["href","https://www.jetbrains.com/help/idea/using-git-integration.html"],["class","link"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","Sublime Text 中的 Git"]],"c":[{"n":"h2","x":"Sublime Text 中的 Git","l":"\n","a":[["id","_sublime_text_中的_git"]]},{"n":"p","x":"\n从 3.2 版本开始，Sublime Text 在编辑器内集成了 Git。","l":"\n"},{"n":"p","x":"功能如下：","l":"\n"},{"n":"div","x":"\n","l":"\n","a":[["class","itemized-list"]],"c":[{"n":"ul","x":"\n","l":"\n","c":[{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"侧边栏将会使用图标来指明文件及文件夹的 Git 状态。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"被你的 .gitignore 文件所指定忽略的文件以及文件夹会在侧边栏褪色显示。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"在状态栏，你能够查看当前所在分支以及你做了多少修改。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"对一个文件的所有改动都会通过行号槽上的记号显示出来。","l":"\n","a":[["class","principal"]]}]},{"n":"li","x":"\n","l":"\n","c":[{"n":"span","x":"你能够在 Sublime Text 内使用 Sublime Merge 这个 Git 客户端的部分功能。（要求安装 Sublime Merge：\n","l":"\n","a":[["class","principal"]],"c":[{"n":"a","x":"https://www.sublimemerge.com/","l":" ）","a":[["href","https://www.sublimemerge.com/"],["class","link"]]}]}]}]}]},{"n":"p","x":"Sublime Text 的官方文档请访问：\n","l":"\n","c":[{"n":"a","x":"https://www.sublimetext.com/docs/3/git_integration.html","l":" 。","a":[["href","https://www.sublimetext.com/docs/3/git_integration.html"],["class","link"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","Bash 中的 Git"]],"c":[{"n":"h2","x":"Bash 中的 Git","l":"\n","a":[["id","_bash_中的_git"]]},{"n":"p","x":"\n如果你是一名 Bash 用户，你可以从中发掘出一些 Shell 的特性，让你在使用 Git 时更加随心所欲。\n实际上 Git 附带了几个 Shell 的插件，但是这些插件并不是默认打开的。","l":"\n"},{"n":"p","x":"首先，你需要从 Git 源代码中获得一份 ","l":"\n","c":[{"n":"code","x":"contrib/completion/git-completion.bash","l":" 文件的拷贝。\n将这个文件复制到一个相对便捷的目录，例如你的 Home 目录，并且将它的路径添加到 ","a":[["class","literal"]]},{"n":"code","x":".bashrc","l":" 中：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":". ~/git-completion.bash"}]}]}]},{"n":"p","x":"做完这些之后，请将你当前的目录切换到某一个 Git 仓库，并且输入：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git chec<tab>","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"……此时 Bash 将会把上面的命令自动补全为 ","l":"\n","c":[{"n":"code","x":"git checkout","l":"。\n在适当的情况下，这项功能适用于 Git 所有的子命令、命令行参数、以及远程仓库与引用名。","a":[["class","literal"]]}]},{"n":"p","x":"这项功能也可以用于你自己定义的提示符（","l":"\n","c":[{"n":"code","x":"prompt","l":"），显示当前目录下 Git 仓库的信息。\n根据你的需要，这个信息可以简单或复杂，这里通常有大多数人想要的几个关键信息，比如当前分支信息和当前工作目录的状态信息。\n要添加你自己的提示符（","a":[["class","literal"]]},{"n":"code","x":"prompt","l":"），只需从 Git 源版本库复制 ","a":[["class","literal"]]},{"n":"code","x":"contrib/completion/git-prompt.sh","l":" 文件到你的 Home 目录（或其他便于你访问与管理的目录）， 并在 ","a":[["class","literal"]]},{"n":"code","x":".bashrc","l":" 里添加这个文件路径，类似于下面这样：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":". ~/git-prompt.sh\nexport GIT_PS1_SHOWDIRTYSTATE=1\nexport PS1='\\w$(__git_ps1 \" (%s)\")\\$ '"}]}]}]},{"n":"p","l":"\n","c":[{"n":"code","x":"\\w","l":" 表示打印当前工作目录，","a":[["class","literal"]]},{"n":"code","x":"\\$","l":" 打印 ","a":[["class","literal"]]},{"n":"code","x":"$","l":" 部分的提示符（","a":[["class","literal"]]},{"n":"code","x":"prompt","l":"），","a":[["class","literal"]]},{"n":"code","x":"__git_ps1 \" (%s)\"","l":" 表示通过格式化参数符（","a":[["class","literal"]]},{"n":"code","x":"%s","l":"）调用`git-prompt.sh`脚本中提供的函数。\n因为有了这个自定义提示符，现在你的 ","a":[["class","literal"]]},{"n":"code","x":"Bash","l":" 提示符（","a":[["class","literal"]]},{"n":"code","x":"prompt","l":"）在 Git 仓库的任何子目录中都将显示成这样：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/git-bash.png"],["alt","自定义的 `bash` 提示符（`prompt`）."],["data-calibre-src","OEBPS/images/git-bash.png"]]}]},{"n":"figcaption","x":"Figure 11. 自定义的 ","l":"\n","c":[{"n":"code","x":"bash","l":" 提示符（","a":[["class","literal"]]},{"n":"code","x":"prompt","l":"）.","a":[["class","literal"]]}]}]},{"n":"p","x":"这两个脚本都提供了很有帮助的文档；浏览 ","l":"\n","c":[{"n":"code","x":"git-completion.bash","l":" 和 ","a":[["class","literal"]]},{"n":"code","x":"git-prompt.sh","l":" 的内容以获得更多信息。","a":[["class","literal"]]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","Zsh 中的 Git"]],"c":[{"n":"h2","x":"Zsh 中的 Git","l":"\n","a":[["id","_zsh_中的_git"]]},{"n":"p","x":"\nZsh 还为 Git 提供了一个 Tab 补全库。\n想要使用它，只需在你的 ","l":"\n","c":[{"n":"code","x":".zshrc","l":" 中执行 ","a":[["class","literal"]]},{"n":"code","x":"autoload -Uz compinit && compinit","l":" 即可。\n相对于 Bash，Zsh 的接口更加强大：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span"},{"n":"span","x":"$ ","l":"git che<Tab>\ncheck-attr        -- 显示 gitattributes 信息\ncheck-ref-format  -- 检查引用名称是否符合规范\ncheckout          -- 从工作区中检出分支或路径\ncheckout-index    -- 从暂存区拷贝文件至工作目录\ncherry            -- 查找没有被合并至上游的提交\ncherry-pick       -- 从一些已存在的提交中应用更改","a":[["style","font-weight: bold"]]}]}]}]},{"n":"p","x":"有歧义的 Tab 补全不仅会被列出，它们还会有帮助性的描述，你可以通过不断敲击 Tab 以图形方式浏览补全列表。\n该功能可用于 Git 命令、它们的参数和在仓库中内容的名称（例如 refs 和 remotes），还有文件名和其他所有 Zsh 知道如何去补全的项目。","l":"\n"},{"n":"p","x":"Zsh 提供了一个从版本控制系统中获取信息的框架，叫做 ","l":"\n","c":[{"n":"code","x":"vcs_info","l":" 。\n把如下代码添加至你的 ","a":[["class","literal"]]},{"n":"code","x":"~/.zshrc","l":" 文件中，就可以在右侧显示分支名称：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-console"]],"c":[{"n":"code","c":[{"n":"span","l":"autoload -Uz vcs_info\nprecmd_vcs_info() { vcs_info }\nprecmd_functions+=( precmd_vcs_info )\nsetopt prompt_subst\nRPROMPT=\\$vcs_info_msg_0_\n"},{"n":"span","x":"# ","l":"PROMPT=","a":[["style","font-weight: bold"]]},{"n":"span","x":"\\$","l":"vcs_info_msg_0_","a":[["style","font-weight: bold; font-style: italic"]]},{"n":"span","x":"'%# '","l":"\nzstyle ':vcs_info:git:*' formats '%b'","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"当你的命令行位于一个 Git 仓库目录时，在任何时候，都可以在命令行窗口右侧显示当前分支。\n（当然也可以在左侧显示，只需把上面 PROMPT 的注释去掉即可。）\n它看起来像这样：","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/zsh-prompt.png"],["alt","自定义 `zsh` 提示符."],["data-calibre-src","OEBPS/images/zsh-prompt.png"]]}]},{"n":"figcaption","x":"Figure 12. 自定义 ","l":"\n","c":[{"n":"code","x":"zsh","l":" 提示符.","a":[["class","literal"]]}]}]},{"n":"p","x":"关于 vcs_info 的更多信息，可参见 ","l":"\n","c":[{"n":"code","x":"zshcontrib(1)","l":" 手册页面中对应的文档，或访问\n","a":[["class","literal"]]},{"n":"a","x":"http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information","l":" 在线浏览。","a":[["href","http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information"],["class","link"]]}]},{"n":"p","x":"比起 vcs_info 而言，你可能更偏好提供了 Git 的命令提示符定制脚本 ","l":"\n","c":[{"n":"code","x":"git-prompt.sh","l":" 。\n更多信息见 ","a":[["class","literal"]]},{"n":"a","x":"https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh","l":" 。\n","a":[["href","https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh"],["class","link"]]},{"n":"code","x":"git-prompt.sh","l":" 同时兼容 Bash 和 Zsh。","a":[["class","literal"]]}]},{"n":"p","x":"Zsh 本身已足够强大，但还有一些专门为它打造的完整框架，使它更加完善。\n其中之一名为 \"oh-my-zsh\"，你可以在 ","l":"\n","c":[{"n":"a","x":"https://github.com/robbyrussell/oh-my-zsh","l":" 找到它。\noh-my-zsh 的扩展系统包含强大的 Git Tab 补全功能，且许多提示符 \"主题\" 可以展示版本控制数据。\n","a":[["href","https://github.com/robbyrussell/oh-my-zsh"],["class","link"]]},{"n":"a","x":"一个 oh-my-zsh 主题的示例.","l":" 只是可以其中一个可以通过该系统实现的例子。","a":[["id","xref-oh_my_zsh_git"],["href","javascript:void(0)"],["class","xref"],["data-Z5ljfaarsuY3mMdpckH3E3","{\"name\": \"OEBPS/A-git-in-other-environments.xhtml\", \"frag\": \"oh_my_zsh_git\"}"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["id","oh_my_zsh_git"],["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/zsh-oh-my.png"],["alt","一个 oh-my-zsh 主题的示例."],["data-calibre-src","OEBPS/images/zsh-oh-my.png"]]}]},{"n":"figcaption","x":"Figure 13. 一个 oh-my-zsh 主题的示例.","l":"\n"}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","Git 在 PowerShell 中使用 Git"]],"c":[{"n":"h2","x":"Git 在 PowerShell 中使用 Git","l":"\n","a":[["id","_git_powershell"]]},{"n":"p","x":"\n\nWindows 中早期的命令行终端 ","l":"\n","c":[{"n":"code","x":"cmd.exe","l":" 无法自定义 Git 使用体验，但是如果你正在使用 Powershell，那么你就十分幸运了。\n这种方法同样适用于 Linux 或 macOS 上运行的 PowerShell Core。\n一个名为 Posh-Git (","a":[["class","literal"]]},{"n":"a","x":"https://github.com/dahlbyk/posh-git","l":") 的扩展包提供了强大的 tab 补全功能， 并针对提示符进行了增强，以帮助你聚焦于你的仓库状态。\n它看起来像：","a":[["href","https://github.com/dahlbyk/posh-git"],["class","link"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","image"]],"c":[{"n":"div","x":"\n","l":"\n","a":[["class","content"]],"c":[{"n":"img","l":"\n","a":[["src","images/posh-git.png"],["alt","附带了 Posh-Git 扩展包的 Powershell"],["data-calibre-src","OEBPS/images/posh-git.png"]]}]},{"n":"figcaption","x":"Figure 14. 附带了 Posh-Git 扩展包的 Powershell。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect2"],["title","安装"]],"c":[{"n":"h3","x":"安装","l":"\n","a":[["id","_安装_2"]]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","前提需求（仅限 Windows）"]],"c":[{"n":"h4","x":"前提需求（仅限 Windows）","l":"\n","a":[["id","_前提需求_仅限_windows"]]},{"n":"p","x":"在可以运行 PowerShell 脚本之前，你需要将本地的 ExecutionPolicy 设置为 RemoteSigned\n（可以说是允许除了 Undefined 和 Restricted 之外的任何内容）。如果你选择了 AllSigned\n而非 RemoteSigned，那么你的本地脚本还需要数字签名后才能执行。如果设置为 RemoteSigned，\n那么只有“ZoneIdentifier”设置为 Internet，即从 Web 上下载的脚本才需要签名，其它则不需要。\n如果你是管理员，想要为本机上的所有用户设置它，请使用“-Scope LocalMachine”。\n如果你是没有管理权限的普通用户，可使用“-Scope CurrentUser”来只为自己设置它。","l":"\n"},{"n":"p","x":"有关 PowerShell Scopes 的更多详情： ","l":"\n","c":[{"n":"a","x":"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_scopes","a":[["href","https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_scopes"],["class","link"]]}]},{"n":"p","x":"有关 PowerShell ExecutionPolicy 的更多详情： ","l":"\n","c":[{"n":"a","x":"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy","a":[["href","https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy"],["class","link"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-powershell"]],"c":[{"n":"code","c":[{"n":"span","l":"> Set-ExecutionPolicy -Scope LocalMachine -ExecutionPolicy RemoteSigned -Force"}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","PowerShell Gallery"]],"c":[{"n":"h4","x":"PowerShell Gallery","l":"\n","a":[["id","_powershell_gallery"]]},{"n":"p","x":"如果你有 PowerShell 5 以上或安装了 PackageManagement 的 PowerShell 4，那么可以用包管理器来安装 posh-git。","l":"\n"},{"n":"p","x":"有关 PowerShell Gallery 的更多详情： ","l":"\n","c":[{"n":"a","x":"https://docs.microsoft.com/en-us/powershell/scripting/gallery/overview","a":[["href","https://docs.microsoft.com/en-us/powershell/scripting/gallery/overview"],["class","link"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-powershell"]],"c":[{"n":"code","c":[{"n":"span","l":"> Install-Module posh-git -Scope CurrentUser -Force\n> Install-Module posh-git -Scope CurrentUser -AllowPrerelease -Force "},{"n":"span","x":"# 带有 PowerShell Core 支持的更新的 beta 版","a":[["style","font-style: italic"]]}]}]}]},{"n":"p","x":"如果你想为所有的用户安装 posh-git，请使用“-Scope AllUsers”并在管理员权限启动的 PowerShell 控制台中执行。\n如果第二条命令执行失败并出现类似 ","l":"\n","c":[{"n":"code","x":"Module 'PowerShellGet' was not installed by using Install-Module","l":" 这样的错误，\n那么你需要先运行另一条命令：","a":[["class","literal"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-powershell"]],"c":[{"n":"code","c":[{"n":"span","l":"> Install-Module PowerShellGet -Force -SkipPublisherCheck"}]}]}]},{"n":"p","x":"之后你可以再试一遍。出现这个错误的原因是 Windows PowerShell 搭载的模块是以不同的发布证书签名的。","l":"\n"}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","更新 PowerShell 提示符"]],"c":[{"n":"h4","x":"更新 PowerShell 提示符","l":"\n","a":[["id","_更新_powershell_提示符"]]},{"n":"p","x":"要在你的提示符中包含 Git 信息，那么需要导入 Posh-Git 模块。\n要让 PowerShell 在每次启动时都导入 Posh-Git，请执行 Add-PoshGitToProfile 命令，\n它会在你的 $profile 脚本中添加导入语句。此脚本会在每次打开新的 PowerShell 终端时执行。\n注意，存在多个 $profile 脚本。例如，其中一个是控制台的，另一个则属于 ISE。","l":"\n"},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-powershell"]],"c":[{"n":"code","c":[{"n":"span","l":"> Import-Module posh-git\n> Add-PoshGitToProfile -AllHosts"}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect3"],["title","从源码安装"]],"c":[{"n":"h4","x":"从源码安装","l":"\n","a":[["id","_从源码安装"]]},{"n":"p","x":"只需从 (","l":"\n","c":[{"n":"a","x":"https://github.com/dahlbyk/posh-git","l":") 下载一份 Posh-Git 的发行版并解压即可。\n接着使用 posh-git.psd1 文件的完整路径导入此模块：","a":[["href","https://github.com/dahlbyk/posh-git"],["class","link"]]}]},{"n":"figure","x":"\n","l":"\n","a":[["class","listing"]],"c":[{"n":"pre","l":"\n","a":[["class","source language-powershell"]],"c":[{"n":"code","c":[{"n":"span","l":"> Import-Module <path-to-uncompress-folder>\\src\\posh-git.psd1\n> Add-PoshGitToProfile -AllHosts"}]}]}]},{"n":"p","x":"它将会向你的 ","l":"\n","c":[{"n":"code","x":"profile.ps1","l":" 文件添加适当的内容，Posh-Git 将会在下次打开 PowerShell 时启用。\n命令提示符显示的 Git 状态信息的解释见： ","a":[["class","literal"]]},{"n":"a","x":"https://github.com/dahlbyk/posh-git/blob/master/README.md#git-status-summary-information","l":"\n如何定制 Posh-Git 提示符的详情见： ","a":[["href","https://github.com/dahlbyk/posh-git/blob/master/README.md#git-status-summary-information"],["class","link"]]},{"n":"a","x":"https://github.com/dahlbyk/posh-git/blob/master/README.md#customization-variables","a":[["href","https://github.com/dahlbyk/posh-git/blob/master/README.md#customization-variables"],["class","link"]]}]}]}]}]},{"n":"section","x":"\n","l":"\n","a":[["class","sect1"],["title","总结"]],"c":[{"n":"h2","x":"总结","l":"\n","a":[["id","_总结"]]},{"n":"p","x":"现在你已经学会如何在日常使用的工具中驾驭强大的 Git，以及如何在自己的程序中访问 Git 仓库了。","l":"\n"}]}]}]}]},"ns_map":["http://www.w3.org/1999/xhtml","http://www.w3.org/XML/1998/namespace","http://www.idpf.org/2007/ops"]}